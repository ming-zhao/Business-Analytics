{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%run ../initscript.py\n",
    "HTML(\"\"\"\n",
    "<div id=\"popup\" style=\"padding-bottom:5px; display:none;\">\n",
    "    <div>Enter Password:</div>\n",
    "    <input id=\"password\" type=\"password\"/>\n",
    "    <button onclick=\"done()\" style=\"border-radius: 12px;\">Submit</button>    \n",
    "</div>\n",
    "<button onclick=\"unlock()\" style=\"border-radius: 12px;\">Unclock</button>\n",
    "<a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "%run loadmlfuncs.py"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Current Status of Deep Learning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Achievements\n",
    "\n",
    "Deep learning has achieved the following breakthroughs, all in historically difficult areas of machine learning:\n",
    "\n",
    "- Near-human-level image classification\n",
    "\n",
    "- Near-human-level speech recognition\n",
    "\n",
    "- Near-human-level handwriting transcription\n",
    "\n",
    "- Improved machine translation\n",
    "\n",
    "- Improved text-to-speech conversion\n",
    "\n",
    "- Digital assistants such as Google Now and Amazon Alexa\n",
    "\n",
    "- Near-human-level autonomous driving\n",
    "\n",
    "- Improved ad targeting, as used by Google, Baidu, and Bing\n",
    "\n",
    "- Improved search results on the web\n",
    "\n",
    "- Ability to answer natural-language questions\n",
    "\n",
    "- Superhuman Go playing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hardware\n",
    "\n",
    "Although our laptop can run small deep-learning models, typical deep-learning models used in computer vision or speech recognition require orders of magnitude more computational power.\n",
    "\n",
    "Throughout the 2000s, companies like NVIDIA and AMD have been investing billions of dollars in developing fast, massively parallel chips, graphical processing units (GPUs), to power the graphics of increasingly photorealistic video games — cheap, single-purpose supercomputers designed to render complex 3D scenes on the screen in real time.\n",
    "\n",
    "At the end of 2015, the NVIDIA TITAN X, a gaming GPU that cost \\$1,000 can perform 6.6 trillion `float32` operations per second. That is about 350 times more than what you can get out of a modern laptop. Meanwhile, large companies train deep-learning models on clusters of hundreds of GPUs of a type developed specifically for the needs of deep learning, such as the NVIDIA Tesla K80. The sheer computational power of such clusters is something that would never have been possible without modern GPUs.\n",
    "\n",
    "The deep-learning industry is starting to go beyond GPUs and is investing in increasingly specialized, efficient chips for deep learning. In 2016, at its annual I/O convention, Google revealed its tensor processing unit (TPU) project: a new chip design developed from the ground up to run deep neural networks, which is reportedly 10 times faster and far more energy efficient than top-of-the-line GPUs.\n",
    "\n",
    "If you don't already have a GPU that you can use for deep learning, then running deep-learning experiments in the cloud is a simple, low cost way for you to get started without having to buy any additional hardware. But if you're a heavy user of deep learning, this setup isn't sustainable in the long term or even for more than a few weeks."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Investment\n",
    "\n",
    "As deep learning became the new state of the art for computer vision and eventually for all perceptual tasks, industry leaders took note. What followed was a gradual wave of industry investment far beyond anything previously seen in the history of AI.\n",
    "\n",
    "- In 2011 (right before deep learning took the spotlight), the total venture capital investment in AI was around <span>&dollar;</span>19 million\n",
    "\n",
    "- By 2014, the total venture capital investment in AI had risen to <span>&dollar;</span>394 million\n",
    "\n",
    "    - Google acquired the deep-learning startup DeepMind for a reported <span>&dollar;</span>500 million — the largest acquisition of an AI company in history.\n",
    "    \n",
    "    - Baidu started a deep-learning research center in Silicon Valley, investing <span>&dollar;</span>300 million in the project.\n",
    "    \n",
    "    - Intel acquired a deep-learning hardware startup Nervana Systems for over <span>&dollar;</span>400 million.\n",
    "    \n",
    "There are currently no signs that this uptrend will slow any time soon."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model v.s. Data\n",
    "\n",
    "As entrepreneurs of AI start-ups, Alice and Bob had received similar amount of investments and competed in the same market\n",
    "\n",
    "- Alice spent lots of money to hire top engineers in AI field\n",
    "\n",
    "- Bob hired only mediocre engineers and spent most of his money to obtain high quality data with larger size\n",
    "\n",
    "Who will you invest? Why?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"hide_answer(this); return false;\">show answer</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hide_answer()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "acc1 = net_compare(512, .25)\n",
    "acc2 = net_compare(128, 1)\n",
    "print('The accuracy of a complicated model (with 512 nodes) with less (one fourth of) training data:', acc1)\n",
    "print('The accuracy of a simple model (with 128 nodes) and full training data:', acc2)\n",
    "print('The improvement is {}%!'.format(round((acc2-acc1)/(1-acc1)*100,2)))\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Is Deep Learning Everything?\n",
    "\n",
    "Suppose you're trying to develop a model that can take as input images of a clock \n",
    "\n",
    "![clock](https://github.com/ming-zhao/Business-Analytics/raw/master/images/clock.png)\n",
    "\n",
    "and can output the time of day. What machine learning approach will you use?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"hide_answer(this); return false;\">show answer</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hide_answer()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- If you choose to use the raw pixels of the image as input data, then you have a difficult machine-learning problem on your hands. You'll need a convolutional neural network to solve it, and you'll have to expend quite a bit of computational resources to train the network.\n",
    "\n",
    "- But if you already understand the problem at a high level, you can write a five-line Python script to follow the **black pixels of the clock hands** and output the $(x, y)$ coordinates of the tip of each hand. Then a simple machine-learning algorithm can learn to associate these coordinates with the appropriate time of day. For example, the long hand has $(x=0.7, y=0.7)$ and the short hand has $(x=0.5, y=0.0)$ in the first image, and the long hand has $(x=0.0, y=1.0)$ and the short hand has $(x=-0.38, y=0.32)$ in the second image.\n",
    "\n",
    "- You can go even further: do a coordinate change, and express the $(x, y)$ coordinates as the angle of each clock hand. For example, the long hand has angle $45$ degree and the short hand has angle $0$ degree in the first image, and the long hand has angle $90$ degree and the short hand has angle $140$ degree in the second image. At this point, your features are making the problem so easy that no machine learning is required; a simple rounding operation and dictionary lookup are enough to recover the approximate time of day."
   ]
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
