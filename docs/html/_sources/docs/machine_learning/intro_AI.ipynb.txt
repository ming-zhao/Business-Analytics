{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<script>\n",
       "  var password,\n",
       "      teacher_mode,\n",
       "      isHtml;\n",
       "      \n",
       "  var class_output,\n",
       "      class_input,\n",
       "      class_answer;\n",
       "      \n",
       "  function code_toggle(e) {\n",
       "    var orig_e = e;\n",
       "    while (!e.closest(class_output).previousElementSibling.classList.contains(class_input)) {\n",
       "      e = e.closest(class_output).previousElementSibling;\n",
       "    }\n",
       "    var target = e.closest(class_output).previousElementSibling;\n",
       "    if (target.getAttribute(\"style\") == \"\" || target.getAttribute(\"style\") == null) {\n",
       "      target.style.display = \"none\";\n",
       "      orig_e.innerHTML = 'show code';\n",
       "    }\n",
       "    else {\n",
       "      target.style.removeProperty(\"display\");\n",
       "      orig_e.innerHTML = 'hide code';\n",
       "    }\n",
       "  }\n",
       "  \n",
       "  function hide_answer(e) {\n",
       "    var target = e.closest(class_answer).nextElementSibling;\n",
       "    //e.closest(class_output).previousElementSibling.style.display = \"none\";\n",
       "    if (target.getAttribute(\"style\") == \"\" || target.getAttribute(\"style\") == null) {\n",
       "      target.style.display = \"none\";\n",
       "      e.innerHTML = 'show answer';\n",
       "    }\n",
       "    else if (teacher_mode) {\n",
       "        e.innerHTML = 'hide answer';\n",
       "        target.style.removeProperty(\"display\");\n",
       "    }\n",
       "  }\n",
       "  \n",
       "  function done() { \n",
       "    document.getElementById(\"popup\").style.display = \"none\";\n",
       "    var input = document.getElementById(\"password\").value;\n",
       "    if (input==password) { teacher_mode=1; alert(\"Unlocked!\");}\n",
       "    else { teacher_mode=0; alert(\"Wrong password!\");}       \n",
       "  };\n",
       "\n",
       "  function unlock() {\n",
       "    document.getElementById(\"popup\").style.display = \"block\";\n",
       "  }\n",
       "  \n",
       "  $(document).ready(function() {\n",
       "    $.ajax({\n",
       "      type: \"GET\",  \n",
       "      url: \"https://raw.githubusercontent.com/ming-zhao/ming-zhao.github.io/master/data/course.csv\",\n",
       "      dataType: \"text\",       \n",
       "      success: function(data)  \n",
       "      {\n",
       "        var items = data.split(',');\n",
       "        var url = window.location.pathname;\n",
       "        var filename = url.substring(url.lastIndexOf('/')+1);\n",
       "        password='123';\n",
       "        for (var i = 0, len = items.length; i < len; ++i) {\n",
       "            if (filename.includes(items[i].trim()) && i%2==0 && i<items.length) {\n",
       "                password=items[i+1].trim();\n",
       "                break;\n",
       "            }\n",
       "        }\n",
       "        var code_blocks = document.getElementsByClassName('nbinput docutils container');\n",
       "        if (code_blocks[0]==null) { \n",
       "            isHtml=0;\n",
       "            code_blocks = document.getElementsByClassName('input');\n",
       "            class_output=\".output_wrapper\";\n",
       "            class_input=\"input\";\n",
       "            class_answer='.cell';\n",
       "        }\n",
       "        else { \n",
       "            isHtml=1;\n",
       "            class_output=\".nboutput\";\n",
       "            class_input=\"nbinput\";\n",
       "            class_answer=\".nboutput\";\n",
       "        }\n",
       "        \n",
       "        for (var i = 0, len = code_blocks.length; i < len; ++i) {\n",
       "          if (\n",
       "              code_blocks[i].innerHTML.indexOf(\"toggle\") !== -1 \n",
       "              || code_blocks[i].innerHTML.indexOf(\"button onclick\") !== -1\n",
       "             ) {\n",
       "            code_blocks[i].style.display = \"none\";\n",
       "          }\n",
       "        }\n",
       "        for (var i = 0, len = code_blocks.length; i < len; ++i) {\n",
       "          if (code_blocks[i].innerHTML.indexOf(\"hide_answer\") !== -1) {\n",
       "            code_blocks[i].style.display = \"none\";\n",
       "            if (isHtml) {\n",
       "              code_blocks[i].nextElementSibling.nextElementSibling.style.display = \"none\";\n",
       "            }\n",
       "            else{\n",
       "              code_blocks[i].closest(class_answer).nextElementSibling.style.display = \"none\";\n",
       "            }            \n",
       "          }\n",
       "        }\n",
       "      }\n",
       "    });\n",
       "  });\n",
       "</script>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "<div id=\"popup\" style=\"padding-bottom:5px; display:none;\">\n",
       "    <div>Enter Password:</div>\n",
       "    <input id=\"password\" type=\"password\"/>\n",
       "    <button onclick=\"done()\" style=\"border-radius: 12px;\">Submit</button>    \n",
       "</div>\n",
       "<button onclick=\"unlock()\" style=\"border-radius: 12px;\">Unclock</button>\n",
       "<a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%run ../initscript.py\n",
    "HTML(\"\"\"\n",
    "<div id=\"popup\" style=\"padding-bottom:5px; display:none;\">\n",
    "    <div>Enter Password:</div>\n",
    "    <input id=\"password\" type=\"password\"/>\n",
    "    <button onclick=\"done()\" style=\"border-radius: 12px;\">Submit</button>    \n",
    "</div>\n",
    "<button onclick=\"unlock()\" style=\"border-radius: 12px;\">Unclock</button>\n",
    "<a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# A Short Introduction to AI\n",
    "\n",
    "![def](https://www.stoodnt.com/blog/wp-content/uploads/2018/03/Deep_Learning_Machine_Learning_AI_History_Medium.png)\n",
    "\n",
    "## Symbolic AI\n",
    "\n",
    "Artificial intelligence was proposed by a handful of pioneers from the nascent field of computer science in the 1950s. A concise definition of the field would be as follows: *the effort to automate intellectual tasks normally performed by humans*.\n",
    "\n",
    "For a fairly long time, many experts believed that human-level artificial intelligence could be achieved by having programmers handcraft a sufficiently large set of explicit rules for manipulating knowledge. This approach is known as *symbolic AI* and was the dominant paradigm in AI from the 1950s to the late 1980s.\n",
    "\n",
    "In the 1960s, people believe that \"the problem of creating artificial intelligence will substantially be solved within a generation\". As these high expectations failed to materialize, researchers and government funds turned away from the field, marking the start of the first AI winter."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Expert Systems\n",
    "\n",
    "In the 1980s, a new take on symbolic AI, expert systems, started gathering steam among large companies. A few initial success stories triggered a wave of investment. Around 1985, companies were spending over $1 billion each year on the technology; but by the early 1990s, these systems had proven expensive to maintain, difficult to scale, and limited in scope, and interest died down. Thus began the second AI winter."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Deep Learning: AI Hype?\n",
    "\n",
    "Although some world-changing applications like autonomous cars are already within reach, many more are likely to remain elusive\n",
    "for a long time, such as believable dialogue systems, human-level machine translation across arbitrary languages, and human-level natural-language understanding. In particular, talk of **human-level general intelligence shouldn't be taken too seriously**. The risk with high expectations for the short term is that, as technology fails to deliver, research investment will dry up, slowing progress for a long time.\n",
    "\n",
    "Although we're still in the phase of intense optimism, we may be currently witnessing the third cycle of AI hype and disappointment. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Machine Learning\n",
    "\n",
    "In classical programming, such as symbolic AI, humans input rules (a program) and data to be processed according to these rules, and out come answers:\n",
    "\n",
    "\\begin{equation}\n",
    "\\text{rules $+$ data} \\Rightarrow \\text{classical programming} \\Rightarrow \\text{answers} \\nonumber\n",
    "\\end{equation}\n",
    "\n",
    "For example, an Expert System contains two main components: an inference engine and a knowledge base.\n",
    "\n",
    "- Expert systems require a real human expert to input knowledge (such as all steps s/he took to make the decision, and how to handle exceptions) into the knowledge base, whereas in machine learning, no such \"expert\" is needed.\n",
    "\n",
    "- The inference engine applies logical rules based on facts from the knowledge base. These rules are typically in the form of if-then statements. A flexible system would use the knowledge as an initial guide, and use the expert's guidance to learn, based on feedback from the expert. \n",
    "\n",
    "\n",
    "Machine learning arises from the question that could a computer go beyond \"what we know how to order it to perform\" and learn on its own how to perform a specified task? A machine-learning system is **trained** rather than explicitly programmed. The programming paradigm is quite different\n",
    "\n",
    "\\begin{equation}\n",
    "\\text{data $+$ answers} \\Rightarrow \\text{machine learning} \\Rightarrow \\text{rules} \\nonumber\n",
    "\\end{equation}\n",
    "\n",
    "\n",
    "Machine learning is a type of artificial intelligence. It can be broadly divided into **supervised**, **unsupervised**, **self-supervised** and **reinforcement** learning.\n",
    "\n",
    "- In supervised learning, a computer is given a set of data and an expected result, and asked to find relationships between the data and the result. The computer can then learn how to predict the result when given new data. It's by far the dominant form of deep learning today.\n",
    "\n",
    "- In unsupervised learning, a computer has data to play with but no expected result. It is asked to find relationships between entries in the dataset to discover new patterns.\n",
    "\n",
    "- Self-supervised learning is supervised learning without human-annotated labels such as autoencoders.\n",
    "\n",
    "- In reinforcement learning, an agent receives information about its environment and learns to choose actions that will maximize some reward. Currently, reinforcement learning is mostly a research area and hasn't yet had significant practical successes beyond games.\n",
    "\n",
    "Machine learning started to flourish in the 1990s and has quickly become the most popular and most successful subfield of AI."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Deep Learning\n",
    "\n",
    "Deep learning is a specific subfield of machine learning: a new take on learning information from data that puts an emphasis on learning successive layers of increasingly meaningful representations.\n",
    "\n",
    "**The \"deep\" in deep learning**\n",
    "\n",
    "- it isn't a reference to any kind of deeper understanding achieved by the approach;\n",
    "\n",
    "- it stands for the idea of successive layers of representations.\n",
    "\n",
    "Shallow learning is referring to approaches in machine learning that focus on learning only one or two layers of representations of the data.\n",
    "\n",
    "See the deep representations learned by a 4-layer neural network for digit number 4.\n",
    "\n",
    "![deep_rep](https://dpzbhybb2pdcj.cloudfront.net/chollet/HighResolutionFigures/figure_1-6.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The Promise\n",
    "\n",
    "Although we may have unrealistic short-term expectations for AI, the long-term picture is looking bright. We're only getting started in applying deep learning in real-world applications. Right now, it may seem hard to believe that AI could have a large impact on our world, because it isn't yet widely deployed — much as, back in 1995, it would have been difficult to believe in the future impact of the internet.\n",
    "\n",
    "Don't believe the short-term hype, but do believe in the long-term vision. Deep learning has several properties that justify its status as an AI revolution:\n",
    "\n",
    "- **Simplicity**: Deep learning removes the need for many heavy-duty engineering preprocessing.\n",
    "\n",
    "- **Scalability**: Deep learning is highly amenable to parallelization on GPUs or TPUs. Deep-learning models are trained by iterating over small batches of data, allowing them to be trained on datasets of pretty much arbitrary size.\n",
    "\n",
    "- **Versatility and reusability**: deep-learning models can be trained on additional data without restarting from scratch. Trained deep-learning models are repurposable. For instance, it's possible to take a deep-learning model trained for image classification and drop it into a video processing pipeline.\n",
    "\n",
    "Deep learning has only been in the spotlight for a few years, and we haven't yet established the full scope of what it can do."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Neural Network Structures\n",
    "\n",
    "Tensors are fundamental to the data representations for neural networks — so fundamental that Google's TensorFlow was named after them.\n",
    "\n",
    "![tensor](https://github.com/ming-zhao/Business-Analytics/raw/master/images/tensor.png)\n",
    "\n",
    "- Scalars: 0 dimensional tensors\n",
    "\n",
    "- Vectors: 1 dimensional tensors\n",
    "\n",
    "- Matrix: 2 dimensional tensors\n",
    "\n",
    "Let's make data tensors more concrete with real-world examples:\n",
    "\n",
    "- Vector data — 2D tensors of shape (samples, features)\n",
    "\n",
    "- Timeseries data or sequence data — 3D tensors of shape (samples, timesteps, features)\n",
    "\n",
    "- Images — 4D tensors of shape (samples, height, width, channels) or (samples, channels, height, width)\n",
    "\n",
    "- Video — 5D tensors of shape (samples, frames, height, width, channels) or (samples, frames, channels, height, width)\n",
    "\n",
    "\n",
    "There are mainly three families of network architectures that are **densely connected networks, convolutional networks, and recurrent networks**. A network architecture encodes assumptions about the structure of the data.\n",
    "\n",
    "- A densely connected network is a stack of Dense layers and assume no specific structure in the input features.\n",
    "\n",
    "- Convnets, or convolutional networks (CNNs), consist of stacks of convolution and max-pooling layers. Convolution layers look at spatially local patterns by applying the same geometric transformation to different spatial locations (patches) in an input tensor.\n",
    "\n",
    "- Recurrent neural networks (RNNs) work by processing sequences of inputs one time step at a time and maintaining a state throughout"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Prediction v.s. Decision\n",
    "\n",
    "What is the capital of Delaware?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"hide_answer(this); return false;\">show answer</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hide_answer()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- A machine called Alexa says the correct answer: \"The capital of Delaware is Dover.\"\n",
    "\n",
    "- The new wave of artificial intelligence does not actually bring us intelligence but instead a critical component of intelligence — prediction. \n",
    "\n",
    "- What Alexa was doing when we asked a question was taking the sounds it heard and predicting the words we spoke and then predicting what information the words were looking for. \n",
    "\n",
    "- Alexa doesn't \"know\" the capital of Delaware. But Alexa is able to predict that, when people ask such a question, they are looking for a specific response: Dover."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![anatomy](http://ide.mit.edu/sites/default/files/people-photos/Prediction-MIT-18-04-12_Page_30.jpg)\n",
    "\n",
    "What is the difference between judgment and prediction?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"hide_answer(this); return false;\">show answer</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hide_answer()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- [YouTube](https://www.youtube.com/watch?v=4kuaikerPKs) ![anatomy](https://github.com/ming-zhao/Business-Analytics/raw/master/images/iRobot.png)\n",
    "\n",
    "- In the movie \"I, Robot.\", there's one scene that makes it very clear what this distinction between prediction and judgment is. \n",
    "\n",
    "- Will Smith is the star of the movie and he has a flashback scene where he's in a car accident with a 12-year-old girl. And they're drowning and then a robot arrives, somehow miraculously, and can save one of them. \n",
    "\n",
    "- The robot apparently makes this calculation that Will Smith has a 45% chance of survival and the girl only had an 11% chance. And therefore, the robot saves Will Smith. \n",
    "\n",
    "- Will Smith concludes that the robot made the wrong decision. 11% was more than enough. A human being would have known that. \n",
    "\n",
    "- So that's all well and good and he's assuming that the robot values his life and the girl's life the same. But in order for the robot to make a decision, it needs the prediction on survival and a statement about how much more valuable the girl's life has to be than Will Smith's life in order to choose. \n",
    "\n",
    "- This decision that we've seen, all it says is Will Smith's life is worth at least a quarter of the girl's life. That valuation decision matters, because at some point even Will Smith would disagree with this. At some point, if her chance of survival was 1%, or 0.1%, or 0.01%, that decision would flip. That's judgment. That's knowing what to do with the prediction once you have one. \n",
    "\n",
    "- So judgment is the process of determining what the reward is to a particular action in a particular environment. Decision analysis tools (such as optimization and simulation) can be used for balancing the reward and cost (or risk).\n",
    "\n",
    "- We need to understand the consequences of cheap prediction and its importance in decision-making,\n"
   ]
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
