{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<script>\n",
       "  var password,\n",
       "      teacher_mode,\n",
       "      isHtml;\n",
       "      \n",
       "  var class_output,\n",
       "      class_input,\n",
       "      class_answer;\n",
       "      \n",
       "  function code_toggle(e) {\n",
       "    var orig_e = e;\n",
       "    while (!e.closest(class_output).previousElementSibling.classList.contains(class_input)) {\n",
       "      e = e.closest(class_output).previousElementSibling;\n",
       "    }\n",
       "    var target = e.closest(class_output).previousElementSibling;\n",
       "    if (target.getAttribute(\"style\") == \"\" || target.getAttribute(\"style\") == null) {\n",
       "      target.style.display = \"none\";\n",
       "      orig_e.innerHTML = 'show code';\n",
       "    }\n",
       "    else {\n",
       "      target.style.removeProperty(\"display\");\n",
       "      orig_e.innerHTML = 'hide code';\n",
       "    }\n",
       "  }\n",
       "  \n",
       "  function hide_answer(e) {\n",
       "    var target = e.closest(class_answer).nextElementSibling;\n",
       "    //e.closest(class_output).previousElementSibling.style.display = \"none\";\n",
       "    if (target.getAttribute(\"style\") == \"\" || target.getAttribute(\"style\") == null) {\n",
       "      //target.style.display = \"none\";\n",
       "      e.innerHTML = 'show answer';\n",
       "      answer_block = target;\n",
       "      //if (isHtml) {\n",
       "          while (answer_block.innerHTML.indexOf(\"blacksquare<\") == -1) {\n",
       "              answer_block.style.display = \"none\";\n",
       "              answer_block = answer_block.nextElementSibling;\n",
       "          }\n",
       "      //}\n",
       "      answer_block.style.display = \"none\";\n",
       "    }\n",
       "    else if (teacher_mode) {\n",
       "        e.innerHTML = 'hide answer';\n",
       "        //target.style.removeProperty(\"display\");\n",
       "        answer_block = target;\n",
       "        //if (isHtml) {\n",
       "          while (answer_block.innerHTML.indexOf(\"blacksquare<\") == -1) {\n",
       "              answer_block.style.removeProperty(\"display\");\n",
       "              answer_block = answer_block.nextElementSibling;\n",
       "          }\n",
       "        //}\n",
       "        answer_block.style.removeProperty(\"display\");\n",
       "    }\n",
       "  }\n",
       "  \n",
       "  function done() { \n",
       "    document.getElementById(\"popup\").style.display = \"none\";\n",
       "    var input = document.getElementById(\"password\").value;\n",
       "    if (input==password) { teacher_mode=1; alert(\"Unlocked!\");}\n",
       "    else { teacher_mode=0; alert(\"Wrong password!\");}       \n",
       "  };\n",
       "\n",
       "  function unlock() {\n",
       "    document.getElementById(\"popup\").style.display = \"block\";\n",
       "  }\n",
       "  \n",
       "  $(document).ready(function() {\n",
       "    $.ajax({\n",
       "      type: \"GET\",  \n",
       "      url: \"https://raw.githubusercontent.com/ming-zhao/ming-zhao.github.io/master/data/bzan.csv\",\n",
       "      dataType: \"text\",       \n",
       "      success: function(data)  \n",
       "      {\n",
       "        var items = data.split(',');\n",
       "        var url = window.location.pathname;\n",
       "        var filename = url.substring(url.lastIndexOf('/')+1);\n",
       "        password='123';\n",
       "        for (var i = 0, len = items.length; i < len; ++i) {\n",
       "            if (filename.includes(items[i].trim()) && i%2==0 && i<items.length) {\n",
       "                password=items[i+1].trim();\n",
       "                break;\n",
       "            }\n",
       "        }\n",
       "        var code_blocks = document.getElementsByClassName('nbinput docutils container');\n",
       "        if (code_blocks[0]==null) { \n",
       "            isHtml=0;\n",
       "            code_blocks = document.getElementsByClassName('input');\n",
       "            class_output=\".output_wrapper\";\n",
       "            class_input=\"input\";\n",
       "            class_answer='.cell';\n",
       "        }\n",
       "        else { \n",
       "            isHtml=1;\n",
       "            class_output=\".nboutput\";\n",
       "            class_input=\"nbinput\";\n",
       "            class_answer=\".nboutput\";\n",
       "        }\n",
       "        \n",
       "        for (var i = 0, len = code_blocks.length; i < len; ++i) {\n",
       "          if (\n",
       "              code_blocks[i].innerHTML.indexOf(\"toggle\") !== -1 \n",
       "              || code_blocks[i].innerHTML.indexOf(\"button onclick\") !== -1\n",
       "             ) {\n",
       "            code_blocks[i].style.display = \"none\";\n",
       "          }\n",
       "        }\n",
       "        for (var i = 0, len = code_blocks.length; i < len; ++i) {\n",
       "          if (code_blocks[i].innerHTML.indexOf(\"hide_answer\") !== -1) {\n",
       "            code_blocks[i].style.display = \"none\";\n",
       "            if (isHtml) {\n",
       "              answer_block = code_blocks[i].nextElementSibling.nextElementSibling;\n",
       "              while (answer_block.innerHTML.indexOf(\"blacksquare\") == -1) {\n",
       "                  answer_block.style.display = \"none\";\n",
       "                  answer_block = answer_block.nextElementSibling;\n",
       "              }\n",
       "              answer_block.style.display = \"none\";\n",
       "            }\n",
       "            else{\n",
       "              //code_blocks[i].closest(class_answer).nextElementSibling.style.display = \"none\";\n",
       "              answer_block = code_blocks[i].closest(class_answer).nextElementSibling;\n",
       "              while (answer_block.innerHTML.indexOf(\"blacksquare\") == -1) {\n",
       "                  answer_block.style.display = \"none\";\n",
       "                  answer_block = answer_block.nextElementSibling;\n",
       "              }\n",
       "              answer_block.style.display = \"none\";              \n",
       "            }           \n",
       "          }\n",
       "        }\n",
       "      }\n",
       "    });\n",
       "  });\n",
       "</script>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "<div id=\"popup\" style=\"padding-bottom:5px; display:none;\">\n",
       "    <div>Enter Password:</div>\n",
       "    <input id=\"password\" type=\"password\"/>\n",
       "    <button onclick=\"done()\" style=\"border-radius: 12px;\">Submit</button>    \n",
       "</div>\n",
       "<button onclick=\"unlock()\" style=\"border-radius: 12px;\">Unclock</button>\n",
       "<a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%run initscript.py\n",
    "%run ./files/loadmlfuncs.py\n",
    "HTML(\"\"\"\n",
    "<div id=\"popup\" style=\"padding-bottom:5px; display:none;\">\n",
    "    <div>Enter Password:</div>\n",
    "    <input id=\"password\" type=\"password\"/>\n",
    "    <button onclick=\"done()\" style=\"border-radius: 12px;\">Submit</button>    \n",
    "</div>\n",
    "<button onclick=\"unlock()\" style=\"border-radius: 12px;\">Unclock</button>\n",
    "<a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Machine Learning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic Regression\n",
    "\n",
    "Logistic regression is a popular method for classifying individuals (although we call it regression), given the values of a set of explanatory variables. It estimates the probability that an individual is in a particular category. We will demonstrate the method by considering a book club case."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In a book club, a new title, \"The Art History of Florence\", is ready for release. The book club has sent promotion mails to a sample of customers from its customer base in two different times. Each time it randomly select 1000 customers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>month</th>\n",
       "      <th>art_book</th>\n",
       "      <th>purchased</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>customer</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>24</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>22</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          month  art_book  purchased\n",
       "customer                            \n",
       "1            24         0          0\n",
       "2            16         0          0\n",
       "3            15         0          0\n",
       "4            22         0          0\n",
       "5            15         0          1"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>month</th>\n",
       "      <th>art_book</th>\n",
       "      <th>purchased</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>customer</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1996</th>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1997</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1998</th>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1999</th>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000</th>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          month  art_book  purchased\n",
       "customer                            \n",
       "1996          9         1          1\n",
       "1997          9         0          0\n",
       "1998         28         1          0\n",
       "1999          6         1          0\n",
       "2000         10         0          0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_book_part1 = pd.read_csv(dataurl+'book_train.csv', header=0, index_col='customer')\n",
    "df_book_part2 = pd.read_csv(dataurl+'book_validation.csv', header=0, index_col='customer')\n",
    "display(df_book_part1.head())\n",
    "display(df_book_part2.tail())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The book club has collected several variables for all 2000 customers as follows:\n",
    "\n",
    "- month: months to the customer's last purchase when promotion mail is sent\n",
    "\n",
    "- art_book: number of art books the customer purchased before\n",
    "\n",
    "- purchased: if s/he paid for the new title \"The Art History of Florence\"\n",
    "\n",
    "It costs the book club <span>&#36;</span>1 for sending a mail and generates <span>&#36;</span>7 profit for selling the book. After two promotions, the manager of the book club realizes that the store actually lose money in both promotions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "net profit for the 1st promotion: -419\n",
      "net profit for the 2nd promotion: -433\n"
     ]
    }
   ],
   "source": [
    "def calc_profit(df):\n",
    "    mail_cost = 1\n",
    "    selling_profit = 7\n",
    "    profit = df.purchased.sum() * 7 - df.month.count()*mail_cost\n",
    "    return profit\n",
    "\n",
    "print('net profit for the 1st promotion:', calc_profit(df_book_part1)) \n",
    "print('net profit for the 2nd promotion:', calc_profit(df_book_part2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The manager was wondering if the book club could use a predictive model to predict each customer's probability of purchasing. Then, the store may only send out promotion mails to customers with a high chance of purchasing. In order to prove the concept, the manager starts with two questions:\n",
    "\n",
    "- can we derive a prediction model after collecting the data from the first promotion? \n",
    "\n",
    "</br>\n",
    "\n",
    "- can this prediction model improve the second promotion?\n",
    "\n",
    "We expect that this prediction model can\n",
    "\n",
    "- utilize `month` and `art_book` to predict `purchased`\n",
    "\n",
    "which suggests a regression equation `purchased` $\\sim$ `month` $+$ `art_book`. However, the $y$ variable `purchased` is either 0 or 1, and a scatter plot between `purchased` and `month` ($y$ vs $x$) shows as follows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_book_part1.plot.scatter(x='month', y='purchased')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The graph is against many linear regression assumptions such as\n",
    "\n",
    "- there is no linear relationship between independent and dependent variables.\n",
    "\n",
    "- error term is probably not normally distributed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Instead of using the binary variable (purchased or not), we may consider **purchasing probability** $p$ as dependent variable in a regression equation such as\n",
    "\n",
    "\\begin{align}\n",
    "p &= \\beta_0 + \\beta_1 \\times \\text{month} + \\beta_2 \\times \\text{art_book}\n",
    "\\end{align}\n",
    "\n",
    "\n",
    "Although $p$ is continuous, we still cannot run a linear regression on $p$ because it is bounded in range $[0,1]$. In linear regression, the dependent variable should be able to take any value in range $[-\\infty, +\\infty]$.\n",
    "\n",
    "We introduce **odds** and **utility**\n",
    "\n",
    "\\begin{align}\n",
    "\\text{odds} &= \\frac{p}{1-p} \\nonumber \\\\\n",
    "\\text{utility} &= \\log(\\text{odds}) \\nonumber \\\\\n",
    "\\end{align}\n",
    "\n",
    "Note that **utility** is in $[-\\infty, +\\infty]$. Now a regression equation can be used\n",
    "\n",
    "\\begin{align}\n",
    "\\text{utility} &= \\beta_0 + \\beta_1 \\times \\text{month} + \\beta_2 \\times \\text{art_book}\n",
    "\\end{align}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p = np.linspace(0,1,100)\n",
    "odds = p / (1-p)\n",
    "utility = np.log(odds)\n",
    "\n",
    "plt.subplots(1, 2, figsize=(12,5))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(p, odds)\n",
    "plt.xlabel('$p$')\n",
    "plt.ylabel('odds')\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(p, utility)\n",
    "plt.xlabel('$p$')\n",
    "plt.ylabel('utility')\n",
    "\n",
    "plt.show()\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In practice, we can simply use logistic regression to deal with binary dependent variable. Statistical tools will perform all the transformation for us after we provide the regression equation `purchased` $\\sim$ `month` $+$ `art_book`. In python, we can use either `statmodels` which provides statistical summary or `sklearn` package."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.251466\n",
      "         Iterations 7\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Logit Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>purchased</td>    <th>  No. Observations:  </th>  <td>  1000</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                 <td>Logit</td>      <th>  Df Residuals:      </th>  <td>   997</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                 <td>MLE</td>       <th>  Df Model:          </th>  <td>     2</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>            <td>Wed, 04 Sep 2019</td> <th>  Pseudo R-squ.:     </th>  <td>0.1209</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                <td>20:34:59</td>     <th>  Log-Likelihood:    </th> <td> -251.47</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>converged:</th>             <td>True</td>       <th>  LL-Null:           </th> <td> -286.04</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>     <td>nonrobust</td>    <th>  LLR p-value:       </th> <td>9.698e-16</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>        <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>    <td>   -2.2256</td> <td>    0.239</td> <td>   -9.315</td> <td> 0.000</td> <td>   -2.694</td> <td>   -1.757</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>month</th>    <td>   -0.0707</td> <td>    0.019</td> <td>   -3.677</td> <td> 0.000</td> <td>   -0.108</td> <td>   -0.033</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>art_book</th> <td>    0.9891</td> <td>    0.135</td> <td>    7.345</td> <td> 0.000</td> <td>    0.725</td> <td>    1.253</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                           Logit Regression Results                           \n",
       "==============================================================================\n",
       "Dep. Variable:              purchased   No. Observations:                 1000\n",
       "Model:                          Logit   Df Residuals:                      997\n",
       "Method:                           MLE   Df Model:                            2\n",
       "Date:                Wed, 04 Sep 2019   Pseudo R-squ.:                  0.1209\n",
       "Time:                        20:34:59   Log-Likelihood:                -251.47\n",
       "converged:                       True   LL-Null:                       -286.04\n",
       "Covariance Type:            nonrobust   LLR p-value:                 9.698e-16\n",
       "==============================================================================\n",
       "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "const         -2.2256      0.239     -9.315      0.000      -2.694      -1.757\n",
       "month         -0.0707      0.019     -3.677      0.000      -0.108      -0.033\n",
       "art_book       0.9891      0.135      7.345      0.000       0.725       1.253\n",
       "==============================================================================\n",
       "\"\"\""
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from statsmodels.api import add_constant\n",
    "import statsmodels.api as sm\n",
    "X = add_constant(df_book_part1[['month','art_book']])\n",
    "y = df_book_part1['purchased']\n",
    "model = sm.Logit(y, X)\n",
    "model.fit().summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The signs of the coefficients indicate whether the probability of purchasing the book increases or decreases when these variables increases. For example, the probability of purchasing the book decrease as `month` increase (because of its minus sign) and increase as `art_book` increase (because of its plus sign).\n",
    "\n",
    "However, you have to use caution when interpreting the magnitudes of the coefficients. For example, the absolute value of coefficient of `month` is smaller than `art_book` because `month` generally have larger values than `art_book`.\n",
    "\n",
    "The value $\\exp$(coefficient) is more interpretable. For example, if `art_book` increases 1, the odds of purchasing the book increase by a factor about $\\exp(0.9888)$. So, you should be on the lookout for values well above or below 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "intercept= [-2.22563221] \n",
      "coefficient = [[-0.07071734  0.98904918]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn import linear_model\n",
    "\n",
    "X = df_book_part1[['month','art_book']]\n",
    "y = df_book_part1['purchased']\n",
    "\n",
    "clf = linear_model.LogisticRegression(C=1e5, solver='lbfgs')\n",
    "clf.fit(X, y)\n",
    "print('intercept=', clf.intercept_, '\\ncoefficient =', clf.coef_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The classification matrix is"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "labels = clf.predict(df_book_part1[['month','art_book']])\n",
    "mat = confusion_matrix(df_book_part1['purchased'], labels)\n",
    "sns.heatmap(np.flip(mat), square=True, annot=True, fmt='d', cbar=False,\n",
    "            xticklabels=[1,0], yticklabels=[1,0])\n",
    "plt.xlabel('predicted label')\n",
    "plt.ylabel('true label')\n",
    "plt.ylim(0,mat.shape[0])\n",
    "plt.show()\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After we have obtained $\\beta_0, \\beta_1$ and $\\beta_2$, we can use equation $(2)$ for our validation data to evaluate its utility. Then, the probability can be derived by\n",
    "\n",
    "\\begin{align}\n",
    "p = \\frac{\\exp(\\text{utility})}{1+\\exp(\\text{utility})} \\nonumber\n",
    "\\end{align}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "utility = np.linspace(-10,10,100)\n",
    "p = np.exp(utility) / (1 + np.exp(utility))\n",
    "\n",
    "plt.subplots(1, 1, figsize=(12,5))\n",
    "plt.plot(utility, p)\n",
    "plt.xlabel('utility')\n",
    "plt.ylabel('$p$')\n",
    "plt.show()\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In general, our decision can be made based on a threshold value 0.5. That is, if the probability that a customer may purchase the book is greater than 0.5, we send a mail.\n",
    "\n",
    "However, in the book club case, it has a simple break-even point where the cost-profit ratio is $1/7$. Therefore, our strategy can be designed based on this ratio as follows. If the probability that a customer may purchase the book is greater than $1/7$, we send a mail, otherwise we do not.\n",
    "\n",
    "We prefer to use `sklearn` because it provides capability to predict the probability directly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>month</th>\n",
       "      <th>art_book</th>\n",
       "      <th>purchased</th>\n",
       "      <th>purchase_prob</th>\n",
       "      <th>send</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>customer</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1001</th>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.012778</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1002</th>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.044182</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1003</th>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.029354</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1004</th>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.041251</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1005</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.179542</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          month  art_book  purchased  purchase_prob   send\n",
       "customer                                                  \n",
       "1001         30         0          0       0.012778  False\n",
       "1002         12         0          0       0.044182  False\n",
       "1003         18         0          0       0.029354  False\n",
       "1004         27         1          0       0.041251  False\n",
       "1005          4         1          0       0.179542   True"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_book_part2['purchase_prob'] = clf.predict_proba(df_book_part2[['month','art_book']])[:,1]\n",
    "df_book_part2['send'] = df_book_part2['purchase_prob'] > 1/7\n",
    "df_book_part2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Based on our prediction model, we should send 128 mails.\n",
      "We would expect receiving 38 orders and our profit is $138.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_mail_send = df_book_part2[df_book_part2['send']].shape[0]\n",
    "num_purchased = df_book_part2[df_book_part2['send'] & df_book_part2['purchased'] == 1].shape[0]\n",
    "profit = num_purchased * 7 - num_mail_send\n",
    "print('Based on our prediction model, we should send {} mails.'.format(num_mail_send))\n",
    "print('We would expect receiving {} orders and our profit is ${}.'.format(num_purchased, profit))\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Naive Bayes\n",
    "\n",
    "Naive Bayes models are a group of extremely fast and simple classification algorithms that are often suitable for very high-dimensional datasets. Because they are so fast and have so few tunable parameters, they end up being very useful as a quick-and-dirty baseline for a classification problem. This section will focus on an intuitive explanation of how naive Bayes classifiers work."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Naive Bayes classifiers are built on Bayesian classification methods. These rely on Bayes's theorem, which is an equation describing the relationship of conditional probabilities of statistical quantities. \n",
    "\n",
    "In Bayesian classification, we're interested in finding the probability of a label given some observed features, which we can write as $P(C~|~{\\rm features})$. Bayes's theorem tells us how to express this in terms of quantities we can compute more directly:\n",
    "\n",
    "$$\n",
    "P(C~|~{\\rm features}) = \\frac{P({\\rm features}~|~C)P(C)}{P({\\rm features})}\n",
    "$$\n",
    "\n",
    "If we are trying to decide between two labels — let's call them $C_1$ and $C_2$ — then one way to make this decision is to compute the ratio of the posterior probabilities for each label:\n",
    "\n",
    "$$\n",
    "\\frac{P(C_1~|~{\\rm features})}{P(C_2~|~{\\rm features})} = \\frac{P({\\rm features}~|~C_1)}{P({\\rm features}~|~C_2)}\\frac{P(C_1)}{P(C_2)}\n",
    "$$\n",
    "\n",
    "All we need now is some model by which we can compute $P({\\rm features}~|~C_i)$ for each label. Such a model is called a *generative model* because it specifies the hypothetical random process that generates the data.\n",
    "\n",
    "Specifying this generative model for each label is the main piece of the training of such a Bayesian classifier. The general version of such a training step is a very difficult task, but we can make it simpler through the use of some simplifying assumptions about the form of this model.\n",
    "\n",
    "This is where the \"naive\" in \"naive Bayes\" comes in: if we make very naive assumptions about the generative model for each label, we can find a rough approximation of the generative model for each class, and then proceed with the Bayesian classification."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Bernoulli Naive Bayes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We revisit the book club case with an updated dataset. Now the data includes two categorical dependent variables `gender` and `married` as additional explanatory variables. The dataset is partitioned into training and testing datasets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_book = pd.read_csv(dataurl+'book_club.csv', header=0)\n",
    "df_book_train = df_book.iloc[:1000]\n",
    "df_book_test = df_book.iloc[1000:]\n",
    "df_book.head(8)\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the Naive Bayes method, numeric predictors must be binned, i.e., made categorical. For this example, each numeric variable has been binned by its quartiles as shown below. It is important to note that the quartiles are calculated based on the training dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>month</th>\n",
       "      <th>art_book</th>\n",
       "      <th>quantile</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.00</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.25</th>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.50</th>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.75</th>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.00</th>\n",
       "      <td>35</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      month  art_book  quantile\n",
       "0.00      1         0         0\n",
       "0.25      7         0         1\n",
       "0.50     12         0         2\n",
       "0.75     15         1         3\n",
       "1.00     35         5         4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_quantile = df_book_train[['month', 'art_book']].quantile([0, .25, .5, .75, 1]).astype('int64')\n",
    "df_quantile['quantile'] = range(len(df_quantile))\n",
    "df_book_train = transfer_data(df_book_train, df_quantile)\n",
    "df_book_test = transfer_data(df_book_test, df_quantile)\n",
    "display(df_quantile)\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our goal is to classify customers into different classes (`purchased` is either 0 or 1) based on their features. We count frequency of each feature in each class based on the training data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "95dce5dad7ce430cb5927b40b9ced938",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(Dropdown(description='column:', options=('gender', 'married', 'purchased', 'month', 'art…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def frequency_count(col, normalize):\n",
    "    return df_book_train.groupby('purchased')[col].value_counts(normalize=normalize).sort_index()\n",
    "\n",
    "interact(frequency_count,\n",
    "         col=widgets.Dropdown(options=df_book_train.columns, value='gender', description='column:',disabled=False),\n",
    "         normalize=widgets.Checkbox(value=False, description='normalize',disabled=False)\n",
    "        );\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The normalized frequency provides the probability of a feature given an individual's class. For example, person 1 has `purchased` = 0 and `gender` = \"FEMALE\". We obtain a probability\n",
    "\n",
    "\\begin{align}\n",
    "p(\\text{gender $=$ 'FEMALE'}|\\text{purchased}=0) = \\frac{\\text{# of females and purchased $=$ 0}}{\\text{# of persons with purchased $=$ 0}} = 0.676 \\nonumber\n",
    "\\end{align}\n",
    "\n",
    "The value (0, \"FEMALE\"): 0.676 shows that, if a customer did not purchase the new book, the probability of his/her gender being female is 0.676."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Similarly, we can calculate\n",
    "\n",
    "\\begin{align*}\n",
    "&p(\\text{gender $=$ 'MALE'}|\\text{purchased}=0) \\\\\n",
    "&p(\\text{gender $=$ 'FEMALE'}|\\text{purchased}=1) \\\\\n",
    "&p(\\text{married $=$ 'YES'}|\\text{purchased}=0) \\\\\n",
    "&p(\\text{married $=$ 'No'}|\\text{purchased}=1) \\\\\n",
    "&p(\\text{month $=$ 3}|\\text{purchased}=0) \\\\\n",
    "&p(\\text{art_book $=$ 2}|\\text{purchased}=1) \n",
    "\\end{align*}\n",
    "\n",
    "and so on. In summary, we have $p(\\text{feature}|\\text{purchased}=0)$ and $p(\\text{feature}|\\text{purchased}=1)$ for each possible feature of all customers. All the probabilities can be considered as a feature dictionary.\n",
    "\n",
    "With this feature dictionary, we want to obtain probabilities\n",
    "\n",
    "\\begin{align}\n",
    "p(\\text{customer } i|\\text{purchased}=0) \\text{ and } p(\\text{customer } i|\\text{purchased}=1) \\nonumber\n",
    "\\end{align}\n",
    "\n",
    "where the probability $p(\\text{customer } i|\\text{purchased}=0)$ can be interpret as\n",
    "\n",
    "- if a customer did not purchase the new book, s/he has probability $p(\\text{customer } i|\\text{purchased}=0)$ being customer 1.\n",
    "\n",
    "Then our prediction is as simple as follows\n",
    "\n",
    "- If $p(\\text{customer } i|\\text{purchased}=0) > p(\\text{customer } i|\\text{purchased}=1)$ then we prediction the customer will **not** purchase the new book,\n",
    "\n",
    "</br>\n",
    "\n",
    "- Otherwise, we prediction the customer will purchase the new book."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here is how probabilities\n",
    "\\begin{align}\n",
    "p(\\text{customer 1}|\\text{purchased}=0) \\text{ and } p(\\text{customer 1}|\\text{purchased}=1) \\nonumber\n",
    "\\end{align}\n",
    "\n",
    "are calculated. For customer 1, \n",
    "\n",
    "\\begin{align*}\n",
    "p(\\text{customer 1}|\\text{purchased}=0) = & p(\\text{month}=3|\\text{purchased}=0) \\\\\n",
    "& \\times p(\\text{art_book}=2|\\text{purchased}=0) \\\\\n",
    "& \\times p(\\text{gender $=$ FEMALE}|\\text{purchased}=0) \\\\\n",
    "& \\times p(\\text{married $=$ Yes}|\\text{purchased}=0) \n",
    "\\end{align*}\n",
    "\n",
    "and\n",
    "\n",
    "\\begin{align*}\n",
    "p(\\text{customer 1}|\\text{purchased}=1) = & p(\\text{month}=3|\\text{purchased}=1) \\\\\n",
    "& \\times p(\\text{art_book}=2|\\text{purchased}=1) \\\\\n",
    "& \\times p(\\text{gender $=$ FEMALE}|\\text{purchased}=1) \\\\\n",
    "& \\times p(\\text{married $=$ Yes}|\\text{purchased}=1) \n",
    "\\end{align*}\n",
    "\n",
    "Note that we assume all the features are independent so that a simple multiplication can be applied (that is why this method is called naive). Thus, $p(\\text{customer 1}|\\text{purchased}=0)$ is the probability to have the exactly same features as customer 1 if a random person did not purchase the new book."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender</th>\n",
       "      <th>married</th>\n",
       "      <th>purchased</th>\n",
       "      <th>month</th>\n",
       "      <th>art_book</th>\n",
       "      <th>prediction</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>customer</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1001</th>\n",
       "      <td>MALE</td>\n",
       "      <td>YES</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1002</th>\n",
       "      <td>FEMALE</td>\n",
       "      <td>YES</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1003</th>\n",
       "      <td>FEMALE</td>\n",
       "      <td>YES</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1004</th>\n",
       "      <td>MALE</td>\n",
       "      <td>YES</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1005</th>\n",
       "      <td>MALE</td>\n",
       "      <td>NO</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1006</th>\n",
       "      <td>MALE</td>\n",
       "      <td>YES</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1007</th>\n",
       "      <td>MALE</td>\n",
       "      <td>YES</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1008</th>\n",
       "      <td>MALE</td>\n",
       "      <td>YES</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          gender married  purchased  month  art_book  prediction\n",
       "customer                                                        \n",
       "1001        MALE     YES          0      3         2           0\n",
       "1002      FEMALE     YES          0      2         2           0\n",
       "1003      FEMALE     YES          0      3         2           0\n",
       "1004        MALE     YES          0      3         3           0\n",
       "1005        MALE      NO          0      0         3           1\n",
       "1006        MALE     YES          0      4         2           0\n",
       "1007        MALE     YES          0      0         2           0\n",
       "1008        MALE     YES          0      3         2           0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>purchased</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>prediction</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>701</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>218</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "purchased     0   1\n",
       "prediction         \n",
       "0           701  26\n",
       "1           218  55"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def predict(df):\n",
    "    df['prediction'] = [0 \n",
    "        if np.prod([dict(frequency_count(col, True))[(0,df.iloc[row][col])]\n",
    "                    if (0,df.iloc[row][col]) in dict(frequency_count(col, True)).keys()\n",
    "                    else 0 \n",
    "                    for col in df.columns if col not in ['purchased','prediction']]) > \\\n",
    "           np.prod([dict(frequency_count(col, True))[(1,df.iloc[row][col])] \n",
    "                    if (1,df.iloc[row][col]) in dict(frequency_count(col, True)).keys()\n",
    "                    else 0 \n",
    "                    for col in df.columns if col not in ['purchased','prediction']])\\\n",
    "        else 1\n",
    "                   for row in range(df.shape[0])]\n",
    "\n",
    "predict(df_book_test)\n",
    "display(df_book_test.head(8))\n",
    "display(df_book_test.groupby(['prediction','purchased']).size().unstack(level=1, fill_value=0))\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The predictive model suggests sending 273 = (218 + 55) mails. We would expect receiving 55 orders and our profit is <span>&#36;</span>112."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Multinomial Naive Bayes\n",
    "\n",
    "In multinomial naive Bayes, the features are assumed to be generated from a simple multinomial distribution. \n",
    "\n",
    "The multinomial distribution describes the probability of observing counts among a number of categories, and thus multinomial naive Bayes is most appropriate for features that represent counts or count rates.\n",
    "\n",
    "The idea is precisely the same as before, except that instead of modeling the data distribution with the best-fit Gaussian, we model the data distribution with a best-fit multinomial distribution."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One place where multinomial naive Bayes is often used is in text classification, where the features are related to word counts or frequencies within the documents to be classified.\n",
    "\n",
    "Here we will use the sparse word count features from the 20 Newsgroups corpus to show how we might classify these short documents into categories."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['alt.atheism',\n",
       " 'comp.graphics',\n",
       " 'comp.os.ms-windows.misc',\n",
       " 'comp.sys.ibm.pc.hardware',\n",
       " 'comp.sys.mac.hardware',\n",
       " 'comp.windows.x',\n",
       " 'misc.forsale',\n",
       " 'rec.autos',\n",
       " 'rec.motorcycles',\n",
       " 'rec.sport.baseball',\n",
       " 'rec.sport.hockey',\n",
       " 'sci.crypt',\n",
       " 'sci.electronics',\n",
       " 'sci.med',\n",
       " 'sci.space',\n",
       " 'soc.religion.christian',\n",
       " 'talk.politics.guns',\n",
       " 'talk.politics.mideast',\n",
       " 'talk.politics.misc',\n",
       " 'talk.religion.misc']"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.datasets import fetch_20newsgroups\n",
    "\n",
    "data = fetch_20newsgroups()\n",
    "display(data.target_names)\n",
    "\n",
    "# choose a subset categories to learn\n",
    "categories = ['talk.religion.misc', \n",
    "              'soc.religion.christian',\n",
    "              'sci.space',\n",
    "              'comp.graphics']\n",
    "\n",
    "train = fetch_20newsgroups(subset='train', categories=categories)\n",
    "test = fetch_20newsgroups(subset='test', categories=categories)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here is a representative entry from the data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "From: dmcgee@uluhe.soest.hawaii.edu (Don McGee)\n",
      "Subject: Federal Hearing\n",
      "Originator: dmcgee@uluhe\n",
      "Organization: School of Ocean and Earth Science and Technology\n",
      "Distribution: usa\n",
      "Lines: 10\n",
      "\n",
      "\n",
      "Fact or rumor....?  Madalyn Murray O'Hare an atheist who eliminated the\n",
      "use of the bible reading and prayer in public schools 15 years ago is now\n",
      "going to appear before the FCC with a petition to stop the reading of the\n",
      "Gospel on the airways of America.  And she is also campaigning to remove\n",
      "Christmas programs, songs, etc from the public schools.  If it is true\n",
      "then mail to Federal Communications Commission 1919 H Street Washington DC\n",
      "20054 expressing your opposition to her request.  Reference Petition number\n",
      "\n",
      "2493.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(train.data[5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "# Fit the model and show the classification matrix\n",
    "#convert the content of each string into a vector of numbers\n",
    "model = make_pipeline(TfidfVectorizer(), MultinomialNB()) \n",
    "model.fit(train.data, train.target)\n",
    "labels = model.predict(test.data)\n",
    "mat = confusion_matrix(test.target, labels)\n",
    "sns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False,\n",
    "            xticklabels=train.target_names, yticklabels=train.target_names)\n",
    "plt.xlabel('true label')\n",
    "plt.ylabel('predicted label')\n",
    "plt.ylim(0, mat.shape[0])\n",
    "plt.show()\n",
    "\n",
    "def predict_category(s, train=train, model=model):\n",
    "    pred = model.predict([s])\n",
    "    return train.target_names[pred[0]]\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Evidently, even this very simple classifier can successfully separate space talk from computer talk, but it gets confused between talk about religion and talk about Christianity. This is perhaps an expected area of confusion!\n",
    "\n",
    "The very cool thing here is that we now have the tools to determine the category for any string, using the predict() method of this pipeline. Here's a quick utility function that will return the prediction for a single string:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'soc.religion.christian'"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict_category('discussing islam vs atheism')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'comp.graphics'"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict_category('determining the screen resolution')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'sci.space'"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict_category('sending a payload to the ISS')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### When to Use Naive Bayes\n",
    "\n",
    "Because naive Bayesian classifiers make such stringent assumptions about data, they will generally not perform as well as a more complicated model. That said, they have several advantages:\n",
    "\n",
    "- They are extremely fast for both training and prediction\n",
    "\n",
    "- They provide straightforward probabilistic prediction\n",
    "\n",
    "- They are often very easily interpretable\n",
    "\n",
    "- They have very few (if any) tunable parameters\n",
    "\n",
    "These advantages mean a naive Bayesian classifier is often a good choice as an initial baseline classification."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Clustering"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Clustering, known in marketing circles as segmentation, tries to group entities into similar groups, based on their features. Different from the supervised data mining techniques, unsupervised methods has no dependent variable. Clustering is the most common unsupervised method.\n",
    "\n",
    "In today's competitive world, it is crucial to understand customer behavior and categorize customers based on their features, such as demography and buying behavior. Customer segmentation allows marketers to better tailor their marketing efforts to various audience subsets in terms of promotional, marketing and product development strategies."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The dataset consists of 3000 transactions made by 250 customers. Each transaction is for a dollar amount spent on one of five categories of shoes: athletic, dress, work, casual, or sandal.\n",
    "\n",
    "The goal is to find clusters of customers who have similar buying behavior."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>transaction</th>\n",
       "      <th>custID</th>\n",
       "      <th>type</th>\n",
       "      <th>spent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>210</td>\n",
       "      <td>Sandal</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>Work</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>220</td>\n",
       "      <td>Dress</td>\n",
       "      <td>134</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>93</td>\n",
       "      <td>Athletic</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>66</td>\n",
       "      <td>Athletic</td>\n",
       "      <td>168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>232</td>\n",
       "      <td>Dress</td>\n",
       "      <td>125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>132</td>\n",
       "      <td>Work</td>\n",
       "      <td>72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>82</td>\n",
       "      <td>Casual</td>\n",
       "      <td>102</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   transaction  custID      type  spent\n",
       "0            1     210    Sandal     29\n",
       "1            2       7      Work     74\n",
       "2            3     220     Dress    134\n",
       "3            4      93  Athletic    150\n",
       "4            5      66  Athletic    168\n",
       "5            6     232     Dress    125\n",
       "6            7     132      Work     72\n",
       "7            8      82    Casual    102"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_shoe = pd.read_csv(dataurl+'shoe.csv', header=0)\n",
    "df_shoe.head(8)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we want to cluster customers instead of transactions, we transforming the data set such that each row is a customer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>type</th>\n",
       "      <th>Athletic</th>\n",
       "      <th>Casual</th>\n",
       "      <th>Dress</th>\n",
       "      <th>Sandal</th>\n",
       "      <th>Work</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>custID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "type    Athletic  Casual  Dress  Sandal  Work\n",
       "custID                                       \n",
       "1             10       2      2       1     1\n",
       "2              0       7      1       3     1\n",
       "3              0       1      9       0     0\n",
       "4              9       5      0       0     0\n",
       "5              9       2      0       1     2"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pivot = df_shoe.pivot_table(values='transaction', index='custID', columns = ['type'], \n",
    "                               margins=False, fill_value=0, aggfunc='count')\n",
    "data = df_pivot.to_numpy()\n",
    "df_pivot.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "K-means clustering aims to partition n observations into k clusters in which each observation belongs to the cluster with the nearest mean, serving as a prototype of the cluster.\n",
    "\n",
    "<img src='https://2.bp.blogspot.com/-wspg_wO3q84/WWRTqIARMgI/AAAAAAAAB30/HNFjncz_U1kXawU_5yM2dBhhEfxlQ6EcwCLcBGAs/s1600/Capture.PNG' width='500'>\n",
    "\n",
    "The mathematics behind clustering is\n",
    "\n",
    "\\begin{align*}\n",
    "\\min \\sum_{i \\in \\text{Data}} \\left( \\min_{k \\in \\text{Clusters}} \\text{dist} (x_i - c_k) \\right)\n",
    "\\end{align*}\n",
    "\n",
    "and involves finding $K$ centroids such that the sum of minimal distances is minimized.\n",
    "\n",
    "For each data point, we identify a closest centroid by evaluating \n",
    "\n",
    "\\begin{align*}\n",
    "\\min_{k \\in \\text{Clusters}} \\text{dist} (x_i - c_k).\n",
    "\\end{align*}\n",
    "\n",
    "The distance is called dissimilarity measure."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>clusterID</th>\n",
       "      <th>Athletic</th>\n",
       "      <th>Casual</th>\n",
       "      <th>Dress</th>\n",
       "      <th>Sandal</th>\n",
       "      <th>Work</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.461538</td>\n",
       "      <td>3.153846</td>\n",
       "      <td>1.046154</td>\n",
       "      <td>0.615385</td>\n",
       "      <td>6.446154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0.657534</td>\n",
       "      <td>2.575342</td>\n",
       "      <td>6.520548</td>\n",
       "      <td>2.301370</td>\n",
       "      <td>0.630137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>7.510204</td>\n",
       "      <td>2.551020</td>\n",
       "      <td>0.877551</td>\n",
       "      <td>0.673469</td>\n",
       "      <td>0.612245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0.650794</td>\n",
       "      <td>4.984127</td>\n",
       "      <td>1.190476</td>\n",
       "      <td>3.714286</td>\n",
       "      <td>0.777778</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   clusterID  Athletic    Casual     Dress    Sandal      Work\n",
       "0          1  0.461538  3.153846  1.046154  0.615385  6.446154\n",
       "1          2  0.657534  2.575342  6.520548  2.301370  0.630137\n",
       "2          3  7.510204  2.551020  0.877551  0.673469  0.612245\n",
       "3          4  0.650794  4.984127  1.190476  3.714286  0.777778"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>type</th>\n",
       "      <th>Athletic</th>\n",
       "      <th>Casual</th>\n",
       "      <th>Dress</th>\n",
       "      <th>Sandal</th>\n",
       "      <th>Work</th>\n",
       "      <th>cluster</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>custID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "type    Athletic  Casual  Dress  Sandal  Work  cluster\n",
       "custID                                                \n",
       "1             10       2      2       1     1        3\n",
       "2              0       7      1       3     1        4\n",
       "3              0       1      9       0     0        2\n",
       "4              9       5      0       0     0        3\n",
       "5              9       2      0       1     2        3\n",
       "6              3       2      8       6     0        2\n",
       "7              1       1      1       1     8        1\n",
       "8              0       3      1       4     2        4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "kmeans = KMeans(n_clusters=4, random_state=0).fit(data)\n",
    "df_centers = pd.DataFrame(kmeans.cluster_centers_, columns=['Athletic','Casual','Dress','Sandal','Work'])\n",
    "df_centers.insert(loc=0, column='clusterID', value=df_centers.index+1)\n",
    "display(df_centers)\n",
    "df_pivot['cluster'] = kmeans.predict(data) + 1\n",
    "display(df_pivot.head(8))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To make sense of the clusters, we build a stacked bar to show the percentage of transactions for a given shoe type made by customers in a given cluster."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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61//euqbb74Zv3fv3lD//v1PLl26dIskHTx4MHbv3r2xb7zxRs9t27YVxcTE6MCBA61yvoyZHgAA0GINl7MaM2ZMeb9+/aolafHixRe/++67F4fD4XB2dnZ469atXUtKSrpefvnlle+9997Ft912W9LixYvje/XqVZ2YmFjdpUuXmilTplyyYMGCHvHx8TWtUSuhBwAAtEhxcXHn2NhYJSUlVUlSXFzcqbDi7vrxj3+8u6SkpLikpKR4x44dRXfeeeeBYcOGHV+zZk3x0KFDK2fPnp00a9asAZ06ddJHH3204dprr/30lVde6TFu3Li01qiX01sAWtX1917Yv2YK27sAoJ2UlZWFfvCDH1xyyy237IuJ+eIcysSJE8vvv//+L02fPv1Q9+7daz7++ONOnTt39pMnT1rfvn2rZs6ceSghIaFmwYIFvY4cORJTUVERM3ny5CPjxo2rSE9PH9oaNV/Yv40AAEDUHD9+PCYzMzNcf8v65MmTD/785z/f21Tfa665pnz9+vVdr7jiikypdhbo2Wef/bikpKTLvffemxwTE6NQKOTz5s375NNPP43Nz89PPX78uEnSP//zP+9sjfoJPQAAdECR3GIebdXV1ad9zzvuuOOgpIMN2+bMmbNvzpw5+xq2ZWdnH7/22muLGx9fWFjY6guhcU0PAAAIBEIPAAAIBEIPAAAIBEIPAAAIBEIPAAAIBEIPAAAIBEIPAACIyN13390/NTU1Oz09PZyZmRl+6623LjrXMUeMGJHx7rvvxp1rn0jwnB4AADqgDZlZudEcL6tkwxmf+/PXv/71oiVLlvQoLCws7tatm+/evTtU/zDBjoKZHgAA0KzS0tJOiYmJVd26dXNJGjBgQFVKSsrJWbNmDRgyZEhWWlpa9tSpUy+pqaldfmvEiBEZt912W9LQoUOzUlJShixevDhekioqKiw/P//L6enp4W9961tfPnbs2KngdOONNw4aMmRIVmpqavadd975pWh/BkIPAABo1ne+853ysrKyzikpKUOmTZs26PXXX4+XpLvuumtfUVHRhs2bN6+vrKyMee6557rXH1NVVWWFhYUbHnrooZ0PPvjglyTp17/+dd9u3brVbNq0qfi+++7bXVxcfOoU2b/+67+WFhUVbSgpKVn//vvvJ3zwwQfdovkZCD0AAKBZ3bt3rykqKip+5JFHPunTp0/V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\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_result = df_shoe.merge(df_pivot['cluster'], on='custID').sort_values('transaction')\n",
    "df_result.pivot_table(values='transaction', index='cluster', columns = ['type'],\n",
    "                      margins=False, fill_value=0, aggfunc='count')\\\n",
    "            .apply(lambda x: x/x.sum(), axis=1)\\\n",
    "            .plot.bar(stacked=True, figsize=(8,5))\n",
    "plt.legend(bbox_to_anchor=(1.2, 1), borderaxespad=0)\n",
    "plt.show()\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The meaning of the clusters is quite apparent. For example, people in cluster 1 tend to buy mostly work shoes, people in cluster 2 tend to buy mostly dress shoes, people in cluster 3 tend to buy mostly athletic shoes, and people in cluster 4 tend to buy mostly sandal or casual shoes."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A First Look on Deep Learning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There is a set of 60,000 training images, plus 10,000 test images, assembled by the National Institute of Standards and\n",
    "Technology (NIST). Each image is a gray scale 28 $\\times$ 28 pixels handwritten digits. we're trying to classify images into their 10 categories (0 through 9)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training images:(60000, 28, 28), test images:(10000, 28, 28)\n"
     ]
    }
   ],
   "source": [
    "from keras.datasets import mnist\n",
    "(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\n",
    "print('training images:{}, test images:{}'.format(train_images.shape, test_images.shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b6cd56238cac4b11b377b6c1f993d370",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(RadioButtons(description='Data:', options=('train', 'test'), value='train'), IntText(val…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def showimg(data, idx):\n",
    "    span = 5\n",
    "    if data=='train':\n",
    "        if idx+span<train_images.shape[0]:\n",
    "            images = train_images\n",
    "            labels = train_labels\n",
    "        else:\n",
    "            print('Index is out of range.')\n",
    "    if data=='test':\n",
    "        if idx+span<test_images.shape[0]:\n",
    "            images = test_images\n",
    "            labels = test_labels\n",
    "        else:\n",
    "            print('Index is out of range.')\n",
    "    plt.figure(figsize=(20,4))\n",
    "    for i in range(span):\n",
    "        plt.subplot(1, 5, i + 1)\n",
    "        digit = images[idx+i]            \n",
    "        plt.imshow(digit, cmap=plt.cm.binary)\n",
    "        plt.title('Index:{}, Label:{}'.format(idx+i, labels[idx+i]), fontsize = 15)\n",
    "    plt.show()\n",
    "\n",
    "interact(showimg,\n",
    "    data = widgets.RadioButtons(options=['train', 'test'],\n",
    "                                value='train', description='Data:', disabled=False),\n",
    "    idx = widgets.IntText(value=7, description='Index:', disabled=False));\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Network Architecture\n",
    "\n",
    "The core building block of neural networks is the *layer*, a data-processing module working as a filter for data. Specifically, layers extract representations out of the data fed into them in a more useful form which is often called features.\n",
    "\n",
    "Most of deep learning consists of chaining together simple layers that will implement a form of progressive data distillation. A deep-learning model is like a sieve for data processing, made of a succession of increasingly refined data filters the layers.\n",
    "\n",
    "```python\n",
    "network = models.Sequential()\n",
    "network.add(layers.Dense(512, activation='relu', input_shape=(28 * 28,)))\n",
    "network.add(layers.Dense(10, activation='softmax'))\n",
    "```\n",
    "\n",
    "Here, our network consists of a sequence of two densely connected (fully connected) layers. The second (and last) layer is a\n",
    "10-way softmax layer, which means it will return an array of 10 probability scores (summing to 1). Each score will be the probability that the current digit image belongs to one of our 10 digit classes."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Compilation\n",
    "\n",
    "Before training the network, we need to perform a compilation step by setting up:\n",
    "\n",
    "- An optimizer: the mechanism to improve its performance on the training data\n",
    "\n",
    "- A loss function: the measurement of its performance on the training data\n",
    "\n",
    "- Metrics to monitor during training and testing\n",
    "\n",
    "```python\n",
    "network.compile(optimizer='rmsprop',\n",
    "                loss='categorical_crossentropy',\n",
    "                metrics=['accuracy'])\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Preparation\n",
    "\n",
    "```python\n",
    "train_images_reshape = train_images.reshape((60000, 28 * 28))\n",
    "train_images_reshape = train_images_reshape.astype('float32') / 255\n",
    "\n",
    "test_images_reshape = test_images.reshape((10000, 28 * 28))\n",
    "test_images_reshape = test_images_reshape.astype('float32') / 255\n",
    "\n",
    "train_labels_cat = to_categorical(train_labels)\n",
    "test_labels_cat = to_categorical(test_labels)\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fitting\n",
    "\n",
    "We train the neural network so that it can classify images in test image set.\n",
    "\n",
    "```python\n",
    "network.fit(train_images_reshape, train_labels_cat, epochs=5, batch_size=128)\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n",
      "60000/60000 [==============================] - 5s 77us/step - loss: 0.2571 - acc: 0.9263\n",
      "Epoch 2/5\n",
      "60000/60000 [==============================] - 4s 62us/step - loss: 0.1039 - acc: 0.9693\n",
      "Epoch 3/5\n",
      "60000/60000 [==============================] - 3s 58us/step - loss: 0.0673 - acc: 0.9802\n",
      "Epoch 4/5\n",
      "60000/60000 [==============================] - 4s 60us/step - loss: 0.0489 - acc: 0.9850\n",
      "Epoch 5/5\n",
      "60000/60000 [==============================] - 4s 63us/step - loss: 0.0368 - acc: 0.9895\n",
      "10000/10000 [==============================] - 0s 47us/step\n",
      "test accuracy: 0.9792\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from keras import models\n",
    "from keras import layers\n",
    "from keras.utils import to_categorical\n",
    "\n",
    "network = models.Sequential()\n",
    "network.add(layers.Dense(512, activation='relu', input_shape=(28 * 28,)))\n",
    "network.add(layers.Dense(10, activation='softmax'))\n",
    "\n",
    "network.compile(optimizer='rmsprop',\n",
    "                loss='categorical_crossentropy',\n",
    "                metrics=['accuracy'])\n",
    "\n",
    "train_images_reshape = train_images.reshape((60000, 28 * 28))\n",
    "train_images_reshape = train_images_reshape.astype('float32') / 255\n",
    "\n",
    "test_images_reshape = test_images.reshape((10000, 28 * 28))\n",
    "test_images_reshape = test_images_reshape.astype('float32') / 255\n",
    "\n",
    "train_labels_cat = to_categorical(train_labels)\n",
    "test_labels_cat = to_categorical(test_labels)\n",
    "\n",
    "network.fit(train_images_reshape, train_labels_cat, epochs=5, batch_size=128)\n",
    "\n",
    "test_loss, test_acc = network.evaluate(test_images_reshape, test_labels_cat)\n",
    "print('test accuracy:', test_acc)\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We reach an accuracy of 98.9% on the training data. However, the test-set accuracy turns out to be 97.8% — that's quite a bit lower than the training set accuracy as our errors are doubled. This gap between training accuracy and test accuracy is an example of **overfitting**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Prediction Error\n",
    "\n",
    "We demonstrate a few images that are misclassified by the trained neural network."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# of misclassified images: 208\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x288 with 5 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predicted = network.predict_classes(test_images_reshape)    \n",
    "result = abs(predicted - test_labels)\n",
    "misclassified = np.where(result>0)[0]\n",
    "print('# of misclassified images:',misclassified.shape[0])\n",
    "\n",
    "plt.figure(figsize=(20,4))\n",
    "for i in range(5):\n",
    "    plt.subplot(1, 5, i + 1)\n",
    "    idx = misclassified[i]\n",
    "    digit = test_images[idx]            \n",
    "    plt.imshow(digit, cmap=plt.cm.binary)\n",
    "    plt.title('Predicted:{}, Label:{}'.format(predicted[idx], test_labels[idx]), fontsize = 15)\n",
    "plt.show()\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A Short Introduction to AI"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![def](https://www.stoodnt.com/blog/wp-content/uploads/2018/03/Deep_Learning_Machine_Learning_AI_History_Medium.png)\n",
    "\n",
    "### Symbolic AI\n",
    "\n",
    "Artificial intelligence was proposed by a handful of pioneers from the nascent field of computer science in the 1950s. A concise definition of the field would be as follows: *the effort to automate intellectual tasks normally performed by humans*.\n",
    "\n",
    "For a fairly long time, many experts believed that human-level artificial intelligence could be achieved by having programmers handcraft a sufficiently large set of explicit rules for manipulating knowledge. This approach is known as *symbolic AI* and was the dominant paradigm in AI from the 1950s to the late 1980s.\n",
    "\n",
    "In the 1960s, people believe that \"the problem of creating artificial intelligence will substantially be solved within a generation\". As these high expectations failed to materialize, researchers and government funds turned away from the field, marking the start of the first AI winter."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Expert Systems\n",
    "\n",
    "In the 1980s, a new take on symbolic AI, expert systems, started gathering steam among large companies. A few initial success stories triggered a wave of investment. Around 1985, companies were spending over $1 billion each year on the technology; but by the early 1990s, these systems had proven expensive to maintain, difficult to scale, and limited in scope, and interest died down. Thus began the second AI winter."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Deep Learning: AI Hype?\n",
    "\n",
    "Although some world-changing applications like autonomous cars are already within reach, many more are likely to remain elusive\n",
    "for a long time, such as believable dialogue systems, human-level machine translation across arbitrary languages, and human-level natural-language understanding. In particular, talk of **human-level general intelligence shouldn't be taken too seriously**. The risk with high expectations for the short term is that, as technology fails to deliver, research investment will dry up, slowing progress for a long time.\n",
    "\n",
    "Although we're still in the phase of intense optimism, we may be currently witnessing the third cycle of AI hype and disappointment. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Machine Learning\n",
    "\n",
    "In classical programming, such as symbolic AI, humans input rules (a program) and data to be processed according to these rules, and out come answers:\n",
    "\n",
    "\\begin{equation}\n",
    "\\text{rules $+$ data} \\Rightarrow \\text{classical programming} \\Rightarrow \\text{answers} \\nonumber\n",
    "\\end{equation}\n",
    "\n",
    "For example, an Expert System contains two main components: an inference engine and a knowledge base.\n",
    "\n",
    "- Expert systems require a real human expert to input knowledge (such as all steps s/he took to make the decision, and how to handle exceptions) into the knowledge base, whereas in machine learning, no such \"expert\" is needed.\n",
    "\n",
    "- The inference engine applies logical rules based on facts from the knowledge base. These rules are typically in the form of if-then statements. A flexible system would use the knowledge as an initial guide, and use the expert's guidance to learn, based on feedback from the expert. \n",
    "\n",
    "\n",
    "Machine learning arises from the question that could a computer go beyond \"what we know how to order it to perform\" and learn on its own how to perform a specified task? A machine-learning system is **trained** rather than explicitly programmed. The programming paradigm is quite different\n",
    "\n",
    "\\begin{equation}\n",
    "\\text{data $+$ answers} \\Rightarrow \\text{machine learning} \\Rightarrow \\text{rules} \\nonumber\n",
    "\\end{equation}\n",
    "\n",
    "\n",
    "Machine learning is a type of artificial intelligence. It can be broadly divided into **supervised**, **unsupervised**, **self-supervised** and **reinforcement** learning.\n",
    "\n",
    "- In supervised learning, a computer is given a set of data and an expected result, and asked to find relationships between the data and the result. The computer can then learn how to predict the result when given new data. It's by far the dominant form of deep learning today.\n",
    "\n",
    "- In unsupervised learning, a computer has data to play with but no expected result. It is asked to find relationships between entries in the dataset to discover new patterns.\n",
    "\n",
    "- Self-supervised learning is supervised learning without human-annotated labels such as autoencoders.\n",
    "\n",
    "- In reinforcement learning, an agent receives information about its environment and learns to choose actions that will maximize some reward. Currently, reinforcement learning is mostly a research area and hasn't yet had significant practical successes beyond games.\n",
    "\n",
    "Machine learning started to flourish in the 1990s and has quickly become the most popular and most successful subfield of AI."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Deep Learning\n",
    "\n",
    "Deep learning is a specific subfield of machine learning: a new take on learning information from data that puts an emphasis on learning successive layers of increasingly meaningful representations.\n",
    "\n",
    "**The \"deep\" in deep learning**\n",
    "\n",
    "- it isn't a reference to any kind of deeper understanding achieved by the approach;\n",
    "\n",
    "- it stands for the idea of successive layers of representations.\n",
    "\n",
    "Shallow learning is referring to approaches in machine learning that focus on learning only one or two layers of representations of the data.\n",
    "\n",
    "See the deep representations learned by a 4-layer neural network for digit number 4.\n",
    "\n",
    "![deep_rep](https://dpzbhybb2pdcj.cloudfront.net/chollet/HighResolutionFigures/figure_1-6.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The Promise\n",
    "\n",
    "Although we may have unrealistic short-term expectations for AI, the long-term picture is looking bright. We're only getting started in applying deep learning in real-world applications. Right now, it may seem hard to believe that AI could have a large impact on our world, because it isn't yet widely deployed — much as, back in 1995, it would have been difficult to believe in the future impact of the internet.\n",
    "\n",
    "Don't believe the short-term hype, but do believe in the long-term vision. Deep learning has several properties that justify its status as an AI revolution:\n",
    "\n",
    "- **Simplicity**: Deep learning removes the need for many heavy-duty engineering preprocessing.\n",
    "\n",
    "- **Scalability**: Deep learning is highly amenable to parallelization on GPUs or TPUs. Deep-learning models are trained by iterating over small batches of data, allowing them to be trained on datasets of pretty much arbitrary size.\n",
    "\n",
    "- **Versatility and reusability**: deep-learning models can be trained on additional data without restarting from scratch. Trained deep-learning models are repurposable. For instance, it's possible to take a deep-learning model trained for image classification and drop it into a video processing pipeline.\n",
    "\n",
    "Deep learning has only been in the spotlight for a few years, and we haven't yet established the full scope of what it can do."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Neural Network Structures\n",
    "\n",
    "Tensors are fundamental to the data representations for neural networks — so fundamental that Google's TensorFlow was named after them.\n",
    "\n",
    "![tensor](https://github.com/ming-zhao/Business-Analytics/raw/master/images/tensor.png)\n",
    "\n",
    "- Scalars: 0 dimensional tensors\n",
    "\n",
    "- Vectors: 1 dimensional tensors\n",
    "\n",
    "- Matrix: 2 dimensional tensors\n",
    "\n",
    "Let's make data tensors more concrete with real-world examples:\n",
    "\n",
    "- Vector data — 2D tensors of shape (samples, features)\n",
    "\n",
    "- Timeseries data or sequence data — 3D tensors of shape (samples, timesteps, features)\n",
    "\n",
    "- Images — 4D tensors of shape (samples, height, width, channels) or (samples, channels, height, width)\n",
    "\n",
    "- Video — 5D tensors of shape (samples, frames, height, width, channels) or (samples, frames, channels, height, width)\n",
    "\n",
    "\n",
    "There are mainly three families of network architectures that are **densely connected networks, convolutional networks, and recurrent networks**. A network architecture encodes assumptions about the structure of the data.\n",
    "\n",
    "- A densely connected network is a stack of Dense layers and assume no specific structure in the input features.\n",
    "\n",
    "- Convnets, or convolutional networks (CNNs), consist of stacks of convolution and max-pooling layers. Convolution layers look at spatially local patterns by applying the same geometric transformation to different spatial locations (patches) in an input tensor.\n",
    "\n",
    "- Recurrent neural networks (RNNs) work by processing sequences of inputs one time step at a time and maintaining a state throughout"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Prediction v.s. Decision\n",
    "\n",
    "What is the capital of Delaware?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"hide_answer(this); return false;\">show answer</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hide_answer()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A machine called Alexa says the correct answer: \"The capital of Delaware is Dover.\"\n",
    "\n",
    "The new wave of artificial intelligence does not actually bring us intelligence but instead a critical component of intelligence — prediction. \n",
    "\n",
    "What Alexa was doing when we asked a question was taking the sounds it heard and predicting the words we spoke and then predicting what information the words were looking for. \n",
    "\n",
    "Alexa doesn't \"know\" the capital of Delaware. But Alexa is able to predict that, when people ask such a question, they are looking for a specific response: Dover.\n",
    "\n",
    "<span style=\"float:right\"> $\\blacksquare$ </span>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![anatomy](http://ide.mit.edu/sites/default/files/people-photos/Prediction-MIT-18-04-12_Page_30.jpg)\n",
    "\n",
    "What is the difference between judgment and prediction?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"hide_answer(this); return false;\">show answer</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hide_answer()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[YouTube](https://www.youtube.com/watch?v=4kuaikerPKs)![irobot](https://github.com/ming-zhao/Business-Analytics/raw/master/images/iRobot.png)\n",
    "\n",
    "In the movie \"I, Robot.\", there's one scene that makes it very clear what this distinction between prediction and judgment is. \n",
    "\n",
    "Will Smith is the star of the movie and he has a flashback scene where he's in a car accident with a 12-year-old girl. And they're drowning and then a robot arrives, somehow miraculously, and can save one of them. \n",
    "\n",
    "The robot apparently makes this calculation that Will Smith has a 45% chance of survival and the girl only had an 11% chance. And therefore, the robot saves Will Smith. \n",
    "\n",
    "Will Smith concludes that the robot made the wrong decision. 11% was more than enough. A human being would have known that. \n",
    "\n",
    "So that's all well and good and he's assuming that the robot values his life and the girl's life the same. But in order for the robot to make a decision, it needs the prediction on survival and a statement about how much more valuable the girl's life has to be than Will Smith's life in order to choose. \n",
    "\n",
    "This decision that we've seen, all it says is Will Smith's life is worth at least a quarter of the girl's life. That valuation decision matters, because at some point even Will Smith would disagree with this. At some point, if her chance of survival was 1%, or 0.1%, or 0.01%, that decision would flip. That's judgment. That's knowing what to do with the prediction once you have one. \n",
    "\n",
    "So judgment is the process of determining what the reward is to a particular action in a particular environment. Decision analysis tools (such as optimization and simulation) can be used for balancing the reward and cost (or risk).\n",
    "\n",
    "We need to understand the consequences of cheap prediction and its importance in decision-making\n",
    "\n",
    "<span style=\"float:right\"> $\\blacksquare$ </span>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Current Status of Deep Learning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Achievements\n",
    "\n",
    "Deep learning has achieved the following breakthroughs, all in historically difficult areas of machine learning:\n",
    "\n",
    "- Near-human-level image classification\n",
    "\n",
    "- Near-human-level speech recognition\n",
    "\n",
    "- Near-human-level handwriting transcription\n",
    "\n",
    "- Improved machine translation\n",
    "\n",
    "- Improved text-to-speech conversion\n",
    "\n",
    "- Digital assistants such as Google Now and Amazon Alexa\n",
    "\n",
    "- Near-human-level autonomous driving\n",
    "\n",
    "- Improved ad targeting, as used by Google, Baidu, and Bing\n",
    "\n",
    "- Improved search results on the web\n",
    "\n",
    "- Ability to answer natural-language questions\n",
    "\n",
    "- Superhuman Go playing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Hardware\n",
    "\n",
    "Although our laptop can run small deep-learning models, typical deep-learning models used in computer vision or speech recognition require orders of magnitude more computational power.\n",
    "\n",
    "Throughout the 2000s, companies like NVIDIA and AMD have been investing billions of dollars in developing fast, massively parallel chips, graphical processing units (GPUs), to power the graphics of increasingly photorealistic video games — cheap, single-purpose supercomputers designed to render complex 3D scenes on the screen in real time.\n",
    "\n",
    "At the end of 2015, the NVIDIA TITAN X, a gaming GPU that cost \\$1,000 can perform 6.6 trillion `float32` operations per second. That is about 350 times more than what you can get out of a modern laptop. Meanwhile, large companies train deep-learning models on clusters of hundreds of GPUs of a type developed specifically for the needs of deep learning, such as the NVIDIA Tesla K80. The sheer computational power of such clusters is something that would never have been possible without modern GPUs.\n",
    "\n",
    "The deep-learning industry is starting to go beyond GPUs and is investing in increasingly specialized, efficient chips for deep learning. In 2016, at its annual I/O convention, Google revealed its tensor processing unit (TPU) project: a new chip design developed from the ground up to run deep neural networks, which is reportedly 10 times faster and far more energy efficient than top-of-the-line GPUs.\n",
    "\n",
    "If you don't already have a GPU that you can use for deep learning, then running deep-learning experiments in the cloud is a simple, low cost way for you to get started without having to buy any additional hardware. But if you're a heavy user of deep learning, this setup isn't sustainable in the long term or even for more than a few weeks."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Investment\n",
    "\n",
    "As deep learning became the new state of the art for computer vision and eventually for all perceptual tasks, industry leaders took note. What followed was a gradual wave of industry investment far beyond anything previously seen in the history of AI.\n",
    "\n",
    "- In 2011 (right before deep learning took the spotlight), the total venture capital investment in AI was around <span>&dollar;</span>19 million\n",
    "\n",
    "- By 2014, the total venture capital investment in AI had risen to <span>&dollar;</span>394 million\n",
    "\n",
    "    - Google acquired the deep-learning startup DeepMind for a reported <span>&dollar;</span>500 million — the largest acquisition of an AI company in history.\n",
    "    \n",
    "    - Baidu started a deep-learning research center in Silicon Valley, investing <span>&dollar;</span>300 million in the project.\n",
    "    \n",
    "    - Intel acquired a deep-learning hardware startup Nervana Systems for over <span>&dollar;</span>400 million.\n",
    "    \n",
    "There are currently no signs that this uptrend will slow any time soon."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As entrepreneurs of AI start-ups, Alice and Bob had received similar amount of investments and competed in the same market\n",
    "\n",
    "- Alice spent lots of money to hire top engineers in AI field\n",
    "\n",
    "- Bob hired only mediocre engineers and spent most of his money to obtain high quality data with larger size\n",
    "\n",
    "Who will you invest? Why?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"hide_answer(this); return false;\">show answer</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hide_answer()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "acc1 = net_compare(512, .25)\n",
    "acc2 = net_compare(128, 1)\n",
    "print('The accuracy of a complicated model (with 512 nodes) with less (one fourth of) training data:', acc1)\n",
    "print('The accuracy of a simple model (with 128 nodes) and full training data:', acc2)\n",
    "print('The improvement is {}%!'.format(round((acc2-acc1)/(1-acc1)*100,2)))\n",
    "```\n",
    "\n",
    "<span style=\"float:right\"> $\\blacksquare$ </span>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Development\n",
    "\n",
    "Suppose you're trying to develop a model that can take as input images of a clock \n",
    "\n",
    "![clock](https://github.com/ming-zhao/Business-Analytics/raw/master/images/clock.png)\n",
    "\n",
    "and can output the time of day. What machine learning approach will you use?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"hide_answer(this); return false;\">show answer</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hide_answer()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you choose to use the raw pixels of the image as input data, then you have a difficult machine-learning problem on your hands. You'll need a convolutional neural network to solve it, and you'll have to expend quite a bit of computational resources to train the network.\n",
    "\n",
    "But if you already understand the problem at a high level, you can write a five-line Python script to follow the **black pixels of the clock hands** and output the $(x, y)$ coordinates of the tip of each hand. \n",
    "\n",
    "Then a simple machine-learning algorithm can learn to associate these coordinates with the appropriate time of day. For example, \n",
    "\n",
    "- the long hand has $(x=0.7, y=0.7)$ and the short hand has $(x=0.5, y=0.0)$ in the first image, and \n",
    "\n",
    "- the long hand has $(x=0.0, y=1.0)$ and the short hand has $(x=-0.38, y=0.32)$ in the second image.\n",
    "\n",
    "You can go even further: do a coordinate change, and express the $(x, y)$ coordinates as the angle of each clock hand. For example, \n",
    "\n",
    "- the long hand has angle $45$ degree and the short hand has angle $0$ degree in the first image, and \n",
    "\n",
    "- the long hand has angle $90$ degree and the short hand has angle $140$ degree in the second image. \n",
    "\n",
    "At this point, your features are making the problem so easy that no machine learning is required; a simple rounding operation and dictionary lookup are enough to recover the approximate time of day.\n",
    "\n",
    "<span style=\"float:right\"> $\\blacksquare$ </span>"
   ]
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "384px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "01f34c2ea45747079c2832e839efbe9a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "gender",
        "married",
        "purchased",
        "month",
        "art_book"
       ],
       "description": "column:",
       "index": 0,
       "layout": "IPY_MODEL_e434bf25b76040fe9bf9ffc0286355e2",
       "style": "IPY_MODEL_512c4c0334af4b35be336ddd12e26272"
      }
     },
     "0217a0ed3e4f4a42a35ae11ef17aa478": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "02b6c861cdaa4ef78f1e4b0b924a33f8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "03d35692fabc472db47fbf223ea28d41": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "049578b2482749778d78ccfaf24240af": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "gender",
        "married",
        "purchased",
        "month",
        "art_book"
       ],
       "description": "column:",
       "index": 0,
       "layout": "IPY_MODEL_cfc10db45b2045b0b65751bb4ab7f554",
       "style": "IPY_MODEL_f20e92fca3f24789a3438062ba4f43ad"
      }
     },
     "05965eccf1684f7f94d4a4a4ed841cf5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "063cad90fabb490384f3149065efb4f2": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_696975726e614993bbaa13a57a7a4f87",
       "outputs": [
        {
         "data": {
          "text/plain": "purchased  gender\n0          FEMALE    620\n           MALE      297\n1          FEMALE     63\n           MALE       20\nName: gender, dtype: int64"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "069e6c0526234c63a300fe0c41b3b0f1": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_6103b8a082c54e3c8c584259b69184e2",
       "outputs": [
        {
         "data": {
          "text/plain": "purchased  month\n0          0        0.210469\n1          0        0.349398\n0          1        0.270447\n1          1        0.349398\n0          2        0.205016\n1          2        0.132530\n0          3        0.303162\n1          3        0.168675\n0          4        0.010905\nName: month, dtype: float64"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "08675d5258ee4db093399a3638565e00": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_577410e976254282a6474aece6edb536",
        "IPY_MODEL_2a76d531bf9e495687142cc7b59a3be1",
        "IPY_MODEL_42c61b02f2f848aebd7f635312092ccc"
       ],
       "layout": "IPY_MODEL_396569a5534946bc8784f34a267daddd"
      }
     },
     "09a886a7d2bb4e3eb6b2f055eb1536af": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_d094722db0284b7aa334b553a5b322d5",
       "style": "IPY_MODEL_24c445d84e334b458ac9ab5f025d7be9",
       "value": false
      }
     },
     "09ab3b929e3f4c8489d92707e7854b79": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_fa0ac53eb1cc47c094f8c8bc5d1e0d22",
       "outputs": [
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 1440x288 with 5 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "0c6e2b441dff4c0ca9741487d8f54248": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_8002c95b469b46b786d46a9943431f41",
        "IPY_MODEL_22d4ccbc49e84489b5b5a4cd467afbbe",
        "IPY_MODEL_303a519cb719422c90b18d7e844f42c3"
       ],
       "layout": "IPY_MODEL_82b20bbfce0b4cf5a75f6a31e7b15eb3"
      }
     },
     "0c89dd1c4dcf43e7b80ccea09efa05e5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "0caaa2d8bd55440eade748d42a67acaa": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "0d292ef743e44744b8622cb3481ea407": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "0d79e13addd84753ad1e521ee21b25cd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "0fadbb538c2e447887185770724bcc1d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "0ff0e94112564c0fa679fbfdfe0fe4d2": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_a052824be50d458f8f8375523a8e3a25",
       "outputs": [
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 1440x288 with 5 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "0ff1f9f6dcf54593a8168d40d87d81ca": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "10710bc1cf6c4e9e816676cc96ffb148": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_d05753f743254bdc9230ba0478960199",
       "style": "IPY_MODEL_f19d21c104ea49c78ef048dafa12bd33",
       "value": false
      }
     },
     "1094c58c19d14005a70385a683b839ea": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_f06ba53326c943bba4ee1977b05c73e4",
        "IPY_MODEL_09a886a7d2bb4e3eb6b2f055eb1536af",
        "IPY_MODEL_1c4588fe185146bca61da351fbeecdc3"
       ],
       "layout": "IPY_MODEL_7f273badede8498cbe99b3063ef8797e"
      }
     },
     "10ed585367ba4ebbb20fc6e771383eec": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_cd07fba52ca04809a180e9d1dae4afc3",
       "outputs": [
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 1440x288 with 5 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "10f00ae31e2d4c9d91aae309dedcad19": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "customer",
        "gender",
        "married",
        "purchased",
        "month",
        "art_book"
       ],
       "description": "column:",
       "index": 4,
       "layout": "IPY_MODEL_59eddda9db4c41ccb4bb8e62ab1f591c",
       "style": "IPY_MODEL_fb5692749d6f46f2a7efae85b49f694f"
      }
     },
     "10f349977582472fa3b6215e4b4e1eaf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "customer",
        "gender",
        "married",
        "purchased",
        "month",
        "art_book"
       ],
       "description": "column:",
       "index": 4,
       "layout": "IPY_MODEL_45229707415549de948090718bdabf0b",
       "style": "IPY_MODEL_d377bf904b364b5790740ab13131dafb"
      }
     },
     "1182642896114258b49a80a2200fd50d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "12531a35642346c594a8dffabb327388": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "gender",
        "married",
        "purchased",
        "month",
        "art_book"
       ],
       "description": "column:",
       "index": 0,
       "layout": "IPY_MODEL_2d2c0e4efa0a47768471deec595e775e",
       "style": "IPY_MODEL_0d292ef743e44744b8622cb3481ea407"
      }
     },
     "1320237a353c418f93cff33fb454b99a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "1403b50b2b7049a3a99da0d676674914": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_options_labels": [
        "train",
        "test"
       ],
       "description": "Data:",
       "index": 0,
       "layout": "IPY_MODEL_d659df8633a34d2493a51fceeb589ac2",
       "style": "IPY_MODEL_75ee266c4d1e4cd485173c6ef8886b5b"
      }
     },
     "145b2302671046f196067e543c7dda93": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_options_labels": [
        "train",
        "test"
       ],
       "description": "Data:",
       "index": 0,
       "layout": "IPY_MODEL_b7d42663e88f4d64afb26bd4adedefb0",
       "style": "IPY_MODEL_fda5a0ab488945369dde21dea2c36c49"
      }
     },
     "1484616444e5445ba9f61a5b1578bb01": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "152f4e6cc2af499cab7eb86363d54991": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "customer",
        "gender",
        "married",
        "purchased",
        "month",
        "art_book"
       ],
       "description": "column:",
       "index": 1,
       "layout": "IPY_MODEL_243e6c737ea4405f84bb9c4f863db4de",
       "style": "IPY_MODEL_16ceff989ccc4b4b870126ba77cbfa5f"
      }
     },
     "165da7cd3ba048a0af1ebb9d3c86e0e7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_options_labels": [
        "train",
        "test"
       ],
       "description": "Data:",
       "index": 0,
       "layout": "IPY_MODEL_75dc0825c8db4e8c89b03b488b65f44b",
       "style": "IPY_MODEL_4a9cf340299847e3a3e986432e46507a"
      }
     },
     "16ceff989ccc4b4b870126ba77cbfa5f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "1842efa7232e468fb4eeaba086f317cb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "customer",
        "gender",
        "married",
        "purchased",
        "month",
        "art_book"
       ],
       "description": "column:",
       "index": 4,
       "layout": "IPY_MODEL_0217a0ed3e4f4a42a35ae11ef17aa478",
       "style": "IPY_MODEL_cca866fd52fe494e86d049ae93508788"
      }
     },
     "1881a77e4b4b40afaa31736567042f29": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "1a17ac82d081409b826b8d323ffbec00": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_f61a66809d4649a3a095bec3281060ab",
       "outputs": [
        {
         "data": {
          "text/plain": "{(0, 'FEMALE'): 0.6761177753544165,\n (0, 'MALE'): 0.3238822246455834,\n (1, 'FEMALE'): 0.7590361445783133,\n (1, 'MALE'): 0.24096385542168675}"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "1a317d0baeaa4be49ad9b4bd9d6718bf": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_c21bfcaa6a0b4c74bd208c72b78222ba",
       "outputs": [
        {
         "data": {
          "text/plain": "purchased  month\n0          0        0.210469\n           1        0.270447\n           2        0.205016\n           3        0.303162\n           4        0.010905\n1          0        0.349398\n           1        0.349398\n           2        0.132530\n           3        0.168675\nName: month, dtype: float64"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "1bbdd81617b64b209ce12ec2cd6ab8bd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "1c4588fe185146bca61da351fbeecdc3": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_440dbc33308a417fa6c50043a72b6d6c",
       "outputs": [
        {
         "data": {
          "text/plain": "purchased  gender\n0          FEMALE    620\n           MALE      297\n1          FEMALE     63\n           MALE       20\nName: gender, dtype: int64"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "1c87b788931b41ca951c9749ba559337": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_c641788819344963835c2719e080c2db",
       "style": "IPY_MODEL_2a5e5546390144e19477a455c9d6bba6",
       "value": true
      }
     },
     "1c9f498e5ca1401e9adb861babc7192e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_options_labels": [
        "train",
        "test"
       ],
       "description": "Data:",
       "index": 0,
       "layout": "IPY_MODEL_d662028564404bedbd3808c936ffec96",
       "style": "IPY_MODEL_38adf43a300749068dbdeda3131d9176"
      }
     },
     "1d7e722a62cd4b41b64625a052530cc5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "1db0abe810544a078057e3ca0e1423cf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_1c9f498e5ca1401e9adb861babc7192e",
        "IPY_MODEL_3b0abc419c904c508a5088f62085c874",
        "IPY_MODEL_99492c3269f046ffb577df58747c1e15"
       ],
       "layout": "IPY_MODEL_d93b90fd6865463182be5debb12104f0"
      }
     },
     "1dc3204444f743b1975894e8c463d870": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "1e9da3afb11c4696ac8a70ff23673d42": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_d301560be621446ab73297f22fe7bc1c",
       "style": "IPY_MODEL_b72dd6ca3c8040eeba64ad2d821a46fc",
       "value": false
      }
     },
     "1ed6f160f4ef419b8c5bcf9a259a6737": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_8fc7fc2cd57543d8919fdb97eeb97aca",
       "style": "IPY_MODEL_c3fb4ad5c26e4f3abda67f77b16788d2",
       "value": false
      }
     },
     "1f6d15d8a41448f5bd6854f7c19376dd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_b275e47c95d9490e8149d8b1eaf1d0bc",
        "IPY_MODEL_ba2761d29e534453ade84d29505b64d3",
        "IPY_MODEL_b6d434e578e045bcae6d62b2c2bea3d0"
       ],
       "layout": "IPY_MODEL_89773bb075cf455c869c3e595753f174"
      }
     },
     "1f9a4a6f5e154619b26f56b9b42291fa": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "200cdcc877ab49fab94d6edeea55a46d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "209ccea091ea43889a3e88b01effd1c1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "customer",
        "gender",
        "married",
        "purchased",
        "month",
        "art_book"
       ],
       "description": "column:",
       "index": 4,
       "layout": "IPY_MODEL_a9e62d9d595245c6bf15b3d80e350c09",
       "style": "IPY_MODEL_f856d1a4a6f14ac0a51a8d0c9bc0c0eb"
      }
     },
     "21485963d4014fc2a9280e3a34bb0cfb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_1bbdd81617b64b209ce12ec2cd6ab8bd",
       "style": "IPY_MODEL_bc767af8160747168583e9a3d8224e20",
       "value": false
      }
     },
     "21996b89bdfb4fd3ba7d3dd98dd6a7a9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "22d4ccbc49e84489b5b5a4cd467afbbe": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_1f9a4a6f5e154619b26f56b9b42291fa",
       "style": "IPY_MODEL_55567d474b514e30aa240f3839d0b3aa",
       "value": true
      }
     },
     "232fd1a0a5e347a1a9bf2ab622f96981": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "243e6c737ea4405f84bb9c4f863db4de": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "24c445d84e334b458ac9ab5f025d7be9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "25ee9ffa0c1c4d94a51c490e09ca0230": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "272be289eedb44b7bff8b4fd3bd70898": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntTextModel",
      "state": {
       "description": "Index:",
       "layout": "IPY_MODEL_d8dd66535b4c476ba5693a8205c3843f",
       "step": 1,
       "style": "IPY_MODEL_ac2ca49f65c34389adf29e6806ffe5d8",
       "value": 7
      }
     },
     "2929431729f64c31a5c8ba4a2ee0f281": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "29a03d67c0eb427c9e8501afae81f350": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "29cf6e0652c34d0fb0eb7e9069ebb252": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "2a5e5546390144e19477a455c9d6bba6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "2a76d531bf9e495687142cc7b59a3be1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntTextModel",
      "state": {
       "description": "Index:",
       "layout": "IPY_MODEL_a52284cc08ec4be9a26d69771cfe9921",
       "step": 1,
       "style": "IPY_MODEL_3d7d37422ce940e99f8620d848268e43",
       "value": 7
      }
     },
     "2acdf8f4629f48598de4e12dea8e34c0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_f4a6b61a7e91438ca5266b68ce38413c",
        "IPY_MODEL_272be289eedb44b7bff8b4fd3bd70898",
        "IPY_MODEL_09ab3b929e3f4c8489d92707e7854b79"
       ],
       "layout": "IPY_MODEL_7a92b40f6b2f424d9d8c75abeefa6fd4"
      }
     },
     "2b41025b921a4009b7b5c954b3dde32d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "2bddfddcefc948f68ddd766493996f2f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_b2e589bee1b5497f9128e67927befe5e",
       "style": "IPY_MODEL_1182642896114258b49a80a2200fd50d",
       "value": false
      }
     },
     "2c0628b47eef436e815f8ab28823126d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "2c0fd2b860e84f00928638a557b5ce38": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_b7b33681367242fcbd3df61b9ee0d7eb",
       "style": "IPY_MODEL_ea2c910a43714e5fa58fbc79036e567b",
       "value": false
      }
     },
     "2d2c0e4efa0a47768471deec595e775e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "2db2a5fd2123420ebc1e18472f2c0fbe": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_7f5a2683654b4b7d905cca25fbdd6cb5",
        "IPY_MODEL_b526a1a96c77444c8c0e5436c2373399",
        "IPY_MODEL_1a17ac82d081409b826b8d323ffbec00"
       ],
       "layout": "IPY_MODEL_9aa642bd018f43bfa472fc162b7e9395"
      }
     },
     "2db980397f1243bb94ee542755b52a82": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "2eb315998a6e41319447bf1eae0b9a75": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_f17da91130454075ab90b2b9bdea7694",
       "style": "IPY_MODEL_b03e9b1297854763a438cf14c2149280",
       "value": true
      }
     },
     "2ec1ed63d1ca4d42a30ad2a3964fb795": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_cd0311cac626469d8dade432f068f8f7",
       "outputs": [
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 1440x288 with 5 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "303a519cb719422c90b18d7e844f42c3": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_cc1f57ddbcfc47dea9638e81ca9544e8",
       "outputs": [
        {
         "data": {
          "text/plain": "purchased  married\n0          NO         0.291167\n           YES        0.708833\n1          NO         0.265060\n           YES        0.734940\nName: married, dtype: float64"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "3084982bd5b047399275fe95d8a0565b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "31630c5dc4a84679bfd4774d383df718": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_f4130a98651c4d188fbc71c51b728c4c",
       "outputs": [
        {
         "data": {
          "text/plain": "purchased  gender\n0          FEMALE    620\n           MALE      297\n1          FEMALE     63\n           MALE       20\nName: gender, dtype: int64"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "31ca93dd90fe4fd0969ba97b7a6e82f4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "31eb0c2fc5fe4da4b377b64ed4a1cc6e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "31f37c98fe4b4a679a0209a1f97cd088": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "3289f0feeb274b2cbd978557eb25c8bd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntTextModel",
      "state": {
       "description": "Index:",
       "layout": "IPY_MODEL_971feda747aa47a9ac03ed793a91b0ff",
       "step": 1,
       "style": "IPY_MODEL_d1e84c959c9b4e2091ca6bec1fe2a024",
       "value": 7
      }
     },
     "3375d3bc3387480ea2c1d3b745923939": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "33d589f0c2fe4845bef08fb961309dfe": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_options_labels": [
        "train",
        "test"
       ],
       "description": "Data:",
       "index": 0,
       "layout": "IPY_MODEL_cbd0782c4ee249c5b9b83fd6348e360f",
       "style": "IPY_MODEL_523aae06adbf4d90a0961be6fae3171a"
      }
     },
     "352e186b6b0d4e77ab9146ae0050639d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "36145d80c7964cfcbb223f60b4d8de45": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_200cdcc877ab49fab94d6edeea55a46d",
       "outputs": [
        {
         "ename": "AttributeError",
         "evalue": "'Series' object has no attribute 'sort'",
         "output_type": "error",
         "traceback": [
          "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
          "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
          "\u001b[1;32m~\\AppData\\Local\\Continuum\\anaconda3\\envs\\docs\\lib\\site-packages\\ipywidgets\\widgets\\interaction.py\u001b[0m in \u001b[0;36mupdate\u001b[1;34m(self, *args)\u001b[0m\n\u001b[0;32m    254\u001b[0m                     \u001b[0mvalue\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mwidget\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_interact_value\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    255\u001b[0m                     \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mwidget\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_kwarg\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mvalue\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 256\u001b[1;33m                 \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mresult\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m**\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    257\u001b[0m                 \u001b[0mshow_inline_matplotlib_plots\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    258\u001b[0m                 \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mauto_display\u001b[0m \u001b[1;32mand\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mresult\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
          "\u001b[1;32m<ipython-input-153-1b7ec84fc4d5>\u001b[0m in \u001b[0;36mfrequency_count\u001b[1;34m(col, normalize)\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;32mdef\u001b[0m \u001b[0mfrequency_count\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcol\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnormalize\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m     \u001b[1;32mreturn\u001b[0m \u001b[0mdf_book_part1\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'purchased'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mcol\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvalue_counts\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnormalize\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mnormalize\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msort\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m interact(frequency_count,\n\u001b[0;32m      5\u001b[0m          \u001b[0mcol\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mwidgets\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mDropdown\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0moptions\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mdf_book_part1\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'gender'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdescription\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m'column:'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mdisabled\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
          "\u001b[1;32m~\\AppData\\Local\\Continuum\\anaconda3\\envs\\docs\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[1;34m(self, name)\u001b[0m\n\u001b[0;32m   5178\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   5179\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 5180\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   5181\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   5182\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mname\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
          "\u001b[1;31mAttributeError\u001b[0m: 'Series' object has no attribute 'sort'"
         ]
        }
       ]
      }
     },
     "36cd49ef1e764c149791b8b0a4d33973": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_ee806da40e264041a3703544ab070555",
       "outputs": [
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 1440x288 with 5 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "3761ef60a64f4b7ba0e911e3cf8e6f8d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "37a6b866549149b09656dedd02921376": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "gender",
        "married",
        "purchased",
        "month",
        "art_book"
       ],
       "description": "column:",
       "index": 0,
       "layout": "IPY_MODEL_5a559a0bffe240b28d2e724adc74487c",
       "style": "IPY_MODEL_993dee23b2e641a982f7c33b11bb45c6"
      }
     },
     "38adf43a300749068dbdeda3131d9176": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "396569a5534946bc8784f34a267daddd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "3b0abc419c904c508a5088f62085c874": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntTextModel",
      "state": {
       "description": "Index:",
       "layout": "IPY_MODEL_6f233e1524214d399667a0c6fb081ef6",
       "step": 1,
       "style": "IPY_MODEL_40affbf2e9ad4494ad5523a2390ef467",
       "value": 7
      }
     },
     "3b13fd11111544e598d4278e61b1d233": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_74c4af20829942469dd12a8ab0dbef9f",
       "outputs": [
        {
         "data": {
          "text/plain": "purchased  gender\n0          FEMALE    620\n           MALE      297\n1          FEMALE     63\n           MALE       20\nName: gender, dtype: int64"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "3b6d9468944645ef971c1912dbf96bbb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "3b919e5d874442edb50c76ae50576585": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_57b698dfb1284c9ba746b39086327594",
       "outputs": [
        {
         "data": {
          "text/plain": "purchased  gender\n0          FEMALE    0.676118\n           MALE      0.323882\n1          FEMALE    0.759036\n           MALE      0.240964\nName: gender, dtype: float64"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "3d0ec71ad04849f0842bb0c2e1d18a35": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "3d32be9b4fd24accb241476f214f98b2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_1d7e722a62cd4b41b64625a052530cc5",
       "style": "IPY_MODEL_b280ac28f21241ceadf81b2af3b6f042",
       "value": true
      }
     },
     "3d7d37422ce940e99f8620d848268e43": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "3dcf9e06d31446e5845f493885af693d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "customer",
        "month",
        "art_book",
        "gender",
        "married",
        "purchased",
        "quantile_x",
        "quantile_y"
       ],
       "description": "column:",
       "index": 1,
       "layout": "IPY_MODEL_785e04738deb4f48963303412c69a7cb",
       "style": "IPY_MODEL_ce05317376c84b3ea862a9e7f906d052"
      }
     },
     "3dda8463b1ea46eb8aff791ea6070f1f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "3e5f480b7d7841fea6f6c079cd92b4d1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "3e774c60a92c4da880611947ed50a561": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "3ea799b1e06944e3bf653dbb3b8bd929": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "3ed4751c2ce046fbab89412c7d2b1ed5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "3fd9a807146b43c78a0a75c5fea93cdd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "age",
        "weight",
        "income",
        "car_value",
        "debt",
        "mall_trips",
        "gender",
        "alone",
        "dwell",
        "pay_type",
        "nbhd",
        "tried"
       ],
       "description": "column:",
       "index": 8,
       "layout": "IPY_MODEL_67084cfebaab480893baa2d19e0ad699",
       "style": "IPY_MODEL_ddb56fc1d87b4d81b3a26ec2ea3bc9e6"
      }
     },
     "4036ab91ca0840da8218954953b1250c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "40affbf2e9ad4494ad5523a2390ef467": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "40e2ca28ffa84d29bd0cd2b0bf8c06e5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "41055fa25d3c4e66bccddf10e387695b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "41c2ca05402c4fbfa30049f1a5143b4a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_dd44098a560f492e9881c85c84ac8e45",
        "IPY_MODEL_a37f0945a84f4c62896425cce0853ae1",
        "IPY_MODEL_75821ed8f6c941a29f5719d770a63f1b"
       ],
       "layout": "IPY_MODEL_8590a6caddc14eeba2319c820a04adbf"
      }
     },
     "41dbe8c091374b4e9b943de0b7111e0c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "426c9f77cd194017b16e30005a0458c9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "427598470e094c1f82698f750bd9e259": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "42c61b02f2f848aebd7f635312092ccc": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_e8ba5991f1e444e0b10045bd31756c2e",
       "outputs": [
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 1440x288 with 5 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "43bafec6543747448ee693069497f890": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "440dbc33308a417fa6c50043a72b6d6c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "45229707415549de948090718bdabf0b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "452f24f39e094bfe963a9854e764e042": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_9769cb8ae28f4969a4e33e3b45d27691",
       "outputs": [
        {
         "data": {
          "text/plain": "purchased  gender\n0          FEMALE    620\n           MALE      297\n1          FEMALE     63\n           MALE       20\nName: gender, dtype: int64"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "463bb7ce06af45bdb39b4995291a46ab": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "4681f23681954e54bcb976ccb68afc2a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "497ab06aea52488b997e78ce4ddd25b4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_8bf00432145c439c9743158dd3287b59",
       "style": "IPY_MODEL_0ff1f9f6dcf54593a8168d40d87d81ca",
       "value": true
      }
     },
     "49e47e4ce0e74881959028371be282cb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "4a9cf340299847e3a3e986432e46507a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "4abcee6cf278495882c41eecaa676df4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "4b9cb880886446c2b4cd856b49352413": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_c3b3309fd7b34dadb0dea171688b7444",
        "IPY_MODEL_497ab06aea52488b997e78ce4ddd25b4",
        "IPY_MODEL_c554da08f4eb4040adbbbb821748461d"
       ],
       "layout": "IPY_MODEL_3ed4751c2ce046fbab89412c7d2b1ed5"
      }
     },
     "4bd932370dea45daa4b1590b8d35ee04": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "4bea4c22d97142b6a6094f13de222949": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_a86e61294dab468db847bc70a062dde1",
        "IPY_MODEL_843a170290204934ab14dda59825a64e",
        "IPY_MODEL_069e6c0526234c63a300fe0c41b3b0f1"
       ],
       "layout": "IPY_MODEL_ced9bc49f76f4f33a681b231331a2440"
      }
     },
     "4c5481908ade46c0ac995004253003ae": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "4c9dd09454fa46fea89c8c6aa5469d04": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_52e213cf967149fca3d83aa371c4fce1",
       "outputs": [
        {
         "data": {
          "text/plain": "purchased  gender\n0          FEMALE    620\n           MALE      297\n1          FEMALE     63\n           MALE       20\nName: gender, dtype: int64"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "4d1b0a40c6984b998250030bb9ea4d7c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "4d36efa5a5a04dc39991d6ea3acdad2d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_209ccea091ea43889a3e88b01effd1c1",
        "IPY_MODEL_a769658472ab4e99a5e45b42057668ba",
        "IPY_MODEL_e3b3bb261c114611911290c6238264d4"
       ],
       "layout": "IPY_MODEL_25ee9ffa0c1c4d94a51c490e09ca0230"
      }
     },
     "512c4c0334af4b35be336ddd12e26272": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "5157e22e77ea4471b1ee8b0d373fc5e8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_4681f23681954e54bcb976ccb68afc2a",
       "style": "IPY_MODEL_bb3da90e658442e89b9e8fe7d642545f",
       "value": true
      }
     },
     "5169d5e2981c443eaddf8df49d863340": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "523aae06adbf4d90a0961be6fae3171a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "52e213cf967149fca3d83aa371c4fce1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "530f9c75e32d4e748bcb4f40efeab4d9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "53f9d512175a4bf18f8e885000f7d9ca": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_5b5c77e945f34f81b720b2f963c678ce",
        "IPY_MODEL_94f9b20abb99453d8cf1f843136decd1",
        "IPY_MODEL_c467faa555b44790b473a373ff10437a"
       ],
       "layout": "IPY_MODEL_ffd52a828d864b89bc1e93791e94af0c"
      }
     },
     "545605a4fc6941e0a63a78d070734951": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "5458d4dcc1084844897b7ee0998eba79": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "548ba5f04bf3467a814155b87c5f0f44": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_options_labels": [
        "train",
        "test"
       ],
       "description": "Data:",
       "index": 0,
       "layout": "IPY_MODEL_ee1817255eca4366a05888dc8e9dc27d",
       "style": "IPY_MODEL_1320237a353c418f93cff33fb454b99a"
      }
     },
     "54936233f3b245fabbc90ee3432ebf3a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "54c01bd3853e4a9d9326d88a37475163": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "54c4e9ebf3a84b56b36f7b871486cd99": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "month",
        "art_book",
        "gender",
        "married",
        "purchased"
       ],
       "description": "column:",
       "index": 0,
       "layout": "IPY_MODEL_c1e819ad2de346b4a536b954d2e18eb5",
       "style": "IPY_MODEL_9e3a435a1fb04f659ce7a9c8e3abbd44"
      }
     },
     "55567d474b514e30aa240f3839d0b3aa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "563614adb4444c429d8989a307fe6c66": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "56609b1e8fec45e29a354deb8aceab07": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "56f6c7e485f04e7fb8e5a90e4e9d86a8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "577410e976254282a6474aece6edb536": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_options_labels": [
        "train",
        "test"
       ],
       "description": "Data:",
       "index": 0,
       "layout": "IPY_MODEL_5169d5e2981c443eaddf8df49d863340",
       "style": "IPY_MODEL_2db980397f1243bb94ee542755b52a82"
      }
     },
     "57b698dfb1284c9ba746b39086327594": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "5925105c7f1b494592e88633e468692d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "592b1c5fe15c44298e04a4cee7367513": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_54c4e9ebf3a84b56b36f7b871486cd99",
        "IPY_MODEL_1c87b788931b41ca951c9749ba559337",
        "IPY_MODEL_5e07fc44730945e6ba3edc770c43484b"
       ],
       "layout": "IPY_MODEL_6692acb1c10d4c319d63136a8b808e90"
      }
     },
     "59eddda9db4c41ccb4bb8e62ab1f591c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "5a559a0bffe240b28d2e724adc74487c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "5ab3d59806de466d9e63bc3a0eac089a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_bb423dd7eaf74598bab803e4ce319934",
        "IPY_MODEL_709b52bb91e64ce7ae36a54de48b5517",
        "IPY_MODEL_452f24f39e094bfe963a9854e764e042"
       ],
       "layout": "IPY_MODEL_56f6c7e485f04e7fb8e5a90e4e9d86a8"
      }
     },
     "5b5c77e945f34f81b720b2f963c678ce": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "age",
        "weight",
        "income",
        "car_value",
        "debt",
        "mall_trips",
        "gender",
        "alone",
        "dwell",
        "pay_type",
        "nbhd",
        "tried"
       ],
       "description": "column:",
       "index": 8,
       "layout": "IPY_MODEL_afb5ffd7bf1e4c2991f1ae5a667c6edd",
       "style": "IPY_MODEL_c215360a987b4c43ab491e3d4ffcbec0"
      }
     },
     "5b825a83a5464894a10d31f5e5a7eb00": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "5cec526ba8624204b65ef6b1c474cc05": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntTextModel",
      "state": {
       "description": "Index:",
       "layout": "IPY_MODEL_6ccf0a85e872421ca6a331ad6ab89931",
       "step": 1,
       "style": "IPY_MODEL_54936233f3b245fabbc90ee3432ebf3a",
       "value": 7
      }
     },
     "5cf5680f13e44e64a0d9d1718289fcf8": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_dd7ceb67fec2410b9692c216b7682868",
       "outputs": [
        {
         "data": {
          "text/plain": "purchased  month\n0          0        0.210469\n1          0        0.349398\n0          1        0.270447\n1          1        0.349398\n0          2        0.205016\n1          2        0.132530\n0          3        0.303162\n1          3        0.168675\n0          4        0.010905\nName: month, dtype: float64"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "5dbc474d308e44f190c63e5b12af62f4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "5e07fc44730945e6ba3edc770c43484b": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_e69f1cf6b6934210ab9c196938d1b828",
       "outputs": [
        {
         "data": {
          "text/plain": "{(0, 3): 0.31406761177753545,\n (0, 1): 0.27044711014176664,\n (0, 0): 0.21046892039258452,\n (0, 2): 0.2050163576881134,\n (1, 0): 0.3493975903614458,\n (1, 1): 0.3493975903614458,\n (1, 3): 0.1686746987951807,\n (1, 2): 0.13253012048192772}"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "5e2da7c11e58430b83453fbb6ddee065": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "6103796be78d491fbd099e1b6adcd71d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "6103b8a082c54e3c8c584259b69184e2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "612c659deaf34b8c8a7019729f1a84b9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "customer",
        "gender",
        "married",
        "purchased",
        "month",
        "art_book"
       ],
       "description": "column:",
       "index": 4,
       "layout": "IPY_MODEL_49e47e4ce0e74881959028371be282cb",
       "style": "IPY_MODEL_7494ac662c29449cb7f6ecfcb75535ac"
      }
     },
     "628ecc1dd949404a8f7a2620038de346": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_722171f708a1432fa83d06f6bacdd9cb",
        "IPY_MODEL_89a5d947f6c94db9b099044c41b9f68d",
        "IPY_MODEL_64001cb20166493a9e9921f1c2f9697b"
       ],
       "layout": "IPY_MODEL_1881a77e4b4b40afaa31736567042f29"
      }
     },
     "64001cb20166493a9e9921f1c2f9697b": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_d6ee44c6067b4aeea87e6a1d29414585",
       "outputs": [
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 1440x288 with 5 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "641815a271aa496c8214ea73df71a6c6": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_d8f37c6817ac418b98708f01cfd17fef",
       "outputs": [
        {
         "data": {
          "text/plain": "purchased  gender\n0          FEMALE    620\n           MALE      297\n1          FEMALE     63\n           MALE       20\nName: gender, dtype: int64"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "650ba74f1a6d47759cedba76f9c46cca": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "652cb3370e9744e1a0b841404e44ffa5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "6603881dfa374997aeaf659849d89365": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "668f0678b82142758a7105325c0fe177": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "6692acb1c10d4c319d63136a8b808e90": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "6692faaf44e54a4dacf3eed7df422d36": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "customer",
        "gender",
        "married",
        "purchased",
        "month",
        "art_book"
       ],
       "description": "column:",
       "index": 1,
       "layout": "IPY_MODEL_713166f8778543e4b6f0a28dbb0e8641",
       "style": "IPY_MODEL_352e186b6b0d4e77ab9146ae0050639d"
      }
     },
     "67084cfebaab480893baa2d19e0ad699": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "67fec158443942779f596bfdd18db291": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "6820c502acce4e0f8f245e5aea761749": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_7f663ba8abed422ca65b506b0291c816",
        "IPY_MODEL_6bc3739093ca489e93ecd5927b9f1872",
        "IPY_MODEL_89a087adc2ec49f082f2b61383d0176f"
       ],
       "layout": "IPY_MODEL_df2e8613437446249af8078aab4a2ff5"
      }
     },
     "68ce6c08968f4091a5628c0f60fd5b07": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "68e2a9bd92234583b88d744577fe2920": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_6692faaf44e54a4dacf3eed7df422d36",
        "IPY_MODEL_2bddfddcefc948f68ddd766493996f2f",
        "IPY_MODEL_fe67460950b64569b6d6b92ff80623ab"
       ],
       "layout": "IPY_MODEL_89643ba364cf46a3a3ecf008369efb66"
      }
     },
     "696975726e614993bbaa13a57a7a4f87": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "69d37aebc34c4d369ce62d757e307af9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "6bc3739093ca489e93ecd5927b9f1872": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntTextModel",
      "state": {
       "description": "Index:",
       "layout": "IPY_MODEL_3761ef60a64f4b7ba0e911e3cf8e6f8d",
       "step": 1,
       "style": "IPY_MODEL_4d1b0a40c6984b998250030bb9ea4d7c",
       "value": 7
      }
     },
     "6c7a588e0f484dfc83f2440efd2d513e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "6c9ba27ecf174d45890fc81d93157844": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "age",
        "weight",
        "income",
        "car_value",
        "debt",
        "mall_trips",
        "gender",
        "alone",
        "dwell",
        "pay_type",
        "nbhd",
        "tried"
       ],
       "description": "column:",
       "index": 8,
       "layout": "IPY_MODEL_a131d23d76f04ca49c389dacae7bdcd7",
       "style": "IPY_MODEL_fcb6122892e1454db0f5873837ab99e0"
      }
     },
     "6ccf0a85e872421ca6a331ad6ab89931": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "6f233e1524214d399667a0c6fb081ef6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "709ab5412be94b4b901967cd8371bbd7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "709b52bb91e64ce7ae36a54de48b5517": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_96398bd3296d49c1a3e41dcafe2ba0ce",
       "style": "IPY_MODEL_f47164de37d04bc2a06c60501eb86cae",
       "value": false
      }
     },
     "713166f8778543e4b6f0a28dbb0e8641": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "71f1252c29374cdeb31b56dfe00979bc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "71fec20c493049cdb2fa18b22d9e438c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "gender",
        "married",
        "purchased",
        "month",
        "art_book",
        "prediction"
       ],
       "description": "column:",
       "index": 0,
       "layout": "IPY_MODEL_69d37aebc34c4d369ce62d757e307af9",
       "style": "IPY_MODEL_650ba74f1a6d47759cedba76f9c46cca"
      }
     },
     "722171f708a1432fa83d06f6bacdd9cb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_options_labels": [
        "train",
        "test"
       ],
       "description": "Data:",
       "index": 0,
       "layout": "IPY_MODEL_efd2069ab160484586e7b73967bbe210",
       "style": "IPY_MODEL_5b825a83a5464894a10d31f5e5a7eb00"
      }
     },
     "7494ac662c29449cb7f6ecfcb75535ac": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "74c4af20829942469dd12a8ab0dbef9f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "751ef4f69ae04fe69ff2ee6db52197f3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_6c9ba27ecf174d45890fc81d93157844",
        "IPY_MODEL_ee01d52c5dfa4031b6ebf36f52514202",
        "IPY_MODEL_fe513f6df72d4aea9ac3ad89aa82f279"
       ],
       "layout": "IPY_MODEL_785831f6461a4617807280a83671c043"
      }
     },
     "7571e4f734204a3bb8d31d7eff797630": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntTextModel",
      "state": {
       "description": "Index:",
       "layout": "IPY_MODEL_e668523e8f9d418bb452516168f7774e",
       "step": 1,
       "style": "IPY_MODEL_b667571702e24105b1d78e2c8199e75b",
       "value": 7
      }
     },
     "75821ed8f6c941a29f5719d770a63f1b": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_8e40a561336a47338aae366b4d8d3101",
       "outputs": [
        {
         "data": {
          "text/plain": "purchased  month\n0          3        0.303162\n           1        0.270447\n           0        0.210469\n           2        0.205016\n           4        0.010905\n1          0        0.349398\n           1        0.349398\n           3        0.168675\n           2        0.132530\nName: month, dtype: float64"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "75dc0825c8db4e8c89b03b488b65f44b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "75ee266c4d1e4cd485173c6ef8886b5b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "767f177fb70e4d7493dae2df30553077": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_e5302758c3b34c75ac6f73609a78384e",
       "style": "IPY_MODEL_9408a1ccc48f41ee8ce07d6ab0a1da85",
       "value": false
      }
     },
     "780aa9441a6140f2978d5a9ea219420b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "785831f6461a4617807280a83671c043": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "785e04738deb4f48963303412c69a7cb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "79f7759dca1d434eb9528b37e97b9eef": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_e7327860c146401da3482f0d93b191ab",
       "outputs": [
        {
         "data": {
          "text/plain": "purchased  month\n0          0        193\n           1        248\n           2        188\n           3        278\n           4         10\n1          0         29\n           1         29\n           2         11\n           3         14\nName: month, dtype: int64"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "7a92b40f6b2f424d9d8c75abeefa6fd4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "7aa431be54cc4a809935acbe24911f73": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "7aea116168de4b38b4db0fce62f2d03b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "7c96bb1e0412458688044dffc90ad083": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "7f273badede8498cbe99b3063ef8797e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "7f5a2683654b4b7d905cca25fbdd6cb5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "month",
        "art_book",
        "gender",
        "married",
        "purchased"
       ],
       "description": "column:",
       "index": 2,
       "layout": "IPY_MODEL_ff09d1cbb0454a3881221ce10bd98a7d",
       "style": "IPY_MODEL_a9c83141400f42508050eecee49de653"
      }
     },
     "7f64c5ca637344f8a26b86293cab60f9": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_8e16291977c1498a9c1fa4f1b4faec92",
       "outputs": [
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 1440x288 with 5 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "7f663ba8abed422ca65b506b0291c816": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_options_labels": [
        "train",
        "test"
       ],
       "description": "Data:",
       "index": 0,
       "layout": "IPY_MODEL_92d3165df7694f1591865a2b49cbfa28",
       "style": "IPY_MODEL_56609b1e8fec45e29a354deb8aceab07"
      }
     },
     "7fe088dbd53649679d71e7f1c7ec23e5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "8002c95b469b46b786d46a9943431f41": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "gender",
        "married",
        "purchased",
        "month",
        "art_book"
       ],
       "description": "column:",
       "index": 1,
       "layout": "IPY_MODEL_c88d2f97ce7e488fbd5e434af2aede7a",
       "style": "IPY_MODEL_95cdeba5fb624aca8c87047b36f66ae4"
      }
     },
     "8024e26f338e424ca328f6a6fd32650f": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_f4ca342263414796bc3b6f59e9fc9533",
       "outputs": [
        {
         "ename": "AttributeError",
         "evalue": "'NoneType' object has no attribute 'groupby'",
         "output_type": "error",
         "traceback": [
          "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
          "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
          "\u001b[1;32m~\\AppData\\Local\\Continuum\\anaconda3\\envs\\docs\\lib\\site-packages\\ipywidgets\\widgets\\interaction.py\u001b[0m in \u001b[0;36mupdate\u001b[1;34m(self, *args)\u001b[0m\n\u001b[0;32m    254\u001b[0m                     \u001b[0mvalue\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mwidget\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_interact_value\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    255\u001b[0m                     \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mwidget\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_kwarg\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mvalue\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 256\u001b[1;33m                 \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mresult\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m**\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    257\u001b[0m                 \u001b[0mshow_inline_matplotlib_plots\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    258\u001b[0m                 \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mauto_display\u001b[0m \u001b[1;32mand\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mresult\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
          "\u001b[1;32m<ipython-input-197-4a2f186025be>\u001b[0m in \u001b[0;36mfrequency_count\u001b[1;34m(col, normalize)\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;32mdef\u001b[0m \u001b[0mfrequency_count\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcol\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnormalize\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m     \u001b[0mdf\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdf_book_train\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'purchased'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mcol\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvalue_counts\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnormalize\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mnormalize\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msort_index\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mdf\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m interact(frequency_count,\n",
          "\u001b[1;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'groupby'"
         ]
        }
       ]
      }
     },
     "82b20bbfce0b4cf5a75f6a31e7b15eb3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "843a170290204934ab14dda59825a64e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_e211310468a04b5ba95e06551c9e2c02",
       "style": "IPY_MODEL_31eb0c2fc5fe4da4b377b64ed4a1cc6e",
       "value": true
      }
     },
     "8590a6caddc14eeba2319c820a04adbf": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "870fe219af204ff3bf398153576097a5": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_f768ef19820a432eb2d3366e70624229",
       "outputs": [
        {
         "data": {
          "text/plain": "{(0, 3.0): 0.3065049614112459,\n (0, 1.0): 0.27342888643880925,\n (0, 0.0): 0.2127894156560088,\n (0, 2.0): 0.20727673649393605,\n (1, 0.0): 0.3493975903614458,\n (1, 1.0): 0.3493975903614458,\n (1, 3.0): 0.1686746987951807,\n (1, 2.0): 0.13253012048192772}"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "871c071702cd4ed094f52540e5dd742c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "89643ba364cf46a3a3ecf008369efb66": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "89773bb075cf455c869c3e595753f174": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "89a087adc2ec49f082f2b61383d0176f": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_5e2da7c11e58430b83453fbb6ddee065",
       "outputs": [
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 1440x288 with 5 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "89a5d947f6c94db9b099044c41b9f68d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntTextModel",
      "state": {
       "description": "Index:",
       "layout": "IPY_MODEL_463bb7ce06af45bdb39b4995291a46ab",
       "step": 1,
       "style": "IPY_MODEL_fcb5de819b0644f2b449853989c98c59",
       "value": 7
      }
     },
     "8a37b0f37650477395c481ee22882d0b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "8a8f5bdf1dfb4d3da60e98a0cae2e2f1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "customer",
        "gender",
        "married",
        "purchased",
        "month",
        "art_book"
       ],
       "description": "column:",
       "index": 1,
       "layout": "IPY_MODEL_d1bfcbfd964b47dd806d931b8de8358a",
       "style": "IPY_MODEL_4036ab91ca0840da8218954953b1250c"
      }
     },
     "8bcc119125884fb58ebb7562a7c8aa0c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "8bf00432145c439c9743158dd3287b59": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "8ce988846f8f48fa97d41556727f4b22": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_c3499bb1187c43cbb1f7611a7f541493",
       "outputs": [
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 1440x288 with 5 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "8e104c5e42334f0a8ece18eb16d6986a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "8e16291977c1498a9c1fa4f1b4faec92": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "8e40a561336a47338aae366b4d8d3101": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "8fa0d81d35dd48018ac5117a157d469d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "8fc7fc2cd57543d8919fdb97eeb97aca": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "9055866eac7d4a8fa3839b20ec0d0544": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "905e03ad3371492a83e5f438f1332b64": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "907c7e2de77e4fc18289b299eaa09d53": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "90bd912671a245a28660c766cdb68656": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "916855a4d8b74cd9b7e058e905313898": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "91d025b2cee34516896654aa80378a97": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_2c0628b47eef436e815f8ab28823126d",
       "outputs": [
        {
         "data": {
          "text/plain": "{(0, 12): 0.08724100327153762,\n (0, 9): 0.07197382769901854,\n (0, 10): 0.0697928026172301,\n (0, 15): 0.061068702290076333,\n (0, 13): 0.05997818974918211,\n (0, 14): 0.05779716466739367,\n (0, 16): 0.05561613958560523,\n (0, 8): 0.04798255179934569,\n (0, 1): 0.04471101417666303,\n (0, 11): 0.04471101417666303,\n (0, 3): 0.04252998909487459,\n (0, 2): 0.03707742639040349,\n (0, 7): 0.03598691384950927,\n (0, 6): 0.03271537622682661,\n (0, 4): 0.027262813522355506,\n (0, 5): 0.026172300981461286,\n (0, 22): 0.018538713195201745,\n (0, 23): 0.016357688113413305,\n (0, 34): 0.014176663031624863,\n (0, 17): 0.011995637949836423,\n (0, 28): 0.011995637949836423,\n (0, 18): 0.010905125408942203,\n (0, 32): 0.010905125408942203,\n (0, 33): 0.010905125408942203,\n (0, 35): 0.010905125408942203,\n (0, 27): 0.009814612868047983,\n (0, 30): 0.009814612868047983,\n (0, 31): 0.009814612868047983,\n (0, 19): 0.008724100327153763,\n (0, 20): 0.008724100327153763,\n (0, 21): 0.007633587786259542,\n (0, 26): 0.007633587786259542,\n (0, 24): 0.006543075245365322,\n (0, 25): 0.006543075245365322,\n (0, 29): 0.0054525627044711015,\n (1, 10): 0.0963855421686747,\n (1, 5): 0.08433734939759036,\n (1, 11): 0.08433734939759036,\n (1, 15): 0.08433734939759036,\n (1, 2): 0.07228915662650602,\n (1, 9): 0.07228915662650602,\n (1, 13): 0.07228915662650602,\n (1, 1): 0.060240963855421686,\n (1, 6): 0.060240963855421686,\n (1, 7): 0.060240963855421686,\n (1, 3): 0.03614457831325301,\n (1, 4): 0.03614457831325301,\n (1, 8): 0.03614457831325301,\n (1, 14): 0.03614457831325301,\n (1, 12): 0.024096385542168676,\n (1, 16): 0.012048192771084338,\n (1, 18): 0.012048192771084338,\n (1, 21): 0.012048192771084338,\n (1, 22): 0.012048192771084338,\n (1, 25): 0.012048192771084338,\n (1, 27): 0.012048192771084338,\n (1, 30): 0.012048192771084338}"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "92d3165df7694f1591865a2b49cbfa28": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "92f30fbf45724d0aa9f793640f85c6da": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "9408a1ccc48f41ee8ce07d6ab0a1da85": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "942fed233e6b4a33ae1fb51bd6b8a20f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "94f9b20abb99453d8cf1f843136decd1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_426c9f77cd194017b16e30005a0458c9",
       "style": "IPY_MODEL_871c071702cd4ed094f52540e5dd742c",
       "value": true
      }
     },
     "95cdeba5fb624aca8c87047b36f66ae4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "95dce5dad7ce430cb5927b40b9ced938": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_e28c961f2e1341449b92e0e49afae9bd",
        "IPY_MODEL_21485963d4014fc2a9280e3a34bb0cfb",
        "IPY_MODEL_4c9dd09454fa46fea89c8c6aa5469d04"
       ],
       "layout": "IPY_MODEL_fbc4cd35101141afb30c4edab60f382b"
      }
     },
     "96398bd3296d49c1a3e41dcafe2ba0ce": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "971feda747aa47a9ac03ed793a91b0ff": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "9769cb8ae28f4969a4e33e3b45d27691": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "97930f6e5d97495792950b89f136a80c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_548ba5f04bf3467a814155b87c5f0f44",
        "IPY_MODEL_7571e4f734204a3bb8d31d7eff797630",
        "IPY_MODEL_36cd49ef1e764c149791b8b0a4d33973"
       ],
       "layout": "IPY_MODEL_b726604cbae64d7197c8467fb3b97a46"
      }
     },
     "97f67a40a9bc4bf1a5a343622323ea6c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_1403b50b2b7049a3a99da0d676674914",
        "IPY_MODEL_3289f0feeb274b2cbd978557eb25c8bd",
        "IPY_MODEL_0ff0e94112564c0fa679fbfdfe0fe4d2"
       ],
       "layout": "IPY_MODEL_0caaa2d8bd55440eade748d42a67acaa"
      }
     },
     "982b9858d1f94d1e9eb14fb188e7d5f4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_165da7cd3ba048a0af1ebb9d3c86e0e7",
        "IPY_MODEL_b0e910e3188042a2af608d235d895868",
        "IPY_MODEL_2ec1ed63d1ca4d42a30ad2a3964fb795"
       ],
       "layout": "IPY_MODEL_ca28e45bd7554952b7b3309856450e35"
      }
     },
     "9871f67a94a84b2ca09c6e4dcdd97d7d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "98dfb6da884e4e608416f2808e530703": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "gender",
        "married",
        "purchased",
        "month",
        "art_book"
       ],
       "description": "column:",
       "index": 0,
       "layout": "IPY_MODEL_f86726eb4a0d4f47b9031a2d0fe49b8d",
       "style": "IPY_MODEL_54c01bd3853e4a9d9326d88a37475163"
      }
     },
     "993dee23b2e641a982f7c33b11bb45c6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "99492c3269f046ffb577df58747c1e15": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_8e104c5e42334f0a8ece18eb16d6986a",
       "outputs": [
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 1440x288 with 5 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "9aa642bd018f43bfa472fc162b7e9395": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "9c7152d42e7c4b1298b2c999979ee99e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_612c659deaf34b8c8a7019729f1a84b9",
        "IPY_MODEL_2eb315998a6e41319447bf1eae0b9a75",
        "IPY_MODEL_5cf5680f13e44e64a0d9d1718289fcf8"
       ],
       "layout": "IPY_MODEL_40e2ca28ffa84d29bd0cd2b0bf8c06e5"
      }
     },
     "9d9e9ae64377414d932d855aefdd80e5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_6c7a588e0f484dfc83f2440efd2d513e",
       "style": "IPY_MODEL_d64c630f61e34c578a3ae8e1d6d03f99",
       "value": true
      }
     },
     "9e3a435a1fb04f659ce7a9c8e3abbd44": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "9f42f966713a415daa48c3fc7e2bd70e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_10f00ae31e2d4c9d91aae309dedcad19",
        "IPY_MODEL_f130508ed16a4c7bb50e04a537205577",
        "IPY_MODEL_1a317d0baeaa4be49ad9b4bd9d6718bf"
       ],
       "layout": "IPY_MODEL_4c5481908ade46c0ac995004253003ae"
      }
     },
     "9f9dc774c8604038b0372eedc93d566a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "9fed1505fc0e47a28f2ca67a4c0a8e05": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_152f4e6cc2af499cab7eb86363d54991",
        "IPY_MODEL_5157e22e77ea4471b1ee8b0d373fc5e8",
        "IPY_MODEL_ce5b7a86e8c641c6bb6bcfb15f4df7bb"
       ],
       "layout": "IPY_MODEL_ef462715b1ee4200a24d737ccc3e49f6"
      }
     },
     "a01f6a80868b43e48d76e517783a90df": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_8a8f5bdf1dfb4d3da60e98a0cae2e2f1",
        "IPY_MODEL_f471172054b54c2a8c17e9342999fa4e",
        "IPY_MODEL_36145d80c7964cfcbb223f60b4d8de45"
       ],
       "layout": "IPY_MODEL_f86eb051b42e4eb6acfba9ed1402d18c"
      }
     },
     "a052824be50d458f8f8375523a8e3a25": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "a0aee0470c2b42bd9efaa9c5697c59ef": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_7aea116168de4b38b4db0fce62f2d03b",
       "style": "IPY_MODEL_bcd199149c3048cab121761cbfc49158",
       "value": false
      }
     },
     "a131d23d76f04ca49c389dacae7bdcd7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "a13a47bc93784863b515d21cca6beecb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_049578b2482749778d78ccfaf24240af",
        "IPY_MODEL_bffc4d51378d48c698fa3ef8c1be6060",
        "IPY_MODEL_ba1c84ab9be6439f878cfa7e4f3e1550"
       ],
       "layout": "IPY_MODEL_31ca93dd90fe4fd0969ba97b7a6e82f4"
      }
     },
     "a1db2aa2dd0f4fb2b170ba6aa4642e15": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "a3737ac73f134845881183dfe3bac5d3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "a37f0945a84f4c62896425cce0853ae1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_2b41025b921a4009b7b5c954b3dde32d",
       "style": "IPY_MODEL_4bd932370dea45daa4b1590b8d35ee04",
       "value": true
      }
     },
     "a3cb36f9b40f420d9afa71b550faa85d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "a3fbe0b1ccda44dfb654a9e0b62b4898": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_29a03d67c0eb427c9e8501afae81f350",
       "style": "IPY_MODEL_43bafec6543747448ee693069497f890",
       "value": true
      }
     },
     "a4119728bf0d4c16ad64f253d401b801": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "a52284cc08ec4be9a26d69771cfe9921": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "a55c15b446bd4e2082d5281e7fcd6866": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "a769658472ab4e99a5e45b42057668ba": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_905e03ad3371492a83e5f438f1332b64",
       "style": "IPY_MODEL_05965eccf1684f7f94d4a4a4ed841cf5",
       "value": true
      }
     },
     "a86e61294dab468db847bc70a062dde1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "customer",
        "gender",
        "married",
        "purchased",
        "month",
        "art_book"
       ],
       "description": "column:",
       "index": 4,
       "layout": "IPY_MODEL_ec66c1f036274a89846feba9dc66ef38",
       "style": "IPY_MODEL_03d35692fabc472db47fbf223ea28d41"
      }
     },
     "a9c83141400f42508050eecee49de653": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "a9e62d9d595245c6bf15b3d80e350c09": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "abeb5156764344ffb79ea7db0b86bac3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "ac2ca49f65c34389adf29e6806ffe5d8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "ae51c7e3f6234e239b01e1cbca7ad268": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "ae9d6c486773454a9928823060d4a928": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_1842efa7232e468fb4eeaba086f317cb",
        "IPY_MODEL_2c0fd2b860e84f00928638a557b5ce38",
        "IPY_MODEL_79f7759dca1d434eb9528b37e97b9eef"
       ],
       "layout": "IPY_MODEL_21996b89bdfb4fd3ba7d3dd98dd6a7a9"
      }
     },
     "aeb3aa4dd4a443c58f58613b7abbccc2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_ece1870529864633a8b4b35381dc83ea",
       "style": "IPY_MODEL_3375d3bc3387480ea2c1d3b745923939",
       "value": false
      }
     },
     "af00a336d1fe41b7846252a50f567b46": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "afb5ffd7bf1e4c2991f1ae5a667c6edd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "b00d8175e4f342e9b5a81282c25e1435": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntTextModel",
      "state": {
       "description": "Index:",
       "layout": "IPY_MODEL_8bcc119125884fb58ebb7562a7c8aa0c",
       "step": 1,
       "style": "IPY_MODEL_31f37c98fe4b4a679a0209a1f97cd088",
       "value": 7
      }
     },
     "b03e9b1297854763a438cf14c2149280": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "b08bb4f84aa2454f990a24bfc5a4e31a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_01f34c2ea45747079c2832e839efbe9a",
        "IPY_MODEL_10710bc1cf6c4e9e816676cc96ffb148",
        "IPY_MODEL_063cad90fabb490384f3149065efb4f2"
       ],
       "layout": "IPY_MODEL_af00a336d1fe41b7846252a50f567b46"
      }
     },
     "b0ab5e6e814c4ab8988136263a648ef0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_e303296ddb824da4805e7b2fcf3b934b",
        "IPY_MODEL_5cec526ba8624204b65ef6b1c474cc05",
        "IPY_MODEL_10ed585367ba4ebbb20fc6e771383eec"
       ],
       "layout": "IPY_MODEL_a3cb36f9b40f420d9afa71b550faa85d"
      }
     },
     "b0e910e3188042a2af608d235d895868": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntTextModel",
      "state": {
       "description": "Index:",
       "layout": "IPY_MODEL_7c96bb1e0412458688044dffc90ad083",
       "step": 1,
       "style": "IPY_MODEL_907c7e2de77e4fc18289b299eaa09d53",
       "value": 7
      }
     },
     "b196be2fe14240b6aaa1ea17450451a3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_145b2302671046f196067e543c7dda93",
        "IPY_MODEL_e1675016048f493cbb7320e2e645e224",
        "IPY_MODEL_7f64c5ca637344f8a26b86293cab60f9"
       ],
       "layout": "IPY_MODEL_a3737ac73f134845881183dfe3bac5d3"
      }
     },
     "b275e47c95d9490e8149d8b1eaf1d0bc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "age",
        "weight",
        "income",
        "car_value",
        "debt",
        "mall_trips",
        "gender",
        "alone",
        "dwell",
        "pay_type",
        "nbhd",
        "tried"
       ],
       "description": "column:",
       "index": 8,
       "layout": "IPY_MODEL_abeb5156764344ffb79ea7db0b86bac3",
       "style": "IPY_MODEL_41055fa25d3c4e66bccddf10e387695b"
      }
     },
     "b280ac28f21241ceadf81b2af3b6f042": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "b2e589bee1b5497f9128e67927befe5e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "b3adaa0b411a483b86f8a4b547cf4ef4": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_2929431729f64c31a5c8ba4a2ee0f281",
       "outputs": [
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 1440x288 with 5 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "b526a1a96c77444c8c0e5436c2373399": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_ee9cdac4ae9a45b8ad1708b889e042c7",
       "style": "IPY_MODEL_8a37b0f37650477395c481ee22882d0b",
       "value": true
      }
     },
     "b667571702e24105b1d78e2c8199e75b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "b6cd56238cac4b11b377b6c1f993d370": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_bcc0ecf298db482aaa78a194fb0af6e2",
        "IPY_MODEL_b00d8175e4f342e9b5a81282c25e1435",
        "IPY_MODEL_8ce988846f8f48fa97d41556727f4b22"
       ],
       "layout": "IPY_MODEL_5dbc474d308e44f190c63e5b12af62f4"
      }
     },
     "b6d434e578e045bcae6d62b2c2bea3d0": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_6603881dfa374997aeaf659849d89365",
       "outputs": [
        {
         "data": {
          "text/plain": "{('No', 'Home'): 0.4682274247491639,\n ('No', 'Condo'): 0.3010033444816054,\n ('No', 'Apt'): 0.23076923076923078,\n ('Yes', 'Home'): 0.4463840399002494,\n ('Yes', 'Apt'): 0.2817955112219451,\n ('Yes', 'Condo'): 0.2718204488778055}"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "b726604cbae64d7197c8467fb3b97a46": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "b72dd6ca3c8040eeba64ad2d821a46fc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "b786b933e29c42fd8ebb716fd3098bb9": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_427598470e094c1f82698f750bd9e259",
       "outputs": [
        {
         "data": {
          "text/plain": "purchased  month\n0          3        0.303162\n           1        0.270447\n           0        0.210469\n           2        0.205016\n           4        0.010905\n1          0        0.349398\n           1        0.349398\n           3        0.168675\n           2        0.132530\nName: month, dtype: float64"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "b7b33681367242fcbd3df61b9ee0d7eb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "b7d42663e88f4d64afb26bd4adedefb0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "ba1c84ab9be6439f878cfa7e4f3e1550": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_e624a2c7c02848169742093c4dd3c354",
       "outputs": [
        {
         "data": {
          "text/plain": "purchased  gender\n0          FEMALE    620\n           MALE      297\n1          FEMALE     63\n           MALE       20\nName: gender, dtype: int64"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "ba1f56492b234c19bb6d1371fa4f2251": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "ba2761d29e534453ade84d29505b64d3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_bf79f55e905648509e9be5c8f99df7ba",
       "style": "IPY_MODEL_e539916dc95a44a3ad28a5a7faebe9ee",
       "value": true
      }
     },
     "badef4569ba14afabcd0cc00009dc218": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "month",
        "art_book",
        "gender",
        "married",
        "purchased"
       ],
       "description": "column:",
       "index": 0,
       "layout": "IPY_MODEL_68ce6c08968f4091a5628c0f60fd5b07",
       "style": "IPY_MODEL_71f1252c29374cdeb31b56dfe00979bc"
      }
     },
     "bb3da90e658442e89b9e8fe7d642545f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "bb423dd7eaf74598bab803e4ce319934": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "gender",
        "married",
        "purchased",
        "month",
        "art_book"
       ],
       "description": "column:",
       "index": 0,
       "layout": "IPY_MODEL_668f0678b82142758a7105325c0fe177",
       "style": "IPY_MODEL_c5da3adf56f041428c786812b3aad12d"
      }
     },
     "bb5a24877fb949e28827c99e409de934": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "customer",
        "gender",
        "married",
        "purchased",
        "month",
        "art_book"
       ],
       "description": "column:",
       "index": 1,
       "layout": "IPY_MODEL_f4ed05386f5f4c9cb22ef4a506ceefd3",
       "style": "IPY_MODEL_a4119728bf0d4c16ad64f253d401b801"
      }
     },
     "bc767af8160747168583e9a3d8224e20": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "bcc0ecf298db482aaa78a194fb0af6e2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_options_labels": [
        "train",
        "test"
       ],
       "description": "Data:",
       "index": 0,
       "layout": "IPY_MODEL_a55c15b446bd4e2082d5281e7fcd6866",
       "style": "IPY_MODEL_545605a4fc6941e0a63a78d070734951"
      }
     },
     "bcd199149c3048cab121761cbfc49158": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "bdf2de2849ce4ef0b4c4f632e17e3a6f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "bf79f55e905648509e9be5c8f99df7ba": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "bffc4d51378d48c698fa3ef8c1be6060": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_3b6d9468944645ef971c1912dbf96bbb",
       "style": "IPY_MODEL_90bd912671a245a28660c766cdb68656",
       "value": false
      }
     },
     "c1e819ad2de346b4a536b954d2e18eb5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "c215360a987b4c43ab491e3d4ffcbec0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "c21bfcaa6a0b4c74bd208c72b78222ba": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "c3499bb1187c43cbb1f7611a7f541493": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "c3b3309fd7b34dadb0dea171688b7444": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "customer",
        "gender",
        "married",
        "purchased",
        "month",
        "art_book"
       ],
       "description": "column:",
       "index": 4,
       "layout": "IPY_MODEL_4abcee6cf278495882c41eecaa676df4",
       "style": "IPY_MODEL_02b6c861cdaa4ef78f1e4b0b924a33f8"
      }
     },
     "c3fb4ad5c26e4f3abda67f77b16788d2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "c467faa555b44790b473a373ff10437a": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_0c89dd1c4dcf43e7b80ccea09efa05e5",
       "outputs": [
        {
         "data": {
          "text/plain": "{('No', 'Home'): 0.4682274247491639,\n ('No', 'Condo'): 0.3010033444816054,\n ('No', 'Apt'): 0.23076923076923078,\n ('Yes', 'Home'): 0.4463840399002494,\n ('Yes', 'Apt'): 0.2817955112219451,\n ('Yes', 'Condo'): 0.2718204488778055}"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "c479119310fc4b92ad972a97d90556ce": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "c48b5e896a2a4d82b5738258407d9e08": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "c4aed60ebee0410c873b8241e03c99f2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_bb5a24877fb949e28827c99e409de934",
        "IPY_MODEL_9d9e9ae64377414d932d855aefdd80e5",
        "IPY_MODEL_3b919e5d874442edb50c76ae50576585"
       ],
       "layout": "IPY_MODEL_dd51d0104a704047944c19e3fbac9512"
      }
     },
     "c554da08f4eb4040adbbbb821748461d": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_f6c0fb793447498a81021d6d77cb01d0",
       "outputs": [
        {
         "data": {
          "text/plain": "purchased  month\n0          0        0.210469\n           1        0.270447\n           2        0.205016\n           3        0.303162\n           4        0.010905\n1          0        0.349398\n           1        0.349398\n           2        0.132530\n           3        0.168675\nName: month, dtype: float64"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "c5aa20cfb4f84ed9b174cead8998433c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "c5bf2f56710b4fddaec8e15e138f9401": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_c48b5e896a2a4d82b5738258407d9e08",
       "outputs": [
        {
         "data": {
          "text/plain": "{('No', 'Home'): 0.4682274247491639,\n ('No', 'Condo'): 0.3010033444816054,\n ('No', 'Apt'): 0.23076923076923078,\n ('Yes', 'Home'): 0.4463840399002494,\n ('Yes', 'Apt'): 0.2817955112219451,\n ('Yes', 'Condo'): 0.2718204488778055}"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "c5da3adf56f041428c786812b3aad12d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "c641788819344963835c2719e080c2db": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "c6a6287b3add40929681b124eabebd28": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "gender",
        "married",
        "purchased",
        "month",
        "art_book"
       ],
       "description": "column:",
       "index": 0,
       "layout": "IPY_MODEL_e00f770289ac48f7a55fb2778972a87a",
       "style": "IPY_MODEL_7aa431be54cc4a809935acbe24911f73"
      }
     },
     "c75dc2b05009423db8ef1468651c42f1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_10f349977582472fa3b6215e4b4e1eaf",
        "IPY_MODEL_d5de31c817994bf3a5ceb144bb9bbf89",
        "IPY_MODEL_b786b933e29c42fd8ebb716fd3098bb9"
       ],
       "layout": "IPY_MODEL_c8b92f0a35bd49e5ae3ed9ed6bf465c5"
      }
     },
     "c88d2f97ce7e488fbd5e434af2aede7a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "c8b92f0a35bd49e5ae3ed9ed6bf465c5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "ca28e45bd7554952b7b3309856450e35": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "cbd0782c4ee249c5b9b83fd6348e360f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "cc1f57ddbcfc47dea9638e81ca9544e8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "cca866fd52fe494e86d049ae93508788": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "cd0311cac626469d8dade432f068f8f7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "cd07fba52ca04809a180e9d1dae4afc3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "ce05317376c84b3ea862a9e7f906d052": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "ce5b7a86e8c641c6bb6bcfb15f4df7bb": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_652cb3370e9744e1a0b841404e44ffa5",
       "outputs": [
        {
         "data": {
          "text/plain": "purchased  gender\n0          FEMALE    0.676118\n           MALE      0.323882\n1          FEMALE    0.759036\n           MALE      0.240964\nName: gender, dtype: float64"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "ced9bc49f76f4f33a681b231331a2440": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "cfc10db45b2045b0b65751bb4ab7f554": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "d05753f743254bdc9230ba0478960199": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "d094722db0284b7aa334b553a5b322d5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "d1bfcbfd964b47dd806d931b8de8358a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "d1e84c959c9b4e2091ca6bec1fe2a024": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "d301560be621446ab73297f22fe7bc1c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "d377bf904b364b5790740ab13131dafb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "d4aa809893224987a079ecc6e24c61f2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_3dcf9e06d31446e5845f493885af693d",
        "IPY_MODEL_e88806d5e0ca4c44adfd75366b5e89dc",
        "IPY_MODEL_91d025b2cee34516896654aa80378a97"
       ],
       "layout": "IPY_MODEL_3dda8463b1ea46eb8aff791ea6070f1f"
      }
     },
     "d534cd3480984310a2d052e2f29c4943": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntTextModel",
      "state": {
       "description": "Index:",
       "layout": "IPY_MODEL_ba1f56492b234c19bb6d1371fa4f2251",
       "step": 1,
       "style": "IPY_MODEL_5458d4dcc1084844897b7ee0998eba79",
       "value": 7
      }
     },
     "d5ae83b5f4bc4941aadfbb6e7d7f2bd7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_37a6b866549149b09656dedd02921376",
        "IPY_MODEL_a0aee0470c2b42bd9efaa9c5697c59ef",
        "IPY_MODEL_3b13fd11111544e598d4278e61b1d233"
       ],
       "layout": "IPY_MODEL_1484616444e5445ba9f61a5b1578bb01"
      }
     },
     "d5de31c817994bf3a5ceb144bb9bbf89": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_3e5f480b7d7841fea6f6c079cd92b4d1",
       "style": "IPY_MODEL_ae51c7e3f6234e239b01e1cbca7ad268",
       "value": true
      }
     },
     "d64c630f61e34c578a3ae8e1d6d03f99": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "d659df8633a34d2493a51fceeb589ac2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "d662028564404bedbd3808c936ffec96": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "d6ee44c6067b4aeea87e6a1d29414585": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "d8dd66535b4c476ba5693a8205c3843f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "d8f37c6817ac418b98708f01cfd17fef": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "d93b90fd6865463182be5debb12104f0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "dc3174417a6a443d9e5132b4abdaaa30": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "dc6a5741207048519d94b2d97bc863e6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_98dfb6da884e4e608416f2808e530703",
        "IPY_MODEL_aeb3aa4dd4a443c58f58613b7abbccc2",
        "IPY_MODEL_31630c5dc4a84679bfd4774d383df718"
       ],
       "layout": "IPY_MODEL_9f9dc774c8604038b0372eedc93d566a"
      }
     },
     "dd44098a560f492e9881c85c84ac8e45": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "customer",
        "gender",
        "married",
        "purchased",
        "month",
        "art_book"
       ],
       "description": "column:",
       "index": 4,
       "layout": "IPY_MODEL_dc3174417a6a443d9e5132b4abdaaa30",
       "style": "IPY_MODEL_563614adb4444c429d8989a307fe6c66"
      }
     },
     "dd51d0104a704047944c19e3fbac9512": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "dd6a3a3bd36741b392379419943a2b12": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_942fed233e6b4a33ae1fb51bd6b8a20f",
       "outputs": [
        {
         "data": {
          "text/plain": "purchased  gender\n0          FEMALE    620\n           MALE      297\n1          FEMALE     63\n           MALE       20\nName: gender, dtype: int64"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "dd7ceb67fec2410b9692c216b7682868": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "ddb56fc1d87b4d81b3a26ec2ea3bc9e6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "df2e8613437446249af8078aab4a2ff5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "e00f770289ac48f7a55fb2778972a87a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "e05ea97b82d0418ea2685ee045a32b51": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "e060fcd49a3648d0bc36ce70bbe1fead": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_9055866eac7d4a8fa3839b20ec0d0544",
       "style": "IPY_MODEL_7fe088dbd53649679d71e7f1c7ec23e5",
       "value": true
      }
     },
     "e1675016048f493cbb7320e2e645e224": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "IntTextModel",
      "state": {
       "description": "Index:",
       "layout": "IPY_MODEL_709ab5412be94b4b901967cd8371bbd7",
       "step": 1,
       "style": "IPY_MODEL_780aa9441a6140f2978d5a9ea219420b",
       "value": 7
      }
     },
     "e211310468a04b5ba95e06551c9e2c02": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "e27f1532490c43cda39cce200bab89c0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_3fd9a807146b43c78a0a75c5fea93cdd",
        "IPY_MODEL_3d32be9b4fd24accb241476f214f98b2",
        "IPY_MODEL_c5bf2f56710b4fddaec8e15e138f9401"
       ],
       "layout": "IPY_MODEL_3ea799b1e06944e3bf653dbb3b8bd929"
      }
     },
     "e28c961f2e1341449b92e0e49afae9bd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "gender",
        "married",
        "purchased",
        "month",
        "art_book"
       ],
       "description": "column:",
       "index": 0,
       "layout": "IPY_MODEL_e05ea97b82d0418ea2685ee045a32b51",
       "style": "IPY_MODEL_fb039812e40f4708933ac37619dbe861"
      }
     },
     "e303296ddb824da4805e7b2fcf3b934b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_options_labels": [
        "train",
        "test"
       ],
       "description": "Data:",
       "index": 0,
       "layout": "IPY_MODEL_232fd1a0a5e347a1a9bf2ab622f96981",
       "style": "IPY_MODEL_9871f67a94a84b2ca09c6e4dcdd97d7d"
      }
     },
     "e319bd99ecf64082ab7bd51d47cf0c50": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_badef4569ba14afabcd0cc00009dc218",
        "IPY_MODEL_a3fbe0b1ccda44dfb654a9e0b62b4898",
        "IPY_MODEL_870fe219af204ff3bf398153576097a5"
       ],
       "layout": "IPY_MODEL_c479119310fc4b92ad972a97d90556ce"
      }
     },
     "e3b3bb261c114611911290c6238264d4": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_0fadbb538c2e447887185770724bcc1d",
       "outputs": [
        {
         "data": {
          "text/plain": "{(0, 3): 0.3031624863685932,\n (0, 1): 0.27044711014176664,\n (0, 0): 0.21046892039258452,\n (0, 2): 0.2050163576881134,\n (0, 4): 0.010905125408942203,\n (1, 0): 0.3493975903614458,\n (1, 1): 0.3493975903614458,\n (1, 3): 0.1686746987951807,\n (1, 2): 0.13253012048192772}"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "e3c562c99a594a6aab98f0fc47f06efa": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "e434bf25b76040fe9bf9ffc0286355e2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "e5302758c3b34c75ac6f73609a78384e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "e539916dc95a44a3ad28a5a7faebe9ee": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "e5d6d299c7bb4edc8eb8d3e911d76e00": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "e624a2c7c02848169742093c4dd3c354": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "e6465ba66c954901bb2b36842fdfde92": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_33d589f0c2fe4845bef08fb961309dfe",
        "IPY_MODEL_d534cd3480984310a2d052e2f29c4943",
        "IPY_MODEL_b3adaa0b411a483b86f8a4b547cf4ef4"
       ],
       "layout": "IPY_MODEL_916855a4d8b74cd9b7e058e905313898"
      }
     },
     "e668523e8f9d418bb452516168f7774e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "e69f1cf6b6934210ab9c196938d1b828": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "e7327860c146401da3482f0d93b191ab": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "e7e5887ba0894a818aa2a3f848a914b9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "e88806d5e0ca4c44adfd75366b5e89dc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_67fec158443942779f596bfdd18db291",
       "style": "IPY_MODEL_29cf6e0652c34d0fb0eb7e9069ebb252",
       "value": true
      }
     },
     "e8ba5991f1e444e0b10045bd31756c2e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "ea2c910a43714e5fa58fbc79036e567b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "eb1fae16c3794d4bb6a36379d2b9862c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_c6a6287b3add40929681b124eabebd28",
        "IPY_MODEL_1e9da3afb11c4696ac8a70ff23673d42",
        "IPY_MODEL_641815a271aa496c8214ea73df71a6c6"
       ],
       "layout": "IPY_MODEL_3d0ec71ad04849f0842bb0c2e1d18a35"
      }
     },
     "ec66c1f036274a89846feba9dc66ef38": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "ece1870529864633a8b4b35381dc83ea": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "ed89b20dd3a5435fa11985a5d6fc4317": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_71fec20c493049cdb2fa18b22d9e438c",
        "IPY_MODEL_1ed6f160f4ef419b8c5bcf9a259a6737",
        "IPY_MODEL_8024e26f338e424ca328f6a6fd32650f"
       ],
       "layout": "IPY_MODEL_c5aa20cfb4f84ed9b174cead8998433c"
      }
     },
     "ed949e2fd783439b878547245f107c52": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "ee01d52c5dfa4031b6ebf36f52514202": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_e3c562c99a594a6aab98f0fc47f06efa",
       "style": "IPY_MODEL_bdf2de2849ce4ef0b4c4f632e17e3a6f",
       "value": true
      }
     },
     "ee1817255eca4366a05888dc8e9dc27d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "ee806da40e264041a3703544ab070555": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "ee9cdac4ae9a45b8ad1708b889e042c7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "ef462715b1ee4200a24d737ccc3e49f6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "efd2069ab160484586e7b73967bbe210": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "f06ba53326c943bba4ee1977b05c73e4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "gender",
        "married",
        "purchased",
        "month",
        "art_book"
       ],
       "description": "column:",
       "index": 0,
       "layout": "IPY_MODEL_f072de625ec848b19ace2e6b9d2febae",
       "style": "IPY_MODEL_0d79e13addd84753ad1e521ee21b25cd"
      }
     },
     "f072de625ec848b19ace2e6b9d2febae": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "f130508ed16a4c7bb50e04a537205577": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_6103796be78d491fbd099e1b6adcd71d",
       "style": "IPY_MODEL_92f30fbf45724d0aa9f793640f85c6da",
       "value": true
      }
     },
     "f17da91130454075ab90b2b9bdea7694": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "f19d21c104ea49c78ef048dafa12bd33": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "f20e92fca3f24789a3438062ba4f43ad": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "f26c47a1311946709fa8b91088001bcb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_f2e2d1eacc534d999183e35c23dc9122",
        "IPY_MODEL_e060fcd49a3648d0bc36ce70bbe1fead",
        "IPY_MODEL_ffa09931632b43d8b627e64b95886d7a"
       ],
       "layout": "IPY_MODEL_3e774c60a92c4da880611947ed50a561"
      }
     },
     "f2e2d1eacc534d999183e35c23dc9122": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "month",
        "art_book",
        "gender",
        "married",
        "purchased"
       ],
       "description": "column:",
       "index": 0,
       "layout": "IPY_MODEL_8fa0d81d35dd48018ac5117a157d469d",
       "style": "IPY_MODEL_e5d6d299c7bb4edc8eb8d3e911d76e00"
      }
     },
     "f4130a98651c4d188fbc71c51b728c4c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "f471172054b54c2a8c17e9342999fa4e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_ed949e2fd783439b878547245f107c52",
       "style": "IPY_MODEL_5925105c7f1b494592e88633e468692d",
       "value": true
      }
     },
     "f47164de37d04bc2a06c60501eb86cae": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "f4a6b61a7e91438ca5266b68ce38413c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_options_labels": [
        "train",
        "test"
       ],
       "description": "Data:",
       "index": 0,
       "layout": "IPY_MODEL_1dc3204444f743b1975894e8c463d870",
       "style": "IPY_MODEL_530f9c75e32d4e748bcb4f40efeab4d9"
      }
     },
     "f4ca342263414796bc3b6f59e9fc9533": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "f4ed05386f5f4c9cb22ef4a506ceefd3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "f61a66809d4649a3a095bec3281060ab": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "f6c0fb793447498a81021d6d77cb01d0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "f768ef19820a432eb2d3366e70624229": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "f79300842e5046b785febee30858e053": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_12531a35642346c594a8dffabb327388",
        "IPY_MODEL_767f177fb70e4d7493dae2df30553077",
        "IPY_MODEL_dd6a3a3bd36741b392379419943a2b12"
       ],
       "layout": "IPY_MODEL_a1db2aa2dd0f4fb2b170ba6aa4642e15"
      }
     },
     "f856d1a4a6f14ac0a51a8d0c9bc0c0eb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "f86726eb4a0d4f47b9031a2d0fe49b8d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "f86eb051b42e4eb6acfba9ed1402d18c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "fa0ac53eb1cc47c094f8c8bc5d1e0d22": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "fb039812e40f4708933ac37619dbe861": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "fb5692749d6f46f2a7efae85b49f694f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "fbc4cd35101141afb30c4edab60f382b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "fcb5de819b0644f2b449853989c98c59": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "fcb6122892e1454db0f5873837ab99e0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "fda5a0ab488945369dde21dea2c36c49": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "fe513f6df72d4aea9ac3ad89aa82f279": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_e7e5887ba0894a818aa2a3f848a914b9",
       "outputs": [
        {
         "data": {
          "text/plain": "{('No', 'Home'): 0.4682274247491639,\n ('No', 'Condo'): 0.3010033444816054,\n ('No', 'Apt'): 0.23076923076923078,\n ('Yes', 'Home'): 0.4463840399002494,\n ('Yes', 'Apt'): 0.2817955112219451,\n ('Yes', 'Condo'): 0.2718204488778055}"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "fe67460950b64569b6d6b92ff80623ab": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_41dbe8c091374b4e9b943de0b7111e0c",
       "outputs": [
        {
         "data": {
          "text/plain": "purchased  gender\n0          FEMALE    620\n           MALE      297\n1          FEMALE     63\n           MALE       20\nName: gender, dtype: int64"
         },
         "metadata": {},
         "output_type": "display_data"
        },
        {
         "data": {
          "text/plain": "purchased  gender\n0          FEMALE    620\n           MALE      297\n1          FEMALE     63\n           MALE       20\nName: gender, dtype: int64"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "ff09d1cbb0454a3881221ce10bd98a7d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "ffa09931632b43d8b627e64b95886d7a": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_3084982bd5b047399275fe95d8a0565b",
       "outputs": [
        {
         "data": {
          "text/plain": "{(0, 3): 0.31406761177753545,\n (0, 1): 0.27044711014176664,\n (0, 0): 0.21046892039258452,\n (0, 2): 0.2050163576881134,\n (1, 0): 0.3493975903614458,\n (1, 1): 0.3493975903614458,\n (1, 3): 0.1686746987951807,\n (1, 2): 0.13253012048192772}"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "ffd52a828d864b89bc1e93791e94af0c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {}
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
