{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<script>\n",
       "  var password,\n",
       "      teacher_mode,\n",
       "      isHtml;\n",
       "      \n",
       "  var class_output,\n",
       "      class_input,\n",
       "      class_answer;\n",
       "      \n",
       "  function code_toggle(e) {\n",
       "    var orig_e = e;\n",
       "    while (!e.closest(class_output).previousElementSibling.classList.contains(class_input)) {\n",
       "      e = e.closest(class_output).previousElementSibling;\n",
       "    }\n",
       "    var target = e.closest(class_output).previousElementSibling;\n",
       "    if (target.getAttribute(\"style\") == \"\" || target.getAttribute(\"style\") == null) {\n",
       "      target.style.display = \"none\";\n",
       "      orig_e.innerHTML = 'show code';\n",
       "    }\n",
       "    else {\n",
       "      target.style.removeProperty(\"display\");\n",
       "      orig_e.innerHTML = 'hide code';\n",
       "    }\n",
       "  }\n",
       "  \n",
       "  function hide_answer(e) {\n",
       "    var target = e.closest(class_answer).nextElementSibling;\n",
       "    //e.closest(class_output).previousElementSibling.style.display = \"none\";\n",
       "    if (target.getAttribute(\"style\") == \"\" || target.getAttribute(\"style\") == null) {\n",
       "      //target.style.display = \"none\";\n",
       "      e.innerHTML = 'show answer';\n",
       "      answer_block = target;\n",
       "      //if (isHtml) {\n",
       "          while (answer_block.innerHTML.indexOf(\"blacksquare<\") == -1) {\n",
       "              answer_block.style.display = \"none\";\n",
       "              answer_block = answer_block.nextElementSibling;\n",
       "          }\n",
       "      //}\n",
       "      answer_block.style.display = \"none\";\n",
       "    }\n",
       "    else if (teacher_mode) {\n",
       "        e.innerHTML = 'hide answer';\n",
       "        //target.style.removeProperty(\"display\");\n",
       "        answer_block = target;\n",
       "        //if (isHtml) {\n",
       "          while (answer_block.innerHTML.indexOf(\"blacksquare<\") == -1) {\n",
       "              answer_block.style.removeProperty(\"display\");\n",
       "              answer_block = answer_block.nextElementSibling;\n",
       "          }\n",
       "        //}\n",
       "        answer_block.style.removeProperty(\"display\");\n",
       "    }\n",
       "  }\n",
       "  \n",
       "  function done() { \n",
       "    document.getElementById(\"popup\").style.display = \"none\";\n",
       "    var input = document.getElementById(\"password\").value;\n",
       "    if (input==password) { teacher_mode=1; alert(\"Unlocked!\");}\n",
       "    else { teacher_mode=0; alert(\"Wrong password!\");}       \n",
       "  };\n",
       "\n",
       "  function unlock() {\n",
       "    document.getElementById(\"popup\").style.display = \"block\";\n",
       "  }\n",
       "  \n",
       "  $(document).ready(function() {\n",
       "    $.ajax({\n",
       "      type: \"GET\",  \n",
       "      url: \"https://raw.githubusercontent.com/ming-zhao/ming-zhao.github.io/master/data/bzan.csv\",\n",
       "      dataType: \"text\",       \n",
       "      success: function(data)  \n",
       "      {\n",
       "        var items = data.split(',');\n",
       "        var url = window.location.pathname;\n",
       "        var filename = url.substring(url.lastIndexOf('/')+1);\n",
       "        password='123';\n",
       "        for (var i = 0, len = items.length; i < len; ++i) {\n",
       "            if (filename.includes(items[i].trim()) && i%2==0 && i<items.length) {\n",
       "                password=items[i+1].trim();\n",
       "                break;\n",
       "            }\n",
       "        }\n",
       "        var code_blocks = document.getElementsByClassName('nbinput docutils container');\n",
       "        if (code_blocks[0]==null) { \n",
       "            isHtml=0;\n",
       "            code_blocks = document.getElementsByClassName('input');\n",
       "            class_output=\".output_wrapper\";\n",
       "            class_input=\"input\";\n",
       "            class_answer='.cell';\n",
       "        }\n",
       "        else { \n",
       "            isHtml=1;\n",
       "            class_output=\".nboutput\";\n",
       "            class_input=\"nbinput\";\n",
       "            class_answer=\".nboutput\";\n",
       "        }\n",
       "        \n",
       "        for (var i = 0, len = code_blocks.length; i < len; ++i) {\n",
       "          if (\n",
       "              code_blocks[i].innerHTML.indexOf(\"toggle\") !== -1 \n",
       "              || code_blocks[i].innerHTML.indexOf(\"button onclick\") !== -1\n",
       "             ) {\n",
       "            code_blocks[i].style.display = \"none\";\n",
       "          }\n",
       "        }\n",
       "        for (var i = 0, len = code_blocks.length; i < len; ++i) {\n",
       "          if (code_blocks[i].innerHTML.indexOf(\"hide_answer\") !== -1) {\n",
       "            code_blocks[i].style.display = \"none\";\n",
       "            if (isHtml) {\n",
       "              answer_block = code_blocks[i].nextElementSibling.nextElementSibling;\n",
       "              while (answer_block.innerHTML.indexOf(\"blacksquare\") == -1) {\n",
       "                  answer_block.style.display = \"none\";\n",
       "                  answer_block = answer_block.nextElementSibling;\n",
       "              }\n",
       "              answer_block.style.display = \"none\";\n",
       "            }\n",
       "            else{\n",
       "              //code_blocks[i].closest(class_answer).nextElementSibling.style.display = \"none\";\n",
       "              answer_block = code_blocks[i].closest(class_answer).nextElementSibling;\n",
       "              while (answer_block.innerHTML.indexOf(\"blacksquare\") == -1) {\n",
       "                  answer_block.style.display = \"none\";\n",
       "                  answer_block = answer_block.nextElementSibling;\n",
       "              }\n",
       "              answer_block.style.display = \"none\";              \n",
       "            }           \n",
       "          }\n",
       "        }\n",
       "      }\n",
       "    });\n",
       "  });\n",
       "</script>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "<div id=\"popup\" style=\"padding-bottom:5px; display:none;\">\n",
       "    <div>Enter Password:</div>\n",
       "    <input id=\"password\" type=\"password\"/>\n",
       "    <button onclick=\"done()\" style=\"border-radius: 12px;\">Submit</button>    \n",
       "</div>\n",
       "<button onclick=\"unlock()\" style=\"border-radius: 12px;\">Unclock</button>\n",
       "<a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%run initscript.py\n",
    "%run ./files/loadmlfuncs.py\n",
    "HTML(\"\"\"\n",
    "<div id=\"popup\" style=\"padding-bottom:5px; display:none;\">\n",
    "    <div>Enter Password:</div>\n",
    "    <input id=\"password\" type=\"password\"/>\n",
    "    <button onclick=\"done()\" style=\"border-radius: 12px;\">Submit</button>    \n",
    "</div>\n",
    "<button onclick=\"unlock()\" style=\"border-radius: 12px;\">Unclock</button>\n",
    "<a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Machine Learning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic Regression\n",
    "\n",
    "Logistic regression is a popular method for classifying individuals (although we call it regression), given the values of a set of explanatory variables. It estimates the probability that an individual is in a particular category. We will demonstrate the method by considering a book club case."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In a book club, a new title, \"The Art History of Florence\", is ready for release. The book club has sent promotion mails to a sample of customers from its customer base in two different times. Each time it randomly select 1000 customers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>month</th>\n",
       "      <th>art_book</th>\n",
       "      <th>purchased</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>customer</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1000</th>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          month  art_book  purchased\n",
       "customer                            \n",
       "996           7         1          0\n",
       "997          14         1          1\n",
       "998          27         1          0\n",
       "999           3         0          0\n",
       "1000         30         0          0"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_book_part1 = pd.read_csv(dataurl+'book_train.csv', header=0, index_col='customer')\n",
    "df_book_part2 = pd.read_csv(dataurl+'book_validation.csv', header=0, index_col='customer')\n",
    "df_book_part1.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>month</th>\n",
       "      <th>art_book</th>\n",
       "      <th>purchased</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>customer</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1996</th>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1997</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1998</th>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1999</th>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000</th>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          month  art_book  purchased\n",
       "customer                            \n",
       "1996          9         1          1\n",
       "1997          9         0          0\n",
       "1998         28         1          0\n",
       "1999          6         1          0\n",
       "2000         10         0          0"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_book_part2.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Book club has collected several variables for all 2000 customers as follows:\n",
    "\n",
    "- month: months to the customer's last purchase when promotion mail is sent\n",
    "\n",
    "- art_book: number of art books the customer purchased before\n",
    "\n",
    "- purchased: if s/he paid for the new title \"The Art History of Florence\"\n",
    "\n",
    "It costs the book club <span>&#36;</span>1 for sending a mail and generates <span>&#36;</span>7 profit for selling the book. After two promotions, an analyst in the book club realizes that the store actually lost money in both promotions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "net profit for the 1st promotion: -419\n",
      "net profit for the 2nd promotion: -433\n"
     ]
    }
   ],
   "source": [
    "def calc_profit(df):\n",
    "    mail_cost = 1\n",
    "    selling_profit = 7\n",
    "    profit = df.purchased.sum() * 7 - df.month.count()*mail_cost\n",
    "    return profit\n",
    "\n",
    "print('net profit for the 1st promotion:', calc_profit(df_book_part1)) \n",
    "print('net profit for the 2nd promotion:', calc_profit(df_book_part2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The manager believes that the book club should build a predictive model to predict each customer's probability of purchasing, and then send out promotion mail only if such a probability is high enough.\n",
    "\n",
    "- can we derive a prediction model after collecting the data from the first promotion? \n",
    "\n",
    "- can this prediction model improve the second promotion?\n",
    "\n",
    "We expect this prediction model \n",
    "\n",
    "- uses `month` and `art_book` to predict `purchased`\n",
    "\n",
    "which suggests a regression equation `purchased` $\\sim$ `month` $+$ `art_book`. However, the $y$ variable `purchased` is either 0 or 1, and a scatter plot between `purchased` and `month` ($y$ vs $x$) shows as follows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_book_part1.plot.scatter(x='month', y='purchased')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The graph is against many linear regression assumptions such as\n",
    "\n",
    "- there is no linear relationship between independent and dependent variables.\n",
    "\n",
    "- error term is probably not normally distributed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Instead of using the binary variable (purchased or not), we may consider **purchasing probability** $p$ as dependent variable in a regression equation such as\n",
    "\n",
    "\\begin{align}\n",
    "p &= \\beta_0 + \\beta_1 \\times \\text{month} + \\beta_2 \\times \\text{art_book}\n",
    "\\end{align}\n",
    "\n",
    "\n",
    "Although $p$ is continuous, we still cannot run a linear regression on $p$ because it is bounded in range $[0,1]$. In linear regression, the dependent variable should be able to take any value in range $[-\\infty, +\\infty]$.\n",
    "\n",
    "We introduce **odds** and **utility**\n",
    "\n",
    "\\begin{align}\n",
    "\\text{odds} &= \\frac{p}{1-p} \\nonumber \\\\\n",
    "\\text{utility} &= \\log(\\text{odds}) \\nonumber \\\\\n",
    "\\end{align}\n",
    "\n",
    "Note that **utility** is in $[-\\infty, +\\infty]$. Now a regression equation can be used\n",
    "\n",
    "\\begin{align}\n",
    "\\text{utility} &= \\beta_0 + \\beta_1 \\times \\text{month} + \\beta_2 \\times \\text{art_book}\n",
    "\\end{align}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p = np.linspace(0,1,100)\n",
    "odds = p / (1-p)\n",
    "utility = np.log(odds)\n",
    "\n",
    "plt.subplots(1, 2, figsize=(12,5))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(p, odds)\n",
    "plt.xlabel('$p$')\n",
    "plt.ylabel('odds')\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(p, utility)\n",
    "plt.xlabel('$p$')\n",
    "plt.ylabel('utility')\n",
    "\n",
    "plt.show()\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In practice, we can simply use a typical type of regression, logistic regression, with binary dependent variable. Statistical tools will perform all the transformation for us. In python, we can use either `statmodels` which provides statistical summary or `sklearn` package."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.251466\n",
      "         Iterations 7\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Logit Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>     <td>purchased</td>    <th>  No. Observations:  </th>  <td>  1000</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>               <td>Logit</td>      <th>  Df Residuals:      </th>  <td>   997</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>               <td>MLE</td>       <th>  Df Model:          </th>  <td>     2</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>          <td>Fri, 02 Aug 2019</td> <th>  Pseudo R-squ.:     </th>  <td>0.1209</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>              <td>16:08:02</td>     <th>  Log-Likelihood:    </th> <td> -251.47</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>converged:</th>           <td>True</td>       <th>  LL-Null:           </th> <td> -286.04</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th> </th>                      <td> </td>        <th>  LLR p-value:       </th> <td>9.698e-16</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>        <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>    <td>   -2.2256</td> <td>    0.239</td> <td>   -9.315</td> <td> 0.000</td> <td>   -2.694</td> <td>   -1.757</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>month</th>    <td>   -0.0707</td> <td>    0.019</td> <td>   -3.677</td> <td> 0.000</td> <td>   -0.108</td> <td>   -0.033</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>art_book</th> <td>    0.9891</td> <td>    0.135</td> <td>    7.345</td> <td> 0.000</td> <td>    0.725</td> <td>    1.253</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                           Logit Regression Results                           \n",
       "==============================================================================\n",
       "Dep. Variable:              purchased   No. Observations:                 1000\n",
       "Model:                          Logit   Df Residuals:                      997\n",
       "Method:                           MLE   Df Model:                            2\n",
       "Date:                Fri, 02 Aug 2019   Pseudo R-squ.:                  0.1209\n",
       "Time:                        16:08:02   Log-Likelihood:                -251.47\n",
       "converged:                       True   LL-Null:                       -286.04\n",
       "                                        LLR p-value:                 9.698e-16\n",
       "==============================================================================\n",
       "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "const         -2.2256      0.239     -9.315      0.000      -2.694      -1.757\n",
       "month         -0.0707      0.019     -3.677      0.000      -0.108      -0.033\n",
       "art_book       0.9891      0.135      7.345      0.000       0.725       1.253\n",
       "==============================================================================\n",
       "\"\"\""
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from statsmodels.api import add_constant\n",
    "from statsmodels.formula.api import Logit\n",
    "X = add_constant(df_book_part1[['month','art_book']])\n",
    "y = df_book_part1['purchased']\n",
    "model = Logit(y, X)\n",
    "model.fit().summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The signs of the coefficients indicate whether the probability of purchasing the book increases or decreases when these variables increases. For example, the probability of purchasing the book decrease as `month` increase (because of its minus sign) and increase as `art_book` increase (because of its plus sign).\n",
    "\n",
    "However, you have to use caution when interpreting the magnitudes of the coefficients. For example, the absolute value of coefficient of `month` is smaller than `art_book` because `month` generally have larger values than `art_book`.\n",
    "\n",
    "The value $\\exp$(coefficient) is more interpretable. For example, if `art_book` increases 1, the odds of purchasing the book increase by a factor about $\\exp(0.9888)$. So, you should be on the lookout for values well above or below 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "intercept= [-2.22563221] \n",
      "coefficient = [[-0.07071734  0.98904918]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn import linear_model\n",
    "\n",
    "X = df_book_part1[['month','art_book']]\n",
    "y = df_book_part1['purchased']\n",
    "\n",
    "clf = linear_model.LogisticRegression(C=1e5, solver='lbfgs')\n",
    "clf.fit(X, y)\n",
    "print('intercept=', clf.intercept_, '\\ncoefficient =', clf.coef_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The classification matrix is"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "labels = clf.predict(df_book_part1[['month','art_book']])\n",
    "mat = confusion_matrix(df_book_part1['purchased'], labels)\n",
    "sns.heatmap(np.flip(mat), square=True, annot=True, fmt='d', cbar=False,\n",
    "            xticklabels=[1,0], yticklabels=[1,0])\n",
    "plt.xlabel('predicted label')\n",
    "plt.ylabel('true label');\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After we have obtained $\\beta_0, \\beta_1$ and $\\beta_2$, we can use equation $(2)$ for our validation data to evaluate its utility. Then, the probability can be derived by\n",
    "\n",
    "\\begin{align}\n",
    "p = \\frac{\\exp(\\text{utility})}{1+\\exp(\\text{utility})} \\nonumber\n",
    "\\end{align}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "utility = np.linspace(-10,10,100)\n",
    "p = np.exp(utility) / (1 + np.exp(utility))\n",
    "\n",
    "plt.subplots(1, 1, figsize=(12,5))\n",
    "plt.plot(utility, p)\n",
    "plt.xlabel('utility')\n",
    "plt.ylabel('$p$')\n",
    "plt.show()\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In general, our decision can be made based on a threshold value 0.5. That is, if the probability that a customer may purchase the book is greater than 0.5, we send a mail.\n",
    "\n",
    "However, in the book club case, it has a simple break-even point where the cost-profit ratio is $1/7$. Therefore, our strategy can be designed based on this ratio as follows. If the probability that a customer may purchase the book is greater than $1/7$, we send a mail, otherwise we do not.\n",
    "\n",
    "We prefer to use `sklearn` because it provides capability to predict the probability directly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>month</th>\n",
       "      <th>art_book</th>\n",
       "      <th>purchased</th>\n",
       "      <th>purchase_prob</th>\n",
       "      <th>send</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>customer</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1001</th>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.012778</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1002</th>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.044182</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1003</th>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.029354</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1004</th>\n",
       "      <td>27</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.041251</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1005</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.179542</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          month  art_book  purchased  purchase_prob   send\n",
       "customer                                                  \n",
       "1001         30         0          0       0.012778  False\n",
       "1002         12         0          0       0.044182  False\n",
       "1003         18         0          0       0.029354  False\n",
       "1004         27         1          0       0.041251  False\n",
       "1005          4         1          0       0.179542   True"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_book_part2['purchase_prob'] = clf.predict_proba(df_book_part2[['month','art_book']])[:,1]\n",
    "df_book_part2['send'] = df_book_part2['purchase_prob'] > 1/7\n",
    "df_book_part2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Based on our prediction model, we should send 128 mails.\n",
      "We would expect receiving 38 orders and our profit is $138.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_mail_send = df_book_part2[df_book_part2['send']].shape[0]\n",
    "num_purchased = df_book_part2[df_book_part2['send'] & df_book_part2['purchased'] == 1].shape[0]\n",
    "profit = num_purchased * 7 - num_mail_send\n",
    "print('Based on our prediction model, we should send {} mails.'.format(num_mail_send))\n",
    "print('We would expect receiving {} orders and our profit is ${}.'.format(num_purchased, profit))\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Naive Bayes\n",
    "\n",
    "Naive Bayes models are a group of extremely fast and simple classification algorithms that are often suitable for very high-dimensional datasets. Because they are so fast and have so few tunable parameters, they end up being very useful as a quick-and-dirty baseline for a classification problem. This section will focus on an intuitive explanation of how naive Bayes classifiers work."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Naive Bayes classifiers are built on Bayesian classification methods. These rely on Bayes's theorem, which is an equation describing the relationship of conditional probabilities of statistical quantities. \n",
    "\n",
    "In Bayesian classification, we're interested in finding the probability of a label given some observed features, which we can write as $P(C~|~{\\rm features})$. Bayes's theorem tells us how to express this in terms of quantities we can compute more directly:\n",
    "\n",
    "$$\n",
    "P(C~|~{\\rm features}) = \\frac{P({\\rm features}~|~C)P(C)}{P({\\rm features})}\n",
    "$$\n",
    "\n",
    "If we are trying to decide between two labels — let's call them $C_1$ and $C_2$ — then one way to make this decision is to compute the ratio of the posterior probabilities for each label:\n",
    "\n",
    "$$\n",
    "\\frac{P(C_1~|~{\\rm features})}{P(C_2~|~{\\rm features})} = \\frac{P({\\rm features}~|~C_1)}{P({\\rm features}~|~C_2)}\\frac{P(C_1)}{P(C_2)}\n",
    "$$\n",
    "\n",
    "All we need now is some model by which we can compute $P({\\rm features}~|~C_i)$ for each label. Such a model is called a *generative model* because it specifies the hypothetical random process that generates the data.\n",
    "\n",
    "Specifying this generative model for each label is the main piece of the training of such a Bayesian classifier. The general version of such a training step is a very difficult task, but we can make it simpler through the use of some simplifying assumptions about the form of this model.\n",
    "\n",
    "This is where the \"naive\" in \"naive Bayes\" comes in: if we make very naive assumptions about the generative model for each label, we can find a rough approximation of the generative model for each class, and then proceed with the Bayesian classification."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Bernoulli Naive Bayes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are 856 people who have either tried or not tried a company's new frozen lasagna product. The data includes the categorical dependent variable `tried` and several other explanatory variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>weight</th>\n",
       "      <th>income</th>\n",
       "      <th>car_value</th>\n",
       "      <th>debt</th>\n",
       "      <th>mall_trips</th>\n",
       "      <th>gender</th>\n",
       "      <th>alone</th>\n",
       "      <th>dwell</th>\n",
       "      <th>pay_type</th>\n",
       "      <th>nbhd</th>\n",
       "      <th>tried</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>person</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>48</td>\n",
       "      <td>175</td>\n",
       "      <td>65500</td>\n",
       "      <td>2190</td>\n",
       "      <td>3510</td>\n",
       "      <td>7</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>Home</td>\n",
       "      <td>Hourly</td>\n",
       "      <td>East</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>33</td>\n",
       "      <td>202</td>\n",
       "      <td>29100</td>\n",
       "      <td>2110</td>\n",
       "      <td>740</td>\n",
       "      <td>4</td>\n",
       "      <td>Female</td>\n",
       "      <td>No</td>\n",
       "      <td>Condo</td>\n",
       "      <td>Hourly</td>\n",
       "      <td>East</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>51</td>\n",
       "      <td>188</td>\n",
       "      <td>32200</td>\n",
       "      <td>5140</td>\n",
       "      <td>910</td>\n",
       "      <td>1</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>Condo</td>\n",
       "      <td>Salaried</td>\n",
       "      <td>East</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>56</td>\n",
       "      <td>244</td>\n",
       "      <td>19000</td>\n",
       "      <td>700</td>\n",
       "      <td>1620</td>\n",
       "      <td>3</td>\n",
       "      <td>Female</td>\n",
       "      <td>No</td>\n",
       "      <td>Home</td>\n",
       "      <td>Hourly</td>\n",
       "      <td>West</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>28</td>\n",
       "      <td>218</td>\n",
       "      <td>81400</td>\n",
       "      <td>26620</td>\n",
       "      <td>600</td>\n",
       "      <td>3</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>Apt</td>\n",
       "      <td>Salaried</td>\n",
       "      <td>West</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        age  weight  income  car_value  debt  mall_trips  gender alone  dwell  \\\n",
       "person                                                                          \n",
       "1        48     175   65500       2190  3510           7    Male    No   Home   \n",
       "2        33     202   29100       2110   740           4  Female    No  Condo   \n",
       "3        51     188   32200       5140   910           1    Male    No  Condo   \n",
       "4        56     244   19000        700  1620           3  Female    No   Home   \n",
       "5        28     218   81400      26620   600           3    Male    No    Apt   \n",
       "\n",
       "        pay_type  nbhd tried  \n",
       "person                        \n",
       "1         Hourly  East    No  \n",
       "2         Hourly  East   Yes  \n",
       "3       Salaried  East    No  \n",
       "4         Hourly  West    No  \n",
       "5       Salaried  West   Yes  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_lasagna = pd.read_csv(dataurl+'lasagna.csv', header=0, index_col='person')\n",
    "df_lasagna.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the Naive Bayes method, numeric predictors must be binned, i.e., made categorical. For this example, each numeric variable has been binned by its quartiles as shown below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>weight</th>\n",
       "      <th>income</th>\n",
       "      <th>car_value</th>\n",
       "      <th>debt</th>\n",
       "      <th>mall_trips</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.00</th>\n",
       "      <td>22.0</td>\n",
       "      <td>142.0</td>\n",
       "      <td>2600.0</td>\n",
       "      <td>130.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.25</th>\n",
       "      <td>31.0</td>\n",
       "      <td>174.0</td>\n",
       "      <td>24475.0</td>\n",
       "      <td>2110.0</td>\n",
       "      <td>560.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.50</th>\n",
       "      <td>37.5</td>\n",
       "      <td>190.0</td>\n",
       "      <td>39950.0</td>\n",
       "      <td>4175.0</td>\n",
       "      <td>1020.0</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.75</th>\n",
       "      <td>46.0</td>\n",
       "      <td>210.0</td>\n",
       "      <td>58225.0</td>\n",
       "      <td>7717.5</td>\n",
       "      <td>1972.5</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.00</th>\n",
       "      <td>64.0</td>\n",
       "      <td>258.0</td>\n",
       "      <td>190500.0</td>\n",
       "      <td>33870.0</td>\n",
       "      <td>8960.0</td>\n",
       "      <td>17.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       age  weight    income  car_value    debt  mall_trips\n",
       "0.00  22.0   142.0    2600.0      130.0     0.0         0.0\n",
       "0.25  31.0   174.0   24475.0     2110.0   560.0         3.0\n",
       "0.50  37.5   190.0   39950.0     4175.0  1020.0         4.0\n",
       "0.75  46.0   210.0   58225.0     7717.5  1972.5         7.0\n",
       "1.00  64.0   258.0  190500.0    33870.0  8960.0        17.0"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_quantile = df_lasagna.quantile([0, .25, .5, .75, 1])\n",
    "df_quantile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>weight</th>\n",
       "      <th>income</th>\n",
       "      <th>car_value</th>\n",
       "      <th>debt</th>\n",
       "      <th>mall_trips</th>\n",
       "      <th>gender</th>\n",
       "      <th>alone</th>\n",
       "      <th>dwell</th>\n",
       "      <th>pay_type</th>\n",
       "      <th>nbhd</th>\n",
       "      <th>tried</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>person</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>Home</td>\n",
       "      <td>Hourly</td>\n",
       "      <td>East</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Female</td>\n",
       "      <td>No</td>\n",
       "      <td>Condo</td>\n",
       "      <td>Hourly</td>\n",
       "      <td>East</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>Condo</td>\n",
       "      <td>Salaried</td>\n",
       "      <td>East</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>Female</td>\n",
       "      <td>No</td>\n",
       "      <td>Home</td>\n",
       "      <td>Hourly</td>\n",
       "      <td>West</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>Apt</td>\n",
       "      <td>Salaried</td>\n",
       "      <td>West</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        age  weight  income  car_value  debt  mall_trips  gender alone  dwell  \\\n",
       "person                                                                          \n",
       "1         3       1       3          1     3           3    Male    No   Home   \n",
       "2         1       2       1          1     1           2  Female    No  Condo   \n",
       "3         3       1       1          2     1           0    Male    No  Condo   \n",
       "4         3       3       0          0     2           1  Female    No   Home   \n",
       "5         0       3       3          3     1           1    Male    No    Apt   \n",
       "\n",
       "        pay_type  nbhd tried  \n",
       "person                        \n",
       "1         Hourly  East    No  \n",
       "2         Hourly  East   Yes  \n",
       "3       Salaried  East    No  \n",
       "4         Hourly  West    No  \n",
       "5       Salaried  West   Yes  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for col in df_lasagna.columns:\n",
    "    if df_lasagna[col].dtypes == 'int64': \n",
    "        df_lasagna[col] = pd.cut(df_lasagna[col], bins=round(df_quantile[col])-[1,1,1,1,0], labels=False)\n",
    "df_lasagna.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We partition data into training and testing datasets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_lasagna_train = df_lasagna.iloc[:700]\n",
    "df_lasagna_test = df_lasagna.iloc[700:]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We fit a frequency count based on the training data, which provides the probability of a feature given an individual's class. For example, person 1 has value 'No' for `tried` and has dwell 'Home'. We obtain a probability\n",
    "\n",
    "\\begin{align}\n",
    "p(\\text{dwell $=$ 'Home'}|\\text{No}) = \\frac{\\text{# of persons whose dwell $=$ 'Home' and tried $=$ 'No'}}{\\text{# of persons whose tried $=$ 'No'}} = 0.468 \\nonumber\n",
    "\\end{align}\n",
    "\n",
    "The value ('No', 'Home'): 0.468 shows that, if a customer did not try the lasagna product, the probability of his/her dwell type being Home is 0.468."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "751ef4f69ae04fe69ff2ee6db52197f3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(Dropdown(description='column:', index=8, options=('age', 'weight', 'income', 'car_value'…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def frequency_count(col, normalize):\n",
    "    return dict(df_lasagna_train.groupby('tried')[col].value_counts(normalize=normalize))\n",
    "\n",
    "interact(frequency_count,\n",
    "         col=widgets.Dropdown(options=df_lasagna_train.columns, value='dwell', description='column:',disabled=False),\n",
    "         normalize=widgets.Checkbox(value=True, description='normalize',disabled=False)\n",
    "        );"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Similarly, we can calculate\n",
    "\n",
    "\\begin{align}\n",
    "p(\\text{dwell $=$ 'Home'}|\\text{Yes}), p(\\text{age = '3'}|\\text{No}), p(\\text{income = '2'}|\\text{Yes}), \\nonumber\n",
    "\\end{align}\n",
    "\n",
    "and so on. In summary, we have $p(\\text{feature}|\\text{No})$ and $p(\\text{feature}|\\text{Yes})$ for each possible feature of customers, which can be considered as a feature dictionary.\n",
    "\n",
    "With this feature dictionary, we want to obtain probabilities\n",
    "\\begin{align}\n",
    "p(\\text{person 1}|\\text{No}) \\text{ and } p(\\text{person 1}|\\text{Yes}) \\nonumber\n",
    "\\end{align}\n",
    "\n",
    "where the probability $p(\\text{person 1}|\\text{No})$ can be interpret as\n",
    "\n",
    "- if a person did not want to try the lasagna product, s/he has probability $p(\\text{person 1}|\\text{No})$ being person 1.\n",
    "\n",
    "Then our prediction is as simple as follows\n",
    "\n",
    "- If $p(\\text{person 1}|\\text{No}) > p(\\text{person 1}|\\text{Yes})$ then we prediction the person will **not** try the lasagna production\n",
    "\n",
    "- Otherwise, we prediction the person will try the lasagna production.\n",
    "\n",
    "Here is how probabilities\n",
    "\\begin{align}\n",
    "p(\\text{person 1}|\\text{No}) \\text{ and } p(\\text{person 1}|\\text{Yes}) \\nonumber\n",
    "\\end{align}\n",
    "\n",
    "are derived. For example, for the first person\n",
    "\n",
    "\\begin{align}\n",
    "p(\\text{person 1}|\\text{No}) = & p(\\text{age}=3|\\text{No}) \\times p(\\text{weight}=1|\\text{No}) \\times \\cdots \\times\\nonumber \\\\\n",
    "& p(\\text{pay_type $=$ hourly}|\\text{No}) \\times p(\\text{nbhd $=$ East}|\\text{No}) \\nonumber\n",
    "\\end{align}\n",
    "\n",
    "and\n",
    "\n",
    "\\begin{align}\n",
    "p(\\text{person 1}|\\text{Yes}) = & p(\\text{age}=3|\\text{Yes}) \\times p(\\text{weight}=1|\\text{Yes}) \\times \\cdots \\times \\nonumber \\\\\n",
    "& p(\\text{pay_type $=$ hourly}|\\text{Yes}) \\times p(\\text{nbhd $=$ East}|\\text{Yes}) \\nonumber\n",
    "\\end{align}\n",
    "\n",
    "Note that we assume all the features are independent so that a simple multiplication can be applied (that is why this method is called naive). Thus, $p(\\text{person 1}|\\text{No})$ is the probability to have the exactly same features as person 1 if a random person did not want to try the lasagna product."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>weight</th>\n",
       "      <th>income</th>\n",
       "      <th>car_value</th>\n",
       "      <th>debt</th>\n",
       "      <th>mall_trips</th>\n",
       "      <th>gender</th>\n",
       "      <th>alone</th>\n",
       "      <th>dwell</th>\n",
       "      <th>pay_type</th>\n",
       "      <th>nbhd</th>\n",
       "      <th>tried</th>\n",
       "      <th>prediction</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>person</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>Home</td>\n",
       "      <td>Hourly</td>\n",
       "      <td>East</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Female</td>\n",
       "      <td>No</td>\n",
       "      <td>Condo</td>\n",
       "      <td>Hourly</td>\n",
       "      <td>East</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>Condo</td>\n",
       "      <td>Salaried</td>\n",
       "      <td>East</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>Female</td>\n",
       "      <td>No</td>\n",
       "      <td>Home</td>\n",
       "      <td>Hourly</td>\n",
       "      <td>West</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>Apt</td>\n",
       "      <td>Salaried</td>\n",
       "      <td>West</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        age  weight  income  car_value  debt  mall_trips  gender alone  dwell  \\\n",
       "person                                                                          \n",
       "1         3       1       3          1     3           3    Male    No   Home   \n",
       "2         1       2       1          1     1           2  Female    No  Condo   \n",
       "3         3       1       1          2     1           0    Male    No  Condo   \n",
       "4         3       3       0          0     2           1  Female    No   Home   \n",
       "5         0       3       3          3     1           1    Male    No    Apt   \n",
       "\n",
       "        pay_type  nbhd tried prediction  \n",
       "person                                   \n",
       "1         Hourly  East    No        Yes  \n",
       "2         Hourly  East   Yes         No  \n",
       "3       Salaried  East    No         No  \n",
       "4         Hourly  West    No         No  \n",
       "5       Salaried  West   Yes        Yes  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def predict(df):\n",
    "    df['prediction'] = ['No' \n",
    "        if np.prod([frequency_count(col, True)[('No',df.iloc[row][col])]\n",
    "                   for col in df.columns if col not in ['tried','prediction']]) > \\\n",
    "           np.prod([frequency_count(col, True)[('Yes',df.iloc[row][col])]\n",
    "                   for col in df.columns if col not in ['tried','prediction']])\\\n",
    "        else 'Yes'\n",
    "                   for row in range(df.shape[0])]\n",
    "\n",
    "predict(df_lasagna_train)\n",
    "df_lasagna_train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The classification matrix of training data is"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>tried</th>\n",
       "      <th>No</th>\n",
       "      <th>Yes</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>prediction</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>No</th>\n",
       "      <td>250</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Yes</th>\n",
       "      <td>49</td>\n",
       "      <td>320</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "tried        No  Yes\n",
       "prediction          \n",
       "No          250   81\n",
       "Yes          49  320"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_lasagna_train.groupby(['prediction','tried']).size().unstack(level=1, fill_value=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The feature dictionary can be used in testing data and its classification matrix is"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>tried</th>\n",
       "      <th>No</th>\n",
       "      <th>Yes</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>prediction</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>No</th>\n",
       "      <td>56</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Yes</th>\n",
       "      <td>6</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "tried       No  Yes\n",
       "prediction         \n",
       "No          56   21\n",
       "Yes          6   73"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict(df_lasagna_test)\n",
    "df_lasagna_test.groupby(['prediction','tried']).size().unstack(level=1, fill_value=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Multinomial Naive Bayes\n",
    "\n",
    "In multinomial naive Bayes, the features are assumed to be generated from a simple multinomial distribution. \n",
    "\n",
    "The multinomial distribution describes the probability of observing counts among a number of categories, and thus multinomial naive Bayes is most appropriate for features that represent counts or count rates.\n",
    "\n",
    "The idea is precisely the same as before, except that instead of modeling the data distribution with the best-fit Gaussian, we model the data distribution with a best-fit multinomial distribution."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One place where multinomial naive Bayes is often used is in text classification, where the features are related to word counts or frequencies within the documents to be classified.\n",
    "\n",
    "Here we will use the sparse word count features from the 20 Newsgroups corpus to show how we might classify these short documents into categories."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['alt.atheism',\n",
       " 'comp.graphics',\n",
       " 'comp.os.ms-windows.misc',\n",
       " 'comp.sys.ibm.pc.hardware',\n",
       " 'comp.sys.mac.hardware',\n",
       " 'comp.windows.x',\n",
       " 'misc.forsale',\n",
       " 'rec.autos',\n",
       " 'rec.motorcycles',\n",
       " 'rec.sport.baseball',\n",
       " 'rec.sport.hockey',\n",
       " 'sci.crypt',\n",
       " 'sci.electronics',\n",
       " 'sci.med',\n",
       " 'sci.space',\n",
       " 'soc.religion.christian',\n",
       " 'talk.politics.guns',\n",
       " 'talk.politics.mideast',\n",
       " 'talk.politics.misc',\n",
       " 'talk.religion.misc']"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.datasets import fetch_20newsgroups\n",
    "\n",
    "data = fetch_20newsgroups()\n",
    "display(data.target_names)\n",
    "\n",
    "# choose a subset categories to learn\n",
    "categories = ['talk.religion.misc', \n",
    "              'soc.religion.christian',\n",
    "              'sci.space',\n",
    "              'comp.graphics']\n",
    "\n",
    "train = fetch_20newsgroups(subset='train', categories=categories)\n",
    "test = fetch_20newsgroups(subset='test', categories=categories)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here is a representative entry from the data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "From: dmcgee@uluhe.soest.hawaii.edu (Don McGee)\n",
      "Subject: Federal Hearing\n",
      "Originator: dmcgee@uluhe\n",
      "Organization: School of Ocean and Earth Science and Technology\n",
      "Distribution: usa\n",
      "Lines: 10\n",
      "\n",
      "\n",
      "Fact or rumor....?  Madalyn Murray O'Hare an atheist who eliminated the\n",
      "use of the bible reading and prayer in public schools 15 years ago is now\n",
      "going to appear before the FCC with a petition to stop the reading of the\n",
      "Gospel on the airways of America.  And she is also campaigning to remove\n",
      "Christmas programs, songs, etc from the public schools.  If it is true\n",
      "then mail to Federal Communications Commission 1919 H Street Washington DC\n",
      "20054 expressing your opposition to her request.  Reference Petition number\n",
      "\n",
      "2493.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(train.data[5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWgAAAFoCAYAAAB65WHVAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzt3XecFPX9x/HX+6jS7D0qaiyxICgoKEFENPZYImjssWsSSyTRxBZbrD9jr4nYW2LFhmIhighIEcUukqioWCkq5e7z+2Pm4IArK+zuzB3v5+Nxj9udnd15z5XPfvc73/mOIgIzM8ufiqwDmJlZ7VygzcxyygXazCynXKDNzHLKBdrMLKdcoM3McsoF2swsp1ygzcxyygXazCynmmcdwPLl+yE3NslTS5fZ9dysI5RMZVVV1hFKokLKOkLJzJr5UUE75xa0mVlOuUCbmeWUC7SZWU65QJuZ5ZQLtJlZTrlAm5nllAu0mVlOuUCbmeWUC7SZWU65QJuZ5ZQLtJlZTrlAm5nllAu0mVlOuUCbmeWUC7SZWU65QJuZ5ZQLtJlZTrlAm5nllAu0mVlOuUCbmeWUC7SZWU65QJuZ5ZQLtJXMzNlzOOCiO+l3/m3sfe5Arh300nyPX3jvEHqcdOVCz3t69Dt0Pu4y3pj0abmiFtXSS3fg7ruu57VxzzFu7LNstdXmWUdabDfdeBmffDSOsWOGZB2lJCoqKhjxypM8+ODArKPMxwW6EZA0UNKvalm+mqR/ZZGpEC2bN+OmE/blvr8czL1/PohhEz7ktYmfAPDGpE+Z9v3MhZ4z44dZ3P38aDbtuGq54xbNZZedzeCnn6fTZtvRtdsveOut97KOtNhuu+0+dt3tgKxjlMzvfnd4Ln9PLtBlpETRfuYR8UlELFS480ISbVq3BGBOZRVzKqsQorKqissfGMqJe/Va6DnXPPoSh+7QjZYtmpU7blG0b9+On/fciltuuQeA2bNn8+23UzNOtfj+8+IrfPX1N1nHKInVV1+VnXfenn/eclfWURbSJAu0pIMlvSZpnKTbJa0laUi6bIikNdP1Bkq6TtJzkj6QtK2kf0p6U9LAGq83XdJlkkanz1+xlm2uKOnpdJ0bJE2StIKkjunrXQuMBtZItzlK0huS/lrjNT6UdJGkEenXT2tsopekYWnOX6Xrd5T0enq7maRLJY1P9/N36fILJU1Il11aip93fSqrquh3wW30+dN1dN9wLTZde1XueX4s23ZalxWXbjffum/97zM++3oavTZdt9wxi2bttddkypSvuOmm/+OV4U9w3XUX06bNUlnHsnpcdunZnHba+VRVRdZRFtLkCrSkjYG/AH0iYjPgBOBq4LaI6ATcCdTs+FwW6AOcBDwKXA5sDGwqqXO6TltgdERsDrwAnFXLps8Cnk3XeRBYs8ZjG6Tb7xIRk4C/RERXoBOwraRONdadGhFbppn/XmP5qkBPYDfgwlq2fxSwNtClej8lLQfsBWycLjuvjp/ZUekbxqh/DBpa2yqLrFlFBff9+WCeOv8oXv/wU1599yOeHvM2+/fuMt96VVXBJf96npP32bao2y+35s2b06XLJtx4421s1X1nvpvxHQMGHJ91LKvDLrtsz+dTvmDMmPFZR6lVkyvQJMX2XxHxBUBEfAX0AKo/v9xOUuiqPRoRAYwHPouI8RFRBbwBdEzXqQLuTW/fscDzq/UE7km3+STwdY3HJkXE8Br3+0kaDYwheTPYqMZjd9f43qPG8ocioioiJgAr17L9vsD1ETGnxn5PBX4Abpa0N/BdLc8jIm6MiK4R0fXw3RbudiiGDm1a03X9nzDynf/yvynfsPtZ/2Dn02/ih1mz2f2sfzBj5ize/+QLjrj8PnY+/SbGT5zMidc/1OgOFH788WQ++ngyI0eOBeCBBx+nS+dNMk5lddm6Rzd223VH3nn7Ze64/Rq2670NA29Z+MB1VppnHaAEBDT0WaXm49VHqqpq3K6+X9fPp7bXVz3bmzF3JWlt4BSgW0R8nXaltK7jtWvLWde2FtrviJgjaUtge2A/4Lckb2Bl8dW072jerIIObVrzw6zZvPLWfzlsx24MufDYuev0OOlKHv3r4QA8f8m8lubhl9/LyXtvy8ZrrVKuuEXx2WdT+Oijyay/3jq88+4HbLfdNrz55rtZx7I6nH7GhZx+RvKBtFevHpx00tEcetjvM041T1NsQQ8haaEuD5B+zB9GUqAADgBe/JGvWQFUH4z7dR3PfxHol25zR5Kuk9p0ICnY30paGdh5gcf71/j+8o/IOBg4RlLzNMNyktoBS0fE48CJQOf6XqDYvvh2Bkf+/T72Pe9WDrjoTrr/bK1G3b9cqJNOOoOBA69i1MjBbNZpYy66+OqsIy22O26/hheHPsIG66/Lhx+M4rBD92v4SbbYmlwLOiLekHQ+8IKkSpJuhN8D/5Q0AJgCHPYjX3YGsLGkV4FvSYuopGPSbV4P/BW4W1J/kn7qycA0YL4jYRExTtIYki6UD4D5BwdDK0mvkLwp7P8jMt4MrA+8Jmk2cBPwb+BhSa1JWtgn/YjXW2zr/2RF7v3zwfWu8/LltbdW/nFS/1qXNwavvTaBrbfZNesYRXXgQU2/H33o0JcZOvTHtIlKT0n3q9VH0vSIaNfAOq2AyrRboQdwXUT8qBarpA+BrtX951n4fsiNTfIPYpldz806QslUVlVlHaEkKlRfr2HjNmvmRwXtXJNrQWdoTeC+dJzzLODIjPOYWSPnAl2AhlrP6TrvAl0aWq+B1+i4OM83s6alKR4kNDNrElygzcxyygXazCynXKDNzHLKBdrMLKdcoM3McsoF2swsp1ygzcxyygXazCynXKDNzHLKBdrMLKdcoM3McsoF2swsp1ygzcxyygXazCynXKDNzHLKBdrMLKdcoM3McsoF2swsp3xVb5tPh7brNMk/iM+HXZ11hJJZequjs45QEi0qmu4lU6d/N7Ggq3q7BW1mllMu0GZmOeUCbWaWUy7QZmY55QJtZpZTLtBmZjnlAm1mllMu0GZmOeUCbWaWUy7QZmY55QJtZpZTLtBmZjnlAm1mllMu0GZmOeUCbWaWUy7QZmY55QJtZpZTLtBmZjlV5zVlJC1X3xMj4qvixzEzs2r1XfTrVSCA2q6dFcA6JUlkZmZAPQU6ItYuZxAzM5tfg33QShwo6Yz0/pqStix9NDOzJVsh1zW/FqgC+gDnAtOAfwPdSpjLmphrrruInXbejilTvqR7t50BOP2Mk9hltx2oqqriiylfcsxRA/j0088zTtqwmbNmc9hZVzN7zhzmVFayQ/fNOK7fzkQEV9/zOIOHj6NZhdh3h204YJdec5/3+nv/5aC//J2LTzqYHbp3znAPFs3bbw9j+rQZVFZWMmdOJVtvs2vWkRbJtddfxM479WHKlC/ZsttOAJx3/mnsssv2zJo1m4kTJ3HM0QP49ttpGScFRUT9K0ijI2JzSWMioku6bFxEbFaWhE2EpK7AwRHx+6yz1KdD23Xq/4NYRFtv040ZM77jhpsunVug27dvx7Rp0wE45thD2GDD9TjphNNLsXk+H3Z10V4rIvh+5izatG7F7DmVHHrmlfzp0L344OPPGPnGe5x73P5UVFTw5bfTWH7p9gBUVlVx9LnX0aplC/bcbsuiFuiltzq6aK9Vn7ffHsbWW+/Kl19+XZbttagopP34422zzZZMnzGDm266bG6B7rP9z3nh+WFUVlZyzrl/AuDMMy4qyfYBpn83sbZjewspZJjdbEnNSA4MImlFkha1/QgRMSrvxbmUhr00kq+/+ma+ZdXFGaBN2zY01FjIC0m0ad0KgDmVlcyprASJ+wYP4+hf7UhFRfJvVV2cAe5+4j/03WozluvQLpPMNs9LL41Y6G/x2SH/obKyEoCRI8ew+uqrZBFtIYUU6CuBB4GVJZ0PvAhcUNJUjYiktpIekzRO0uuS+kvqJmlYumyEpPaSeksaVMvzV5U0VNLY9Pk/T5dPl3SZpNGShqRvjEg6UtLI9LX/LalNunxlSQ+my8dJ2jpdfmCaYaykG9I329w446w/MOHtF+nXfw/OP+/yrOMUrLKqin4DLmG7I86g+6Yb0Gm9tfjosy94athY9j/1Mo674AYmTZ4CwGdffcOzI8az745bZ5x6MUXw2KA7eXnYYxx++K+zTlMyBx3cj8GDX8g6BlBAgY6IO4E/khTlT4A9I+L+UgdrRHYCPomIzSJiE+BJ4F7ghLQbqC/wfT3P/zXwVER0BjYDxqbL2wKjI2Jz4AXgrHT5AxHRLX3tN4HD0+VXAi+kyzcH3pD0M6A/sE36+pXAAUXZ6yI596+XsdEGPbnv3kc4+uiDs45TsGYVFdx3yQAGX382r7//X97972RmzZ5DyxbNufvCP7D39j0467q7Abhk4EOceMBuNKto3OeF9d5ub7r32IU9fnkwxxx9CD17bpV1pKIb8MfjqZwzh3vveSjrKEDhZxK2AZql6y9VujiN0nigr6SL0tbvmsDkiBgJEBFTI2JOPc8fCRwm6Wxg04ioPjJRRVLoAe4Aeqa3N5H0H0njSYrtxunyPsB16TYrI+JbYHtgC2CkpLHp/YXGr0s6StIoSaNmzZm6CD+CxXf/vQ+zx56/yGTbi6ND26XottG6DBv7Fisvvwx9t0oOzWy/5aa8O2kyAG+8/z/+dMVt7Hz8OTw9fBzn3/xvnh0xPsvYi2Ty5M8AmDLlSx5+5Em6dW18Bzrr8+sD9mannfvwm8NOzDrKXIUMszsTuBVYDlgBuEVSaY7kNEIR8Q5JERwP/A3Yi7S/vsDnDwV6AR8Dt0uqqxlZ/ZoDgd9GxKbAX4HW9by8gFsjonP6tUFEnF1LhhsjomtEdG3ZvEOh0Rfbuut2nHt7l1378s7bH5Rt24vjq6nTmToj+VD0w6xZDB//Dh1XX4ntum3CiNffBWDUhPdZa7UVAXjimjN44pozeeKaM9mh+2b85Yh96LPlppnlXxRt2ixFu3Zt597uu30v3njj7YxTFU/fHXpx8snH0H/fI/n++x+yjjNXIYdJ9we6RMQPAJIuBEYD55UyWGMhaTXgq4i4Q9J04ChgNUndImKkpPbU08UhaS3g44i4SVJbku6J20jePH8F3EPSDfJi+pT2wGRJLUha0B+ny4cAxwJ/T/uZ26bLHpZ0eUR8np6+3z4iJhX1h1CAfw68gp4/34rll1+WN995iQvOu4Idf9Gb9dZfm6qq4H///ZgTf9843ve/+Hoqp19zF1VVVVRFsGOPzmy7xcZ02XAd/nzl7dzx2Au0ad2Ss47un3XUoll55RW5796bAGjevBn33Pswg59+PttQi+iWgVfw817dWX75ZXn73WGcf97f+cMpx9KqVUseGXQ7ACNHjOGEHPw9FjLM7glg/4j4Jr2/DHBHROxWhny5J+kXwCUkXRKzSYqkgKtIuoO+J+mH7gqcEhG7pUPujomIIyQdAgxInzudZCjexLTYXw7sAnwL9I+IKZKOJTkmMImk1d4+Ig6VtDJwI0kXRiVwbES8LKk/cBpJwZ8NHB8Rw+van1INs8taMYfZ5U25htmVW6mG2eVBocPs6izQkq4i+Vi9JslJKU+n93cAXoyI/YoT1WojaXpElH1Mlgt04+MC3fgUWqDr+wmMSr+/SjLMrtrzi5jJzMx+hPomS7q1nEFsflm0ns0sXxr8DCFpPZLRCRtRY8RARHi6UTOzEipkHPQtJONr5wDbkYwwuL2UoczMrLACvVREDCE5oDgpHUfbp7SxzMyskMOkP0iqAN6V9FuScbcrlTaWmZkV0oI+keRU79+TnDF3EHBIKUOZmVkBLejqOSVITqI4rLRxzMysWn1X9X6UeuaUiIg9SpLIzMyA+lvQl5YthZmZLaS+E1XyMWO1mdkSqnHPIG5m1oS5QJuZ5ZQLtJlZTnkUh5lZThUyimNvYBWS6+JBcoWVD0uYyczMKGAUh6RzI6JXjYcelTS05MnMzJZwhfRBryhp7tSiktYGVixdJDMzg8ImSzoJeF5S9SWXOwJN8xo7ZmY5UshcHE+mk/ZvmC56KyJmljaWmZk12MUhqQ3JVad/GxHjgDUl+YreZmYlVkgXxy0kF47tkd7/CLgfGFSqUJadZVs3zUshdtz2D1lHKJnpHzXNWRmGb/LHrCNkrpCDhOtGxMXAbICI+B4o6JLhZma26Aop0LMkLUV60oqkdQH3QZuZlVghXRxnA08Ca0i6E9gGT9xvZlZyhYziGCzpVaA7SdfGCRHxRcmTmZkt4QoZxTEkIr6MiMciYlBEfCFpSDnCmZktyeqbLKk1ycViV5C0LPMODHYAVitDNjOzJVp9XRxHk1zRezWSYXbVBXoqcE2Jc5mZLfHqmyzpCuAKSb+LiKvKmMnMzChsmF2VpGWq70haVtJxJcxkZmYUVqCPjIhvqu9ExNfAkaWLZGZmUFiBrpA098xBSc2AlqWLZGZmUNiJKk8B90m6nuRswmNITlwxM7MSKqRA/4lkRMexJCM5BgM3lzKUmZkVdiZhFXBd+mVmZmVS34kq90VEP0njqeXq3hHRqaTJzMyWcPW1oE9Iv3tyfjOzDNR3osrk9Puk8sUxM7Nq9XVxTKOWro1qEdGhJInMzAyovwXdHkDSOcCnwO0kozgOANqXJZ2Z2RKskBNVfhER10bEtIiYGhHXAfuUOpiZ2ZKukAJdKekASc0kVUg6AKgsdTAzsyVdIQX610A/4LP0a990mZmZlVAhJ6p8CPyy9FHMzKymBgu0pPVJziJcOSI2kdQJ2CMizit5OmsyWrVqyX2DbqFly5Y0b96Mxx95hssvupYrrv8bm3bZmDmz5zBu9HhOO/lc5syZk3Xcgq22+ipcdf2FrLjSCkRVcPut93Hz9bfPffzY3x7GWef9kY3W6cFXX31Tzyvlw8yZszjk+AHMmj2byjmV7LBdT357xEG88upYLr36ZmbPnsNGG/yUc047iebNmzHoqWf5x533A9BmqaU445TfsuF662S8Fwtb7/LjWG6HLZj9xbeM7n0yAG037shPLz6KilYtiMoq3jv1JqaPeY/Vj9uDlfb+OQBq3ow2663O8I0PZ84308ueu5AujpuA04DZABHxGrBfKUMtDknPS+qa3n685lzWdax/jqS+5cjTwHqrSfpXPY8vU3Me7obWz5uZM2ex/55HsPO2+7Lztv3Ydvtt6NK1Ew/96zH6bLUHO/bcm1atW7PfQXtnHfVHmTOnkrNPv5heW+3GLjv057Ajfs36G6wLJMW713Zb89H/Psk4ZeFatmzBP6+8kAduvZZ/3XoNL73yKmPGT+DP513GJX89lYfuuJ7VVlmJh594BoDVV1uFgVdfzIO3Xccxh+7PXy++MuM9qN1n9z7H6/vP36Zc+4yD+O9l9zOm7wAmXXwPa59xEAAfX/sIY/oOYEzfAXx4/p18+/KETIozFFag20TEiAWWZdbEUaKQ3ETELjXnsq5jnTMj4pnipFs0kppHxCcR8at6VlsGmFugC1g/d76b8T0AzVs0p0Xz5kQEzz3z4tzHx40ez6qrrZxVvEXy+WdTGD9uAgAzpn/Hu++8zyqrJvtwzgWncu5ZlxJR5+kEuSOJNm2WAmDOnDnMmTOHZhUVtGzRgo5r/gSAHt0255nnk99bl003YukOyajbThtvyGeff5FN8AZMHf7mwkU2gmbtk31t3r4Nsz79aqHnrbhXT6Y8+FI5ItaqkEL3haR1SU9akfQrYHJDT5LUVtJjksZJel1Sf0nbSxojabykf0pqla7bTdKwdN0Rktov8FodJb0p6VpgNLCGpB0lvSxptKT7JbWrJcOHklZIb58h6S1JT0u6W9Ip6fKB6T5RT74PJf013dZ4SRvWsc9/TB8fJ+nCGg/tm+7XO5J+nq57aJr7UWBwuo+vp49tnK4/VtJrktYDLgTWTZddssD6HSX9J803WtLW6fLeaQv+X+m+31lzbu9yq6io4PHn72P0W8/znxdeZuyr4+c+1rx5c/butzvPD8nun2FxrbHmamyy6c8Y/eo4dtx5OyZP/owJr7+ddawfrbKykn0OOZ5eu+1Pj25d2HSjDZgzp5LX33wHgMHPv8intRTiBwY9Rc/uDX5YzI33z7yFtc84iC1fvZ61zzqYDy+4c77HK5ZqybLbdeaLx4ZnlLCwAn08cAOwoaSPSS4ke0wBz9sJ+CQiNouITUjmkB4I9I+ITUn6v4+V1BK4FzghIjYD+gLf1/J6GwC3RUQXYAZwOtA3IjYHRgEn1xUk7WLYB+gC7A0s9FeUXsV8oXw1Vvki3dZ1wCm1PH9nYE9gq3Q/Lq7xcPOI2JLkZ3dWjeU9gEMios8CL3cMcEVEdE6zfgScCrwfEZ0jYsAC638O7JDm6w/U/JzZJd3uRsA6wDa1ZD9K0ihJo6b/sHAroliqqqrYpXc/um+6A527bML6G/507mPnXfIXXnn5VUYOH12y7ZdSm7ZtuPm2KznzzxdSOaeSE/9wNBdf0Dgv5dmsWTP+fes1DHnwdsZPeIf3Jk7iknNO5eIrb2S/I06gbZulaNZs/tIx4tVxPDBoMCcf95uMUv94qx7yCz44ayAjtjiGD84ayHr/N/+V/JbbsStTR76dWfcGNFCg066ErhHRF1gR2DAiehY4P8d4oK+ki9JWY0dgYkS8kz5+K9CLpPBOjoiRAOnJMLV1oUyKiOq3su4kBeclSWOBQ4C16snSE3g4Ir6PiGnAo7Wss0Ed+ao9kH5/Nd2XBfUFbomI79L9qFnp6nru0wusV+1l4M+S/gSsFRG1vWHV1AK4KZ158H6Sn021ERHxUTpt7NjaskfEjRHRNSK6tmu9XAObWnxTp07j5ZdG0Xv75L3ihAHHsNwKy3Lu6ZeUfNul0Lx5c/5x2xU8cP+jPP7o06y19hqsudZPePbFhxj52jOsutrKDH7h36y40gpZR/1ROrRvR7fNO/Hi8FF03uRn3Hbdpdxz8xVssdkmrLXG6nPXe/u9iZx54d+56sIzWWbpxjMDxMr9tuXLx14B4ItHXqZ9l5/O9/iKv9yGKQ++WNtTy6beAp3+U/82vT0jLW4FSQvdFiSF+m/UPVRP1DPnRw0zFnjO02lrsnNEbBQRh9fz3EI+1je0zsz0eyW1j36pbz/qeu6MWtYlIu4C9iD5JPGUpAVb2As6iWSM+mYkLe6alySbWeN2XdlLbrnll6VD2lfZqnUrem7bnffench+B+7Ntn225ndH/qlR9dXWdPnV5/HuOx9wwzW3AvDWhHfZZL2edOvUl26d+jL5k8/Ycdt9mJLT/tmavvr6G6ZOS1qMP8ycyfCRY1h7rTX48uvkUM6sWbP4553302/PXQCY/OnnnPjnc/nbmQPm9lE3FrM+/Zqlt94YgGV6bsr3H8zruW3Wvg1L99iIL58amVU8oLB/1qfT/tp7qVFQ6mj5zSVpNeCriLhD0nSSj+0dJf00It4DDgJeAN4CVpPULSJGpv3P39fRiq42HLim+rUktQF+UqP1u6AXgRsk/S3d511JRqfU9FYd+Qo1GDhT0l0R8Z2k5Rr6GdVF0jrABxFxZXq7EzCOuudAWRr4KCKqJB0CNFuU7ZbSSiuvwP9dcx4VzZpRUVHBoIee4tnBQ3n/s9F8/L/JPPhkMjTtyUFDuPLSGzJOW7gtu2/Ovvv9kglvvM0z/0k+KP3tnL8z5OmhGSdbNFO+/Jq/nHcplVVVRFXwiz4/p/c2W3Hp1TfzwrARRFUV/ffala226AzAdbfcxbdTp3HepdcASffIff/M30iODa47kWW23pjmy7Vny9E3MOmSe3n3lOtZ59zDUPNmVM2czXsD5v3dLb/LlnzzwmtUfTeznlctPTXUapE0sZbFERH1DnaU9AvgEqCKZIjesSSF5FKSIjkSODYiZkrqBlwFLEXSauwLdABujohdJHUEBqV92dWv3we4CGiVLjo9Ih6R9DxwSkSMkvQhSRfNF5LOBvYHJgFTgOcj4iZJA9PX/pek7evIV/N1ugKXRkTv9PYxEXFEmulU4GBgFvB4RPx5gTwrAKMioqOkQ9PX/G363Ln7KOk04MD05/Yp8OuI+ErSXSTF+gngmhrrrwf8G/gOeA74XUS0k9Q73fZu6TauTrc/sK7f21rLd2qczdgGzKycnXWEkvnfe49lHaEkhm/yx6wjlMzPP/1XQQfrGyzQTYWkdhExPW1tDwWOiojGeUSqhFygGx8X6Man0AJdyJmErUnG3/Yk6WP9D3B9RPywWAnL70ZJGwGtgVtdnM0s7wrpg74NmEbSBQFJN8HtJJMmNRoR4QmezKxRKaRAb5CO6632nKRxpQpkZmaJQk5UGSOpe/UdSVsBjfd0LzOzRqKQFvRWwMGS/pveXxN4Mz0pIiKiU8nSmZktwQop0DuVPIWZmS2kkAn7Czmt28zMiqygaTvNzKz8XKDNzHLKBdrMLKdcoM3McsoF2swsp1ygzcxyygXazCynXKDNzHLKBdrMLKdcoM3McsoF2swsp1ygzcxyygXazCynXKDNzHJqibmqtxWmecvV/QdhubDxcmtlHaFkxn06rKCrersFbWaWUy7QZmY55QJtZpZTLtBmZjnlAm1mllMu0GZmOeUCbWaWUy7QZmY55QJtZpZTLtBmZjnlAm1mllMu0GZmOeUCbWaWUy7QZmY55QJtZpZTLtBmZjnlAm1mllMu0GZmOeUCbWaWUy7QZmY55QJtZpZTLtBmZjnlAm2Z+MWOvXnj9aG8NeFF/jjg+KzjFE1T3S9oevtWUVHBvU8P5KrbLwFgy55bcM/gW7j3mYEMfPg61ui4esYJG0GBlrSMpOMKWG96+r23pEFF3P6HklZIbw8rYP2bJW1UrO0XsL1zJPUt1/aKoaKigiuvOJ/ddj+QTTfbjv799+RnP1sv61iLranuFzTNfTvgyH588O6Hc++fftEATjv+bPr3PZTHH3yaI086NLNs1XJfoIFlgAYL9KKS1KzQdSNi6wLWOSIiJixeqsJFxJkR8Uy5tlcMW3brwvvvf8jEif9l9uzZ3Hffw+yx+y+yjrXYmup+QdPbt5VWXZGf992aB+98dO6yiKBdu7YAtGvflimffpFVvLkaQ4G+EFhX0lhJl0saImmqAi2gAAAYOklEQVS0pPGSflnfEyV1kzRG0joLLO8t6TlJdwHj02UHShqRbueG2gp3jVZ6haRrJb0haZCkxyX9Kn3seUld09v7pzlfl3RRzdeRdL6kcZKGS1q5lm0dKukhSY9Kmijpt5JOTvdnuKTl0vUG1tj2hZImSHpN0qXpspUlPZhua5ykBt9kSm211Vfhfx99Mvf+Rx9PZrXVVskwUXE01f2Cprdvfzz3RC4/9xqqomrusrP/cCFX33kZg0c/xG777sQ/r7o9w4SJxlCgTwXej4jOwABgr4jYHNgOuEySantSWoiuB34ZER/UssqWwF8iYiNJPwP6A9uk26kEDqgn095AR2BT4AigRy3bXw24COgDdAa6SdozfbgtMDwiNgOGAkfWsZ1NgF+nWc8HvouILsDLwMELbG85YC9g44joBJyXPnQl8EK6rc2BN2rJepSkUZJGVVXNqGe3i6O2X1lElHy7pdZU9wua1r712mFrvvria9587e35lh90VH9+e8Af2HHzPXn4nsc45a+/zyjhPM2zDvAjCbhAUi+gClgdWBn4dIH1fgbcCOwYEZ9QuxERMTG9vT2wBTAy/UNcCvi8nhw9gfsjogr4VNJztazTDXg+IqYASLoT6AU8BMwCqvvJXwV2qGM7z0XENGCapG+B6s9j44FOC6w7FfgBuFnSYzVevw9pMY+ISuDbBTcSETeS/Lxo3nL1kv/XffzRZNb4yWpz7/9k9VWZPPmzUm+25JrqfkHT2rfO3TrRe8ee9Ny+B61ataRtu7ZcdcelrP3TtRg/JumdfOrhIVx79/9lnLRxtKBrOgBYEdgibel+BrSuZb3JJMWqSz2vVbOpKODWiOicfm0QEWfX89xaW+0/Yp3ZMa/5UUndb5Qza9yuqnG/asHnRMQckpb2v4E9gScLyJiJkaPG8tOfrk3HjmvQokUL+vX7JY8OGpx1rMXWVPcLmta+XXnB9ey4+Z7s0m0f/nTMmYx86VVOPORPtGvflrXWWQOAHr26MfGdD7MNSuNoQU8D2qe3lwY+j4jZkrYD1qrjOd8AhwODJc2IiOcb2MYQ4GFJl0fE52l3QfuImFTH+i8Ch0i6leQNozdw1wLrvAJckY4A+RrYH7iqgRyLTFI7oE1EPC5pOPBe+tAQ4Fjg72m/etuImFqqHIWorKzkhBNP5/HH7qJZRQUDb72XCRPeyTJSUTTV/YKmvW+Q7N85p1zIZf+4gKqqKqZ+O42zTrwg61j5L9AR8aWklyS9DowENpQ0ChgLvFXP8z6TtDvwhKTfkLRUj4mII2pZd4Kk00kKegUwGzgeqKtA/5ukW+R14B2SYjxf10FETJZ0GvAcSWv68Yh4uL59lbQH0DUizqxvvTq0J3mTaZ1u76R0+QnAjZIOJ/kZHEvSh52pJ558lieefDbrGEXXVPcLmua+jRo2hlHDxgDw7BNDefaJoRknmp8aa0d/1iS1i4jpkpYHRpAcYFywL7zRKUcftFkhNl6urg/Ijd+4T4cV0k2a/xZ0jg2StAzQEji3KRRnM8sXF+hFFBG9s85gZk1bYxvFYWa2xHCBNjPLKRdoM7OccoE2M8spF2gzs5xygTYzyykXaDOznHKBNjPLKRdoM7OccoE2M8spF2gzs5xygTYzyykXaDOznHKBNjPLKRdoM7OccoE2M8spF2gzs5xygTYzyykXaDOznHKBNjPLKUVE1hlsCSbpqIi4Mescxeb9anzyuG9uQVvWjso6QIl4vxqf3O2bC7SZWU65QJuZ5ZQLtGUtV31+ReT9anxyt28+SGhmllNuQZuZ5ZQLtJlZTrlAm5nlVPOsA5g1FZIEHACsExHnSFoTWCUiRmQcbbFJ2hroSI2aERG3ZRaoCCR1B96IiGnp/fbARhHxSrbJ5nEL2spK0sWSOkhqIWmIpC8kHZh1riK5FugB7J/enwZck12c4pB0O3Ap0BPoln51zTRUcVwHTK9xf0a6LDfcgrZy2zEi/ihpL+AjYF/gOeCObGMVxVYRsbmkMQAR8bWkllmHKoKuJC3LpjbkSzX3KSKqJOWqJroFbeXWIv2+C3B3RHyVZZgimy2pGRAAklYEqrKNVBSvA6tkHaIEPpD0+/TTXAtJJwAfZB2qply9W9gS4VFJbwHfA8elReyHjDMVy5XAg8BKks4HfgWcnm2kolgBmCBpBDCzemFE7JFdpKI4huR3djrJm+oQcjYfh09UsbKTtCwwNSIqJbUF2kfEp1nnKgZJGwLbAwKGRMSbGUdabJK2rW15RLxQ7ixLGhdoKytJxwN3RsQ36f1lgf0j4tpsky2+xjAqwOaRdDFwHsmnuSeBzYATIyI3x0PcB23ldmR1cYbkQBpwZIZ5iin3owIWhaTukkZKmi5plqRKSVOzzlUEO0bEVGA3kgPW6wMDso00PxdoK7eKdLwwAOlBtaYw0gFqGRVA0zjOczXJ0MF3gaWAI9JljV3uD1i7QFu5PQXcJ2l7SX2Au0k+XjYFuR8VsKgi4j2gWURURsQtQO+MIxVD9QHrrsCQPB6wdh+0lZWkCuBo5h1IGwzcHBGVmQYrAkkrkYwK6MO8UQEnRsTnmQZbTJKGAn2Bm4FPgcnAoRGxWabBimCBA9ZtgA55OmDtAm1m9ZK0FvA5SZfAScDSwLVpq7rRkdQnIp6VtHdtj0fEA+XOVJem0D9mjYCk+yKin6TxpCdy1BQRnTKIVVSSWgOHAxsDrauXR8RvMgtVBBExKb35PfDXLLMUybbAs8DutTwWQG4KtFvQVhaSVo2IyWlrbCE1ikCjJel+4C3g18A5JBMnvRkRJ2QabBEtCW+qeecCbVYkksZERBdJr0VEJ0ktgKciok/W2RZFU39TlbQMcDALz9L3+6wyLcijOKysJO0t6V1J30qaKmlaExlTCzA7/f6NpE1I+mo7Zhdn8UTE5PTmcRExqeYXcFyW2YrkcZLfz3jg1RpfueEWtJWVpPeA3ZvCKdALknQE8G+gE3AL0A44IyJuyDTYYpI0OiI2X2DZa429i6O2/cobF2grK0kvRcQ2Weewhkk6lqSlvC5Qc8RGe+CliGjU83hLOonkzM9BzD8JVG5OWHGBtrKoMaRpW5KpKx9i/n+K3Bw5X1SSlgfOBrYhOaj2H+DciPgyy1yLStLSwLLA34BTazw0LU9FbFGl88KcD3zDvIOgERHrZJdqfi7QVhaSbqnn4WjsQ9EAJD0NDGXexQcOAHpHRN/sUi0+SesCH0XETEm9Sbpwbqs5p0pjJOl9kossfJF1lrq4QJsViaRXI2KLBZaNiohGfXkoSWNJTofuSHKq/iPABhGxS5a5FpekR4D9IuK7rLPUxSeqWFlJWge4AuhO8rHyZZLToSdmGqw4npO0H3Bfev9XwGMZ5imWqoiYk3ZT/T0irqq+rFcjVwmMlfQc83e35WaYnVvQVlaShpNcSPXudNF+wO8iYqvsUhWHpGlAW5J/fJEMY52RPhwR0SGrbItD0ivA34G/kIzAmSjp9YjYJONoi0XSIbUtj4hby52lLi7QVlaSXlmwGEsaHhHds8pk9ZO0EcnloV6OiLslrQ30j4gLM47W5LlAW1lJupDkqPk9JF0c/YFWJK3qXA1x+rEkbQOMjYgZkg4ENifpEvhvxtGsQJLOjoizs85RzQXaykpSfX3NuRri9GNJeo3kskmdgNuBfwB7R0St1/TLuyVxLg5Ju0fEo1nnqOYCbVYk1WemSToT+Dgi/tEYzlarS1Ofi6Mx8CgOK7t0noqNmH9KztuyS1Q00ySdBhwI9Eov59WigefkVlqcmwH/aOxjuWuTXkHlSBaeLCk3Y/JdoK2sJJ1FcrmkjUgmq9kZeBFoCgW6P8lUo4dHxKeS1gQuyTjTYkmvNPKdpKUj4tus8xTZwyRnez5DMvImd9zFYWWV9mduBoyJiM0krUxyyavaJk+3HJB0H8m49aeZN2wwV+OFF4WksRHROesc9XEL2srt+4iokjRHUgeSSyk12gODDZF0Y0QclXWOxfQYTeOEmwUNkrRLRDyedZC6uEBbuY1KJ0q/iWTu3enAiGwjlVSjnmoU8nXiRpGdAPxZ0izmzeWdqxOK3MVhZSNJwE8i4n/p/Y4kV1F+LctcVr90fPfZwFokjTrRyIdENhYu0FZWtU0o1NhJ+ntEnCjpUWofL7xHBrGKRtJbJFfzfpUaB9Ma6zSqNUnaA+iV3n0+IgZlmWdB7uKwchsuqVtEjMw6SBHdnn6/NNMUpfNtRDyRdYhiS89q7QbcmS46QVLPiDi1nqeVlVvQVlaSJgDrA5NIRgRUf1xu9GelSWpLehA0vd8MaJXn6SzrI6n6BJt+QDPgAeaf9W10FrmKJT3zs/MCv68xefpbdAvaym3nrAOU0BCgL8mBT4ClgMHA1pklWjyXLXC/5rzWATTKq5UvYBmgev6XpbMMUhsXaCu3aQUua4xaR0R1cSYipktqk2WgxRER22WdocT+BoxJ54MWSV/0adlGml9F1gFsiTMamAK8A7yb3p4oabSkxn7wcEaNbgEkdQW+zzBPUUi6IB0aWX1/WUnnZZmpGCLibpITcB5Iv3pExD3Zppqf+6CtrCRdDzwYEU+l93cEdiK5CskVjXni/rQg3wt8QtIFsBrJvMmvZhpsMUkaExFdFljWmCeB2jAi3qr5ZlpTnvrW3cVh5dY1Io6pvhMRgyVdEBEnS2qVZbAiWBvoAqwJ7MW8y3o1ds0ktYqImQCSliKZw7uxOhk4ioX72CFnfesu0FZuX0n6E8mE/ZBMMPR1egS9KrtYRXFGRNyfdgfsQFIArgMa7aeC1B3AkPTK7AH8Bmi0ZxdWn3rfGPrY3cVhZSVpBeAsoGe66EXgHOBbYM2IeC+rbIuruitA0t+A8RFxV23dA42RpJ1IRqgIGFzdRdWYpRfBXdC3JL+7z8udpzYu0GZFImkQ8DFJIduC5ADhiIjYLNNgVitJjwE9gOfSRb2B4STj9M+JiNvreGrZeBSHZU5SY5/trVo/4Clgp4j4BlgOGJBtpNKQdGPWGYqgCvhZROwTEfuQzFE+k6RL6k+ZJku5D9ryQFkHKIb0jMEHatyfDEzOLlFJNfpZ+oCOEfFZjfufA+tHxFeSZtf1pHJygbbMRURT+GdfojT2oYOp/6TdUven9/cBhqan7H+TXax53AdtZSVpeZKpK7chGRHwIkl/X6OfGa2pkrQ+SVdN9XSjAEREboajLYp0+tt9SP4WRfK3+O/IUVF0gbaykvQ0MJRk6BbAAUDvpnhR0qZC0jjgehaebrQptKJzzQXayqq2+aAljYqIrnU9x7LV1ObwlvRiRPSUNI35TySqnlkxN1dU8SgOK7fnJO0nqSL96kfTvN5dU/KopOMkrSppueqvrEMtqojomX5vHxEdany1z1NxBregrczSVktb5p01WMG8K0XnqvViCUkTa1ncaC951dCbS0R8Vd/j5eQCbWZLlPQNJ6h9eGeu3nhcoK3sJHUCOjL/iIAH6nyCZUpSC+BYaly7D7ghInIxVrgpc4G2spL0T6AT8AbzujkiIn6TXSqrj6SbgRbMmyDpIKAyIo7ILtXiS4fZHQCsHRHnSloTWCUiRmQcbS4XaCsrSRMiYqOsc1jhJI1bcD6R2pY1NpKuI2kk9ImIn0lalmQiqG4ZR5vLozis3F6W5ALduFRKWrf6jqR1qDEeuhHbKiKOB34AiIivgZbZRpqfT/W2cruVpEh/SjIxTZO5qncTNoBkeOQHJL+vtYDDso1UFLPTecgDQNKK5GxOcndxWFlJeo/kihbjqfHPEBGTMgtlDUqvdrMBSYF+q/rqKo2ZpANILhixOUnD4VfA6RFxf71PLCMXaCsrSc829jkclhSS+kTEs3VMbN8kRt5I2hDYnuSNZ0hEvJlxpPm4i8PK7S1JdwGPknRxAE3jn70J2hZ4Fti9lseCGlOrNjaSKoDXImIT4K2s89TFLWgrq/S6dgvyMDsrO0l3AqdFxH+zzlIXF2gzq5ekk2tZ/C3wakSMLXeeYpH0LNANGMG86QaIiD0yC7UAF2grK0k/Aa5i/vmgT4iIjzINZnVKu6S6knRLAewKjAQ2BO6PiIuzyrY4JG1b2/KIeKHcWeriAm1llc4HfRdQfUHOA4EDImKH7FJZfSQ9BewTEdPT++2AfwF7kbSiPa69RHyiipXbihFxS0TMSb8GAitmHcrqtSYwq8b92cBaEfE9NQ70NgV5uxiuR3FYuX0h6UDg7vT+/oAvd5VvdwHDJT2c3t8duDu9dt+E7GKVRK6uj+kuDiurdEKaq4EeJH3Qw4Df5/lIuoGkLYCepNfui4hRGUdabJI6RsSHCyzrFhEjM4q0EBdoKytJtwInpvMeVE+efqmH2eWPpA4RMbWuCe7zNLH9opA0Gtg9Ij5O728LXB0Rm2abbB53cVi5daouzpD8k0vqkmUgq9NdwG4kF4td6Np9QG4mtl9ERwMPSdqd5HTvC4Bdso00PxdoK7cKScsu0IL232EORcRu6fe1s85SChExUtLvgcEkM9rtEBFTMo41H/9jWLldBgyT9C+SVlg/4PxsI1ltJG1e3+MRMbpcWYpJ0qPM/4mgDcmJN/+Q5BNVbMmWzgfdh3kT1DS1kQBNgqTn6nk4GuukV3WdoFLNJ6qYmVmD3MVhZvWS1IZkDu81I+IoSesBG0TEoIyjLRJJ05i/i2PuQySfDDqUOVKd3II2s3pJupdkJMfBEbGJpKWAlyOic8bRmjyf6m1mDVk3nRBpNkB6ireyjVQ8klaStGb1V9Z5anKBNrOGzEpbzdXX7luXJjAHh6Q9JL0LTAReAD4Ensg01AJcoM2sIWcBTwJrpJPcDwH+mG2kojgX6A68k4713h54KdtI83MftJnVSZKAnwDfkRQzAcMj4otMgxWBpFER0VXSOKBLRFRJGhERW2adrZpHcZhZnSIiJD0UEVsAj2Wdp8i+See2HgrcKelz0n72vHAXh5k1ZLikblmHKIFxJJ8MTiLpwnmfnF1A1l0cZlYvSROA9YFJJNfuqx4v3CnTYItJ0uiI2HyBZa/lab/cxWFmDdk56wDFJOlY4DhgXUmv1XioPT5IaGaWHUlLA8sCfwNOrfHQtLzNce0CbWY/mqRB1dORWum4QJvZjyZp1YiYnHWOps6jOMysXpLaSqqocb+CZP5kKzEXaDNryBCSSe2rtQGeySjLEsUF2swa0joiplffSW+3qWd9KxIXaDNryIyal7+StAXwfYZ5lhgeB21mDTkRuF/SJ+n9VYH+GeZZYngUh5k1SFILYAOSswjfiohczVnRVLlAm1m90uJ8LNArXfQ8cIOLdOm5QJtZvSTdDLQAbk0XHQRURsQR2aVaMrhAm1m9JI2LiM0aWmbF51EcZtaQyvQyVwBIWgeozDDPEsOjOMysIacAz0n6IL3fETgsuzhLDhdoM2vI8sAmJIX5l8DW+FTvsnAXh5k15IyImAp0AHYArgeuyzbSksEF2swaUt3fvCtwfUQ8DLTMMM8SwwXazBrysaQbgH7A45Ja4dpRFh5mZ2b1ktQG2AkYHxHvSloV2DQiBmccrclzgTYzyyl/TDEzyykXaDOznHKBNisxSctIOq6Er3+opKsbWOdsSaf8yNed3vBaVkou0GaltwxQa4GW1KzMWawRcYE2K70LgXUljZV0iaTekp6TdBcwXlJHSa9XryzpFElnp7fXlfSkpFcl/UfShvVtSNLukl6RNEbSM5JWrvHwZpKelfSupCNrPGeApJGSXpP01+Luui0On+ptVnqnAptERGcASb2BLdNlEyV1rOe5NwLHpMPbtgKuBfrUs/6LQPeICElHAH8E/pA+1gnoDrQFxkh6jOQU7vXSPAIekdQrIoYu0p5aUblAm2VjRERMrG8FSe1I5r24X1L14lYNvO5PgHvTscotgZrbeDgivge+l/QcSVHuCewIjEnXaUdSsF2gc8AF2iwbM2rcnsP83Y2t0+8VwDfVLe8CXQX8X0Q8krbUz67x2IInPQRJq/lvEXHDj9iGlYn7oM1KbxrQvp7HPwNWkrR8ehr1bgDpBEUTJe0LoERDk+QvDXyc3j5kgcd+Kam1pOWB3sBI4CngN2lrHUmrS1qp8F2zUnIL2qzEIuJLSS+lBwKfAB5b4PHZks4BXiHpknirxsMHANdJOp3kslP3AOPq2dzZJF0iHwPDgbVrPDYi3faawLkR8QnwiaSfAS+n3SjTgQOBzxdxd62IfKq3mVlOuYvDzCynXKDNzHLKBdrMLKdcoM3McsoF2swsp1ygzcxyygXazCynXKDNzHLq/wFIhvWZXoFMdQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "# Fit the model and show the classification matrix\n",
    "#convert the content of each string into a vector of numbers\n",
    "model = make_pipeline(TfidfVectorizer(), MultinomialNB()) \n",
    "model.fit(train.data, train.target)\n",
    "labels = model.predict(test.data)\n",
    "mat = confusion_matrix(test.target, labels)\n",
    "sns.heatmap(mat.T, square=True, annot=True, fmt='d', cbar=False,\n",
    "            xticklabels=train.target_names, yticklabels=train.target_names)\n",
    "plt.xlabel('true label')\n",
    "plt.ylabel('predicted label');\n",
    "\n",
    "def predict_category(s, train=train, model=model):\n",
    "    pred = model.predict([s])\n",
    "    return train.target_names[pred[0]]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Evidently, even this very simple classifier can successfully separate space talk from computer talk, but it gets confused between talk about religion and talk about Christianity. This is perhaps an expected area of confusion!\n",
    "\n",
    "The very cool thing here is that we now have the tools to determine the category for any string, using the predict() method of this pipeline. Here's a quick utility function that will return the prediction for a single string:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'soc.religion.christian'"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict_category('discussing islam vs atheism')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'comp.graphics'"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict_category('determining the screen resolution')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'sci.space'"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict_category('sending a payload to the ISS')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### When to Use Naive Bayes\n",
    "\n",
    "Because naive Bayesian classifiers make such stringent assumptions about data, they will generally not perform as well as a more complicated model. That said, they have several advantages:\n",
    "\n",
    "- They are extremely fast for both training and prediction\n",
    "\n",
    "- They provide straightforward probabilistic prediction\n",
    "\n",
    "- They are often very easily interpretable\n",
    "\n",
    "- They have very few (if any) tunable parameters\n",
    "\n",
    "These advantages mean a naive Bayesian classifier is often a good choice as an initial baseline classification."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A First Look on Deep Learning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There is a set of 60,000 training images, plus 10,000 test images, assembled by the National Institute of Standards and\n",
    "Technology (NIST). Each image is a gray scale 28 $\\times$ 28 pixels handwritten digits. we're trying to classify images into their 10 categories (0 through 9)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training images:(60000, 28, 28), test images:(10000, 28, 28)\n"
     ]
    }
   ],
   "source": [
    "from keras.datasets import mnist\n",
    "(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\n",
    "print('training images:{}, test images:{}'.format(train_images.shape, test_images.shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b0ab5e6e814c4ab8988136263a648ef0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(RadioButtons(description='Data:', options=('train', 'test'), value='train'), IntText(val…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def showimg(data, idx):\n",
    "    span = 5\n",
    "    if data=='train':\n",
    "        if idx+span<train_images.shape[0]:\n",
    "            images = train_images\n",
    "            labels = train_labels\n",
    "        else:\n",
    "            print('Index is out of range.')\n",
    "    if data=='test':\n",
    "        if idx+span<test_images.shape[0]:\n",
    "            images = test_images\n",
    "            labels = test_labels\n",
    "        else:\n",
    "            print('Index is out of range.')\n",
    "    plt.figure(figsize=(20,4))\n",
    "    for i in range(span):\n",
    "        plt.subplot(1, 5, i + 1)\n",
    "        digit = images[idx+i]            \n",
    "        plt.imshow(digit, cmap=plt.cm.binary)\n",
    "        plt.title('Index:{}, Label:{}'.format(idx+i, labels[idx+i]), fontsize = 15)\n",
    "    plt.show()\n",
    "\n",
    "interact(showimg,\n",
    "    data = widgets.RadioButtons(options=['train', 'test'],\n",
    "                                value='train', description='Data:', disabled=False),\n",
    "    idx = widgets.IntText(value=7, description='Index:', disabled=False));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Network Architecture\n",
    "\n",
    "The core building block of neural networks is the *layer*, a data-processing module working as a filter for data. Specifically, layers extract representations out of the data fed into them in a more useful form which is often called features.\n",
    "\n",
    "Most of deep learning consists of chaining together simple layers that will implement a form of progressive data distillation. A deep-learning model is like a sieve for data processing, made of a succession of increasingly refined data filters the layers.\n",
    "\n",
    "```python\n",
    "network = models.Sequential()\n",
    "network.add(layers.Dense(512, activation='relu', input_shape=(28 * 28,)))\n",
    "network.add(layers.Dense(10, activation='softmax'))\n",
    "```\n",
    "\n",
    "Here, our network consists of a sequence of two densely connected (fully connected) layers. The second (and last) layer is a\n",
    "10-way softmax layer, which means it will return an array of 10 probability scores (summing to 1). Each score will be the probability that the current digit image belongs to one of our 10 digit classes."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Compilation\n",
    "\n",
    "Before training the network, we need to perform a compilation step by setting up:\n",
    "\n",
    "- An optimizer: the mechanism to improve its performance on the training data\n",
    "\n",
    "- A loss function: the measurement of its performance on the training data\n",
    "\n",
    "- Metrics to monitor during training and testing\n",
    "\n",
    "```python\n",
    "network.compile(optimizer='rmsprop',\n",
    "                loss='categorical_crossentropy',\n",
    "                metrics=['accuracy'])\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Preparation\n",
    "\n",
    "```python\n",
    "train_images_reshape = train_images.reshape((60000, 28 * 28))\n",
    "train_images_reshape = train_images_reshape.astype('float32') / 255\n",
    "\n",
    "test_images_reshape = test_images.reshape((10000, 28 * 28))\n",
    "test_images_reshape = test_images_reshape.astype('float32') / 255\n",
    "\n",
    "train_labels_cat = to_categorical(train_labels)\n",
    "test_labels_cat = to_categorical(test_labels)\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fitting\n",
    "\n",
    "We train the neural network so that it can classify images in test image set.\n",
    "\n",
    "```python\n",
    "network.fit(train_images_reshape, train_labels_cat, epochs=5, batch_size=128)\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From C:\\Users\\mzhao\\AppData\\Local\\Continuum\\anaconda3\\envs\\bzan\\lib\\site-packages\\tensorflow\\python\\framework\\op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n",
      "WARNING:tensorflow:From C:\\Users\\mzhao\\AppData\\Local\\Continuum\\anaconda3\\envs\\bzan\\lib\\site-packages\\tensorflow\\python\\ops\\math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n",
      "Epoch 1/5\n",
      "60000/60000 [==============================] - 4s 63us/step - loss: 0.2577 - acc: 0.9261\n",
      "Epoch 2/5\n",
      "60000/60000 [==============================] - 4s 61us/step - loss: 0.1038 - acc: 0.9693\n",
      "Epoch 3/5\n",
      "60000/60000 [==============================] - 4s 62us/step - loss: 0.0679 - acc: 0.9797\n",
      "Epoch 4/5\n",
      "60000/60000 [==============================] - 3s 57us/step - loss: 0.0488 - acc: 0.9856\n",
      "Epoch 5/5\n",
      "60000/60000 [==============================] - 4s 61us/step - loss: 0.0369 - acc: 0.9888\n",
      "10000/10000 [==============================] - 0s 46us/step\n",
      "test accuracy: 0.9793\n"
     ]
    }
   ],
   "source": [
    "from keras import models\n",
    "from keras import layers\n",
    "from keras.utils import to_categorical\n",
    "\n",
    "network = models.Sequential()\n",
    "network.add(layers.Dense(512, activation='relu', input_shape=(28 * 28,)))\n",
    "network.add(layers.Dense(10, activation='softmax'))\n",
    "\n",
    "network.compile(optimizer='rmsprop',\n",
    "                loss='categorical_crossentropy',\n",
    "                metrics=['accuracy'])\n",
    "\n",
    "train_images_reshape = train_images.reshape((60000, 28 * 28))\n",
    "train_images_reshape = train_images_reshape.astype('float32') / 255\n",
    "\n",
    "test_images_reshape = test_images.reshape((10000, 28 * 28))\n",
    "test_images_reshape = test_images_reshape.astype('float32') / 255\n",
    "\n",
    "train_labels_cat = to_categorical(train_labels)\n",
    "test_labels_cat = to_categorical(test_labels)\n",
    "\n",
    "network.fit(train_images_reshape, train_labels_cat, epochs=5, batch_size=128)\n",
    "\n",
    "test_loss, test_acc = network.evaluate(test_images_reshape, test_labels_cat)\n",
    "print('test accuracy:', test_acc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We reach an accuracy of 98.9% on the training data. However, the test-set accuracy turns out to be 97.8% — that's quite a bit lower than the training set accuracy as our errors are doubled. This gap between training accuracy and test accuracy is an example of **overfitting**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Prediction Error\n",
    "\n",
    "We demonstrate a few images that are misclassified by the trained neural network."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# of misclassified images: 207\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x288 with 5 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predicted = network.predict_classes(test_images_reshape)    \n",
    "result = abs(predicted - test_labels)\n",
    "misclassified = np.where(result>0)[0]\n",
    "print('# of misclassified images:',misclassified.shape[0])\n",
    "\n",
    "plt.figure(figsize=(20,4))\n",
    "for i in range(5):\n",
    "    plt.subplot(1, 5, i + 1)\n",
    "    idx = misclassified[i]\n",
    "    digit = test_images[idx]            \n",
    "    plt.imshow(digit, cmap=plt.cm.binary)\n",
    "    plt.title('Predicted:{}, Label:{}'.format(predicted[idx], test_labels[idx]), fontsize = 15)\n",
    "plt.show()\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A Short Introduction to AI"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![def](https://www.stoodnt.com/blog/wp-content/uploads/2018/03/Deep_Learning_Machine_Learning_AI_History_Medium.png)\n",
    "\n",
    "### Symbolic AI\n",
    "\n",
    "Artificial intelligence was proposed by a handful of pioneers from the nascent field of computer science in the 1950s. A concise definition of the field would be as follows: *the effort to automate intellectual tasks normally performed by humans*.\n",
    "\n",
    "For a fairly long time, many experts believed that human-level artificial intelligence could be achieved by having programmers handcraft a sufficiently large set of explicit rules for manipulating knowledge. This approach is known as *symbolic AI* and was the dominant paradigm in AI from the 1950s to the late 1980s.\n",
    "\n",
    "In the 1960s, people believe that \"the problem of creating artificial intelligence will substantially be solved within a generation\". As these high expectations failed to materialize, researchers and government funds turned away from the field, marking the start of the first AI winter."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Expert Systems\n",
    "\n",
    "In the 1980s, a new take on symbolic AI, expert systems, started gathering steam among large companies. A few initial success stories triggered a wave of investment. Around 1985, companies were spending over $1 billion each year on the technology; but by the early 1990s, these systems had proven expensive to maintain, difficult to scale, and limited in scope, and interest died down. Thus began the second AI winter."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Deep Learning: AI Hype?\n",
    "\n",
    "Although some world-changing applications like autonomous cars are already within reach, many more are likely to remain elusive\n",
    "for a long time, such as believable dialogue systems, human-level machine translation across arbitrary languages, and human-level natural-language understanding. In particular, talk of **human-level general intelligence shouldn't be taken too seriously**. The risk with high expectations for the short term is that, as technology fails to deliver, research investment will dry up, slowing progress for a long time.\n",
    "\n",
    "Although we're still in the phase of intense optimism, we may be currently witnessing the third cycle of AI hype and disappointment. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Machine Learning\n",
    "\n",
    "In classical programming, such as symbolic AI, humans input rules (a program) and data to be processed according to these rules, and out come answers:\n",
    "\n",
    "\\begin{equation}\n",
    "\\text{rules $+$ data} \\Rightarrow \\text{classical programming} \\Rightarrow \\text{answers} \\nonumber\n",
    "\\end{equation}\n",
    "\n",
    "For example, an Expert System contains two main components: an inference engine and a knowledge base.\n",
    "\n",
    "- Expert systems require a real human expert to input knowledge (such as all steps s/he took to make the decision, and how to handle exceptions) into the knowledge base, whereas in machine learning, no such \"expert\" is needed.\n",
    "\n",
    "- The inference engine applies logical rules based on facts from the knowledge base. These rules are typically in the form of if-then statements. A flexible system would use the knowledge as an initial guide, and use the expert's guidance to learn, based on feedback from the expert. \n",
    "\n",
    "\n",
    "Machine learning arises from the question that could a computer go beyond \"what we know how to order it to perform\" and learn on its own how to perform a specified task? A machine-learning system is **trained** rather than explicitly programmed. The programming paradigm is quite different\n",
    "\n",
    "\\begin{equation}\n",
    "\\text{data $+$ answers} \\Rightarrow \\text{machine learning} \\Rightarrow \\text{rules} \\nonumber\n",
    "\\end{equation}\n",
    "\n",
    "\n",
    "Machine learning is a type of artificial intelligence. It can be broadly divided into **supervised**, **unsupervised**, **self-supervised** and **reinforcement** learning.\n",
    "\n",
    "- In supervised learning, a computer is given a set of data and an expected result, and asked to find relationships between the data and the result. The computer can then learn how to predict the result when given new data. It's by far the dominant form of deep learning today.\n",
    "\n",
    "- In unsupervised learning, a computer has data to play with but no expected result. It is asked to find relationships between entries in the dataset to discover new patterns.\n",
    "\n",
    "- Self-supervised learning is supervised learning without human-annotated labels such as autoencoders.\n",
    "\n",
    "- In reinforcement learning, an agent receives information about its environment and learns to choose actions that will maximize some reward. Currently, reinforcement learning is mostly a research area and hasn't yet had significant practical successes beyond games.\n",
    "\n",
    "Machine learning started to flourish in the 1990s and has quickly become the most popular and most successful subfield of AI."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Deep Learning\n",
    "\n",
    "Deep learning is a specific subfield of machine learning: a new take on learning information from data that puts an emphasis on learning successive layers of increasingly meaningful representations.\n",
    "\n",
    "**The \"deep\" in deep learning**\n",
    "\n",
    "- it isn't a reference to any kind of deeper understanding achieved by the approach;\n",
    "\n",
    "- it stands for the idea of successive layers of representations.\n",
    "\n",
    "Shallow learning is referring to approaches in machine learning that focus on learning only one or two layers of representations of the data.\n",
    "\n",
    "See the deep representations learned by a 4-layer neural network for digit number 4.\n",
    "\n",
    "![deep_rep](https://dpzbhybb2pdcj.cloudfront.net/chollet/HighResolutionFigures/figure_1-6.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The Promise\n",
    "\n",
    "Although we may have unrealistic short-term expectations for AI, the long-term picture is looking bright. We're only getting started in applying deep learning in real-world applications. Right now, it may seem hard to believe that AI could have a large impact on our world, because it isn't yet widely deployed — much as, back in 1995, it would have been difficult to believe in the future impact of the internet.\n",
    "\n",
    "Don't believe the short-term hype, but do believe in the long-term vision. Deep learning has several properties that justify its status as an AI revolution:\n",
    "\n",
    "- **Simplicity**: Deep learning removes the need for many heavy-duty engineering preprocessing.\n",
    "\n",
    "- **Scalability**: Deep learning is highly amenable to parallelization on GPUs or TPUs. Deep-learning models are trained by iterating over small batches of data, allowing them to be trained on datasets of pretty much arbitrary size.\n",
    "\n",
    "- **Versatility and reusability**: deep-learning models can be trained on additional data without restarting from scratch. Trained deep-learning models are repurposable. For instance, it's possible to take a deep-learning model trained for image classification and drop it into a video processing pipeline.\n",
    "\n",
    "Deep learning has only been in the spotlight for a few years, and we haven't yet established the full scope of what it can do."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Neural Network Structures\n",
    "\n",
    "Tensors are fundamental to the data representations for neural networks — so fundamental that Google's TensorFlow was named after them.\n",
    "\n",
    "![tensor](https://github.com/ming-zhao/Business-Analytics/raw/master/images/tensor.png)\n",
    "\n",
    "- Scalars: 0 dimensional tensors\n",
    "\n",
    "- Vectors: 1 dimensional tensors\n",
    "\n",
    "- Matrix: 2 dimensional tensors\n",
    "\n",
    "Let's make data tensors more concrete with real-world examples:\n",
    "\n",
    "- Vector data — 2D tensors of shape (samples, features)\n",
    "\n",
    "- Timeseries data or sequence data — 3D tensors of shape (samples, timesteps, features)\n",
    "\n",
    "- Images — 4D tensors of shape (samples, height, width, channels) or (samples, channels, height, width)\n",
    "\n",
    "- Video — 5D tensors of shape (samples, frames, height, width, channels) or (samples, frames, channels, height, width)\n",
    "\n",
    "\n",
    "There are mainly three families of network architectures that are **densely connected networks, convolutional networks, and recurrent networks**. A network architecture encodes assumptions about the structure of the data.\n",
    "\n",
    "- A densely connected network is a stack of Dense layers and assume no specific structure in the input features.\n",
    "\n",
    "- Convnets, or convolutional networks (CNNs), consist of stacks of convolution and max-pooling layers. Convolution layers look at spatially local patterns by applying the same geometric transformation to different spatial locations (patches) in an input tensor.\n",
    "\n",
    "- Recurrent neural networks (RNNs) work by processing sequences of inputs one time step at a time and maintaining a state throughout"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Prediction v.s. Decision\n",
    "\n",
    "What is the capital of Delaware?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"hide_answer(this); return false;\">show answer</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hide_answer()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A machine called Alexa says the correct answer: \"The capital of Delaware is Dover.\"\n",
    "\n",
    "The new wave of artificial intelligence does not actually bring us intelligence but instead a critical component of intelligence — prediction. \n",
    "\n",
    "What Alexa was doing when we asked a question was taking the sounds it heard and predicting the words we spoke and then predicting what information the words were looking for. \n",
    "\n",
    "Alexa doesn't \"know\" the capital of Delaware. But Alexa is able to predict that, when people ask such a question, they are looking for a specific response: Dover.\n",
    "\n",
    "<span style=\"float:right\"> $\\blacksquare$ </span>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![anatomy](http://ide.mit.edu/sites/default/files/people-photos/Prediction-MIT-18-04-12_Page_30.jpg)\n",
    "\n",
    "What is the difference between judgment and prediction?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"hide_answer(this); return false;\">show answer</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hide_answer()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[YouTube](https://www.youtube.com/watch?v=4kuaikerPKs)![irobot](https://github.com/ming-zhao/Business-Analytics/raw/master/images/iRobot.png)\n",
    "\n",
    "In the movie \"I, Robot.\", there's one scene that makes it very clear what this distinction between prediction and judgment is. \n",
    "\n",
    "Will Smith is the star of the movie and he has a flashback scene where he's in a car accident with a 12-year-old girl. And they're drowning and then a robot arrives, somehow miraculously, and can save one of them. \n",
    "\n",
    "The robot apparently makes this calculation that Will Smith has a 45% chance of survival and the girl only had an 11% chance. And therefore, the robot saves Will Smith. \n",
    "\n",
    "Will Smith concludes that the robot made the wrong decision. 11% was more than enough. A human being would have known that. \n",
    "\n",
    "So that's all well and good and he's assuming that the robot values his life and the girl's life the same. But in order for the robot to make a decision, it needs the prediction on survival and a statement about how much more valuable the girl's life has to be than Will Smith's life in order to choose. \n",
    "\n",
    "This decision that we've seen, all it says is Will Smith's life is worth at least a quarter of the girl's life. That valuation decision matters, because at some point even Will Smith would disagree with this. At some point, if her chance of survival was 1%, or 0.1%, or 0.01%, that decision would flip. That's judgment. That's knowing what to do with the prediction once you have one. \n",
    "\n",
    "So judgment is the process of determining what the reward is to a particular action in a particular environment. Decision analysis tools (such as optimization and simulation) can be used for balancing the reward and cost (or risk).\n",
    "\n",
    "We need to understand the consequences of cheap prediction and its importance in decision-making\n",
    "\n",
    "<span style=\"float:right\"> $\\blacksquare$ </span>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Current Status of Deep Learning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Achievements\n",
    "\n",
    "Deep learning has achieved the following breakthroughs, all in historically difficult areas of machine learning:\n",
    "\n",
    "- Near-human-level image classification\n",
    "\n",
    "- Near-human-level speech recognition\n",
    "\n",
    "- Near-human-level handwriting transcription\n",
    "\n",
    "- Improved machine translation\n",
    "\n",
    "- Improved text-to-speech conversion\n",
    "\n",
    "- Digital assistants such as Google Now and Amazon Alexa\n",
    "\n",
    "- Near-human-level autonomous driving\n",
    "\n",
    "- Improved ad targeting, as used by Google, Baidu, and Bing\n",
    "\n",
    "- Improved search results on the web\n",
    "\n",
    "- Ability to answer natural-language questions\n",
    "\n",
    "- Superhuman Go playing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Hardware\n",
    "\n",
    "Although our laptop can run small deep-learning models, typical deep-learning models used in computer vision or speech recognition require orders of magnitude more computational power.\n",
    "\n",
    "Throughout the 2000s, companies like NVIDIA and AMD have been investing billions of dollars in developing fast, massively parallel chips, graphical processing units (GPUs), to power the graphics of increasingly photorealistic video games — cheap, single-purpose supercomputers designed to render complex 3D scenes on the screen in real time.\n",
    "\n",
    "At the end of 2015, the NVIDIA TITAN X, a gaming GPU that cost \\$1,000 can perform 6.6 trillion `float32` operations per second. That is about 350 times more than what you can get out of a modern laptop. Meanwhile, large companies train deep-learning models on clusters of hundreds of GPUs of a type developed specifically for the needs of deep learning, such as the NVIDIA Tesla K80. The sheer computational power of such clusters is something that would never have been possible without modern GPUs.\n",
    "\n",
    "The deep-learning industry is starting to go beyond GPUs and is investing in increasingly specialized, efficient chips for deep learning. In 2016, at its annual I/O convention, Google revealed its tensor processing unit (TPU) project: a new chip design developed from the ground up to run deep neural networks, which is reportedly 10 times faster and far more energy efficient than top-of-the-line GPUs.\n",
    "\n",
    "If you don't already have a GPU that you can use for deep learning, then running deep-learning experiments in the cloud is a simple, low cost way for you to get started without having to buy any additional hardware. But if you're a heavy user of deep learning, this setup isn't sustainable in the long term or even for more than a few weeks."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Investment\n",
    "\n",
    "As deep learning became the new state of the art for computer vision and eventually for all perceptual tasks, industry leaders took note. What followed was a gradual wave of industry investment far beyond anything previously seen in the history of AI.\n",
    "\n",
    "- In 2011 (right before deep learning took the spotlight), the total venture capital investment in AI was around <span>&dollar;</span>19 million\n",
    "\n",
    "- By 2014, the total venture capital investment in AI had risen to <span>&dollar;</span>394 million\n",
    "\n",
    "    - Google acquired the deep-learning startup DeepMind for a reported <span>&dollar;</span>500 million — the largest acquisition of an AI company in history.\n",
    "    \n",
    "    - Baidu started a deep-learning research center in Silicon Valley, investing <span>&dollar;</span>300 million in the project.\n",
    "    \n",
    "    - Intel acquired a deep-learning hardware startup Nervana Systems for over <span>&dollar;</span>400 million.\n",
    "    \n",
    "There are currently no signs that this uptrend will slow any time soon."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As entrepreneurs of AI start-ups, Alice and Bob had received similar amount of investments and competed in the same market\n",
    "\n",
    "- Alice spent lots of money to hire top engineers in AI field\n",
    "\n",
    "- Bob hired only mediocre engineers and spent most of his money to obtain high quality data with larger size\n",
    "\n",
    "Who will you invest? Why?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"hide_answer(this); return false;\">show answer</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hide_answer()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "acc1 = net_compare(512, .25)\n",
    "acc2 = net_compare(128, 1)\n",
    "print('The accuracy of a complicated model (with 512 nodes) with less (one fourth of) training data:', acc1)\n",
    "print('The accuracy of a simple model (with 128 nodes) and full training data:', acc2)\n",
    "print('The improvement is {}%!'.format(round((acc2-acc1)/(1-acc1)*100,2)))\n",
    "```\n",
    "\n",
    "<span style=\"float:right\"> $\\blacksquare$ </span>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Development\n",
    "\n",
    "Suppose you're trying to develop a model that can take as input images of a clock \n",
    "\n",
    "![clock](https://github.com/ming-zhao/Business-Analytics/raw/master/images/clock.png)\n",
    "\n",
    "and can output the time of day. What machine learning approach will you use?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"hide_answer(this); return false;\">show answer</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hide_answer()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you choose to use the raw pixels of the image as input data, then you have a difficult machine-learning problem on your hands. You'll need a convolutional neural network to solve it, and you'll have to expend quite a bit of computational resources to train the network.\n",
    "\n",
    "But if you already understand the problem at a high level, you can write a five-line Python script to follow the **black pixels of the clock hands** and output the $(x, y)$ coordinates of the tip of each hand. \n",
    "\n",
    "Then a simple machine-learning algorithm can learn to associate these coordinates with the appropriate time of day. For example, \n",
    "\n",
    "- the long hand has $(x=0.7, y=0.7)$ and the short hand has $(x=0.5, y=0.0)$ in the first image, and \n",
    "\n",
    "- the long hand has $(x=0.0, y=1.0)$ and the short hand has $(x=-0.38, y=0.32)$ in the second image.\n",
    "\n",
    "You can go even further: do a coordinate change, and express the $(x, y)$ coordinates as the angle of each clock hand. For example, \n",
    "\n",
    "- the long hand has angle $45$ degree and the short hand has angle $0$ degree in the first image, and \n",
    "\n",
    "- the long hand has angle $90$ degree and the short hand has angle $140$ degree in the second image. \n",
    "\n",
    "At this point, your features are making the problem so easy that no machine learning is required; a simple rounding operation and dictionary lookup are enough to recover the approximate time of day.\n",
    "\n",
    "<span style=\"float:right\"> $\\blacksquare$ </span>"
   ]
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "10ed585367ba4ebbb20fc6e771383eec": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_cd07fba52ca04809a180e9d1dae4afc3",
       "outputs": [
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 1440x288 with 5 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "1d7e722a62cd4b41b64625a052530cc5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "1f6d15d8a41448f5bd6854f7c19376dd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_b275e47c95d9490e8149d8b1eaf1d0bc",
        "IPY_MODEL_ba2761d29e534453ade84d29505b64d3",
        "IPY_MODEL_b6d434e578e045bcae6d62b2c2bea3d0"
       ],
       "layout": "IPY_MODEL_89773bb075cf455c869c3e595753f174"
      }
     },
     "232fd1a0a5e347a1a9bf2ab622f96981": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "2929431729f64c31a5c8ba4a2ee0f281": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "33d589f0c2fe4845bef08fb961309dfe": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_options_labels": [
        "train",
        "test"
       ],
       "description": "Data:",
       "index": 0,
       "layout": "IPY_MODEL_cbd0782c4ee249c5b9b83fd6348e360f",
       "style": "IPY_MODEL_523aae06adbf4d90a0961be6fae3171a"
      }
     },
     "3761ef60a64f4b7ba0e911e3cf8e6f8d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "3d32be9b4fd24accb241476f214f98b2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_1d7e722a62cd4b41b64625a052530cc5",
       "style": "IPY_MODEL_b280ac28f21241ceadf81b2af3b6f042",
       "value": true
      }
     },
     "3ea799b1e06944e3bf653dbb3b8bd929": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "3fd9a807146b43c78a0a75c5fea93cdd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "age",
        "weight",
        "income",
        "car_value",
        "debt",
        "mall_trips",
        "gender",
        "alone",
        "dwell",
        "pay_type",
        "nbhd",
        "tried"
       ],
       "description": "column:",
       "index": 8,
       "layout": "IPY_MODEL_67084cfebaab480893baa2d19e0ad699",
       "style": "IPY_MODEL_ddb56fc1d87b4d81b3a26ec2ea3bc9e6"
      }
     },
     "41055fa25d3c4e66bccddf10e387695b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "4d1b0a40c6984b998250030bb9ea4d7c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "523aae06adbf4d90a0961be6fae3171a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "5458d4dcc1084844897b7ee0998eba79": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "54936233f3b245fabbc90ee3432ebf3a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "56609b1e8fec45e29a354deb8aceab07": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "5cec526ba8624204b65ef6b1c474cc05": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "IntTextModel",
      "state": {
       "description": "Index:",
       "layout": "IPY_MODEL_6ccf0a85e872421ca6a331ad6ab89931",
       "step": 1,
       "style": "IPY_MODEL_54936233f3b245fabbc90ee3432ebf3a",
       "value": 7
      }
     },
     "5e2da7c11e58430b83453fbb6ddee065": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "6603881dfa374997aeaf659849d89365": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "67084cfebaab480893baa2d19e0ad699": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "6820c502acce4e0f8f245e5aea761749": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_7f663ba8abed422ca65b506b0291c816",
        "IPY_MODEL_6bc3739093ca489e93ecd5927b9f1872",
        "IPY_MODEL_89a087adc2ec49f082f2b61383d0176f"
       ],
       "layout": "IPY_MODEL_df2e8613437446249af8078aab4a2ff5"
      }
     },
     "6bc3739093ca489e93ecd5927b9f1872": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "IntTextModel",
      "state": {
       "description": "Index:",
       "layout": "IPY_MODEL_3761ef60a64f4b7ba0e911e3cf8e6f8d",
       "step": 1,
       "style": "IPY_MODEL_4d1b0a40c6984b998250030bb9ea4d7c",
       "value": 7
      }
     },
     "6c9ba27ecf174d45890fc81d93157844": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "age",
        "weight",
        "income",
        "car_value",
        "debt",
        "mall_trips",
        "gender",
        "alone",
        "dwell",
        "pay_type",
        "nbhd",
        "tried"
       ],
       "description": "column:",
       "index": 8,
       "layout": "IPY_MODEL_a131d23d76f04ca49c389dacae7bdcd7",
       "style": "IPY_MODEL_fcb6122892e1454db0f5873837ab99e0"
      }
     },
     "6ccf0a85e872421ca6a331ad6ab89931": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "751ef4f69ae04fe69ff2ee6db52197f3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_6c9ba27ecf174d45890fc81d93157844",
        "IPY_MODEL_ee01d52c5dfa4031b6ebf36f52514202",
        "IPY_MODEL_fe513f6df72d4aea9ac3ad89aa82f279"
       ],
       "layout": "IPY_MODEL_785831f6461a4617807280a83671c043"
      }
     },
     "785831f6461a4617807280a83671c043": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "7f663ba8abed422ca65b506b0291c816": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_options_labels": [
        "train",
        "test"
       ],
       "description": "Data:",
       "index": 0,
       "layout": "IPY_MODEL_92d3165df7694f1591865a2b49cbfa28",
       "style": "IPY_MODEL_56609b1e8fec45e29a354deb8aceab07"
      }
     },
     "89773bb075cf455c869c3e595753f174": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "89a087adc2ec49f082f2b61383d0176f": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_5e2da7c11e58430b83453fbb6ddee065",
       "outputs": [
        {
         "data": {
          "image/png": "\n",
          "text/plain": "<Figure size 1440x288 with 5 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "916855a4d8b74cd9b7e058e905313898": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "92d3165df7694f1591865a2b49cbfa28": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "9871f67a94a84b2ca09c6e4dcdd97d7d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "a131d23d76f04ca49c389dacae7bdcd7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "a3cb36f9b40f420d9afa71b550faa85d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "abeb5156764344ffb79ea7db0b86bac3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "b0ab5e6e814c4ab8988136263a648ef0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_e303296ddb824da4805e7b2fcf3b934b",
        "IPY_MODEL_5cec526ba8624204b65ef6b1c474cc05",
        "IPY_MODEL_10ed585367ba4ebbb20fc6e771383eec"
       ],
       "layout": "IPY_MODEL_a3cb36f9b40f420d9afa71b550faa85d"
      }
     },
     "b275e47c95d9490e8149d8b1eaf1d0bc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "DropdownModel",
      "state": {
       "_options_labels": [
        "age",
        "weight",
        "income",
        "car_value",
        "debt",
        "mall_trips",
        "gender",
        "alone",
        "dwell",
        "pay_type",
        "nbhd",
        "tried"
       ],
       "description": "column:",
       "index": 8,
       "layout": "IPY_MODEL_abeb5156764344ffb79ea7db0b86bac3",
       "style": "IPY_MODEL_41055fa25d3c4e66bccddf10e387695b"
      }
     },
     "b280ac28f21241ceadf81b2af3b6f042": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "b3adaa0b411a483b86f8a4b547cf4ef4": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_2929431729f64c31a5c8ba4a2ee0f281",
       "outputs": [
        {
         "data": {
          "image/png": "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\n",
          "text/plain": "<Figure size 1440x288 with 5 Axes>"
         },
         "metadata": {
          "needs_background": "light"
         },
         "output_type": "display_data"
        }
       ]
      }
     },
     "b6d434e578e045bcae6d62b2c2bea3d0": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_6603881dfa374997aeaf659849d89365",
       "outputs": [
        {
         "data": {
          "text/plain": "{('No', 'Home'): 0.4682274247491639,\n ('No', 'Condo'): 0.3010033444816054,\n ('No', 'Apt'): 0.23076923076923078,\n ('Yes', 'Home'): 0.4463840399002494,\n ('Yes', 'Apt'): 0.2817955112219451,\n ('Yes', 'Condo'): 0.2718204488778055}"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "ba1f56492b234c19bb6d1371fa4f2251": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "ba2761d29e534453ade84d29505b64d3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_bf79f55e905648509e9be5c8f99df7ba",
       "style": "IPY_MODEL_e539916dc95a44a3ad28a5a7faebe9ee",
       "value": true
      }
     },
     "bdf2de2849ce4ef0b4c4f632e17e3a6f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "bf79f55e905648509e9be5c8f99df7ba": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "c48b5e896a2a4d82b5738258407d9e08": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "c5bf2f56710b4fddaec8e15e138f9401": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_c48b5e896a2a4d82b5738258407d9e08",
       "outputs": [
        {
         "data": {
          "text/plain": "{('No', 'Home'): 0.4682274247491639,\n ('No', 'Condo'): 0.3010033444816054,\n ('No', 'Apt'): 0.23076923076923078,\n ('Yes', 'Home'): 0.4463840399002494,\n ('Yes', 'Apt'): 0.2817955112219451,\n ('Yes', 'Condo'): 0.2718204488778055}"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     },
     "cbd0782c4ee249c5b9b83fd6348e360f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "cd07fba52ca04809a180e9d1dae4afc3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "d534cd3480984310a2d052e2f29c4943": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "IntTextModel",
      "state": {
       "description": "Index:",
       "layout": "IPY_MODEL_ba1f56492b234c19bb6d1371fa4f2251",
       "step": 1,
       "style": "IPY_MODEL_5458d4dcc1084844897b7ee0998eba79",
       "value": 7
      }
     },
     "ddb56fc1d87b4d81b3a26ec2ea3bc9e6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "df2e8613437446249af8078aab4a2ff5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "e27f1532490c43cda39cce200bab89c0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_3fd9a807146b43c78a0a75c5fea93cdd",
        "IPY_MODEL_3d32be9b4fd24accb241476f214f98b2",
        "IPY_MODEL_c5bf2f56710b4fddaec8e15e138f9401"
       ],
       "layout": "IPY_MODEL_3ea799b1e06944e3bf653dbb3b8bd929"
      }
     },
     "e303296ddb824da4805e7b2fcf3b934b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "RadioButtonsModel",
      "state": {
       "_options_labels": [
        "train",
        "test"
       ],
       "description": "Data:",
       "index": 0,
       "layout": "IPY_MODEL_232fd1a0a5e347a1a9bf2ab622f96981",
       "style": "IPY_MODEL_9871f67a94a84b2ca09c6e4dcdd97d7d"
      }
     },
     "e3c562c99a594a6aab98f0fc47f06efa": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "e539916dc95a44a3ad28a5a7faebe9ee": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "e6465ba66c954901bb2b36842fdfde92": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [
        "widget-interact"
       ],
       "children": [
        "IPY_MODEL_33d589f0c2fe4845bef08fb961309dfe",
        "IPY_MODEL_d534cd3480984310a2d052e2f29c4943",
        "IPY_MODEL_b3adaa0b411a483b86f8a4b547cf4ef4"
       ],
       "layout": "IPY_MODEL_916855a4d8b74cd9b7e058e905313898"
      }
     },
     "e7e5887ba0894a818aa2a3f848a914b9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.1.0",
      "model_name": "LayoutModel",
      "state": {}
     },
     "ee01d52c5dfa4031b6ebf36f52514202": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "CheckboxModel",
      "state": {
       "description": "normalize",
       "disabled": false,
       "layout": "IPY_MODEL_e3c562c99a594a6aab98f0fc47f06efa",
       "style": "IPY_MODEL_bdf2de2849ce4ef0b4c4f632e17e3a6f",
       "value": true
      }
     },
     "fcb6122892e1454db0f5873837ab99e0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.4.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "description_width": ""
      }
     },
     "fe513f6df72d4aea9ac3ad89aa82f279": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "layout": "IPY_MODEL_e7e5887ba0894a818aa2a3f848a914b9",
       "outputs": [
        {
         "data": {
          "text/plain": "{('No', 'Home'): 0.4682274247491639,\n ('No', 'Condo'): 0.3010033444816054,\n ('No', 'Apt'): 0.23076923076923078,\n ('Yes', 'Home'): 0.4463840399002494,\n ('Yes', 'Apt'): 0.2817955112219451,\n ('Yes', 'Condo'): 0.2718204488778055}"
         },
         "metadata": {},
         "output_type": "display_data"
        }
       ]
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
