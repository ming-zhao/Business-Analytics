{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<script>\n",
       "  var password,\n",
       "      teacher_mode,\n",
       "      isHtml;\n",
       "      \n",
       "  var class_output,\n",
       "      class_input,\n",
       "      class_answer;\n",
       "      \n",
       "  function code_toggle(e) {\n",
       "    var orig_e = e;\n",
       "    while (!e.closest(class_output).previousElementSibling.classList.contains(class_input)) {\n",
       "      e = e.closest(class_output).previousElementSibling;\n",
       "    }\n",
       "    var target = e.closest(class_output).previousElementSibling;\n",
       "    if (target.getAttribute(\"style\") == \"\" || target.getAttribute(\"style\") == null) {\n",
       "      target.style.display = \"none\";\n",
       "      orig_e.innerHTML = 'show code';\n",
       "    }\n",
       "    else {\n",
       "      target.style.removeProperty(\"display\");\n",
       "      orig_e.innerHTML = 'hide code';\n",
       "    }\n",
       "  }\n",
       "  \n",
       "  function hide_answer(e) {\n",
       "    var target = e.closest(class_answer).nextElementSibling;\n",
       "    //e.closest(class_output).previousElementSibling.style.display = \"none\";\n",
       "    if (target.getAttribute(\"style\") == \"\" || target.getAttribute(\"style\") == null) {\n",
       "      target.style.display = \"none\";\n",
       "      e.innerHTML = 'show answer';\n",
       "    }\n",
       "    else if (teacher_mode) {\n",
       "        e.innerHTML = 'hide answer';\n",
       "        target.style.removeProperty(\"display\");\n",
       "    }\n",
       "  }\n",
       "  \n",
       "  function done() { \n",
       "    document.getElementById(\"popup\").style.display = \"none\";\n",
       "    var input = document.getElementById(\"password\").value;\n",
       "    if (input==password) { teacher_mode=1; alert(\"Unlocked!\");}\n",
       "    else { teacher_mode=0; alert(\"Wrong password!\");}       \n",
       "  };\n",
       "\n",
       "  function unlock() {\n",
       "    document.getElementById(\"popup\").style.display = \"block\";\n",
       "  }\n",
       "  \n",
       "  $(document).ready(function() {\n",
       "    $.ajax({\n",
       "      type: \"GET\",  \n",
       "      url: \"https://raw.githubusercontent.com/ming-zhao/ming-zhao.github.io/master/data/course.csv\",\n",
       "      dataType: \"text\",       \n",
       "      success: function(data)  \n",
       "      {\n",
       "        var items = data.split(',');\n",
       "        var url = window.location.pathname;\n",
       "        var filename = url.substring(url.lastIndexOf('/')+1);\n",
       "        password='123';\n",
       "        for (var i = 0, len = items.length; i < len; ++i) {\n",
       "            if (filename.includes(items[i].trim()) && i%2==0 && i<items.length) {\n",
       "                password=items[i+1].trim();\n",
       "                break;\n",
       "            }\n",
       "        }\n",
       "        var code_blocks = document.getElementsByClassName('nbinput docutils container');\n",
       "        if (code_blocks[0]==null) { \n",
       "            isHtml=0;\n",
       "            code_blocks = document.getElementsByClassName('input');\n",
       "            class_output=\".output_wrapper\";\n",
       "            class_input=\"input\";\n",
       "            class_answer='.cell';\n",
       "        }\n",
       "        else { \n",
       "            isHtml=1;\n",
       "            class_output=\".nboutput\";\n",
       "            class_input=\"nbinput\";\n",
       "            class_answer=\".nboutput\";\n",
       "        }\n",
       "        \n",
       "        for (var i = 0, len = code_blocks.length; i < len; ++i) {\n",
       "          if (\n",
       "              code_blocks[i].innerHTML.indexOf(\"toggle\") !== -1 \n",
       "              || code_blocks[i].innerHTML.indexOf(\"button onclick\") !== -1\n",
       "             ) {\n",
       "            code_blocks[i].style.display = \"none\";\n",
       "          }\n",
       "        }\n",
       "        for (var i = 0, len = code_blocks.length; i < len; ++i) {\n",
       "          if (code_blocks[i].innerHTML.indexOf(\"hide_answer\") !== -1) {\n",
       "            code_blocks[i].style.display = \"none\";\n",
       "            if (isHtml) {\n",
       "              code_blocks[i].nextElementSibling.nextElementSibling.style.display = \"none\";\n",
       "            }\n",
       "            else{\n",
       "              code_blocks[i].closest(class_answer).nextElementSibling.style.display = \"none\";\n",
       "            }            \n",
       "          }\n",
       "        }\n",
       "        \n",
       "        \n",
       "      }\n",
       "    });\n",
       "  });\n",
       "</script>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "<div id=\"popup\" style=\"padding-bottom:5px; display:none;\">\n",
       "    <div>Enter Password:</div>\n",
       "    <input id=\"password\" type=\"password\"/>\n",
       "    <button onclick=\"done()\" style=\"border-radius: 12px;\">Submit</button>    \n",
       "</div>\n",
       "<button onclick=\"unlock()\" style=\"border-radius: 12px;\">Unclock</button>\n",
       "<a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%run ../initscript.py\n",
    "HTML(\"\"\"\n",
    "<div id=\"popup\" style=\"padding-bottom:5px; display:none;\">\n",
    "    <div>Enter Password:</div>\n",
    "    <input id=\"password\" type=\"password\"/>\n",
    "    <button onclick=\"done()\" style=\"border-radius: 12px;\">Submit</button>    \n",
    "</div>\n",
    "<button onclick=\"unlock()\" style=\"border-radius: 12px;\">Unclock</button>\n",
    "<a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "vhizvgsQ9JI7"
   },
   "source": [
    "# Exploring Data\n",
    "\n",
    "Data and information are so prevalent in our lives today, that it is known as the “Information Age”. Being literate today means not just being able to read, but being able to understand the massive amount of information thrown at us every day – much of it on the computer. Statistics is the science of making effective use of numerical data. It deals with all aspects of data, including the collection, analysis and interpretation of data. However, it can be easily misinterpreted and manipulated. As Mark Twain said\n",
    "\n",
    "<center>\n",
    "‘There are lies, damned lies, and statistics.’   -- Mark Twain\n",
    "</center>\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "39llJy5VKejU"
   },
   "source": [
    "## Percentage\n",
    "\n",
    "Percentage is the most frequently used concept in business analytics because of many uncertainties in today’s complex business environment. But many times people use it without really understanding its meaning.\n",
    "\n",
    "![pct](https://github.com/ming-zhao/Business-Analytics/raw/master/images/pct.png)\n",
    "\n",
    "\n",
    "Percentage is a relative terminology. It is always important to ask “percentage of what” as shown in this simple example. \n",
    "\n",
    "... of what?\n",
    "* Pay: &dollar;10,000 per month.\n",
    "\n",
    "* \"Sorry guys. You have to have a 10% pay cut.\"\n",
    "\n",
    "* Pay: &dollar;9,000 per month.\n",
    "\n",
    "* \"Now I can give you a 10% pay rise.\"\n",
    "\n",
    "* Pay: &dollar;9,900 per month.\n",
    "\n",
    "What does \"60% sure or confidence\" mean? This is about probability. If we flip a coin 100 times and see the head 50 times, then we could say that we are 60% sure that next toss will show a head. In business, the technique meaning is that if decision maker can try 100 times with current business environment, s/he may reach a result for 60 times."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Question 1:**\n",
    "\n",
    "There are 3 sequences (each of them has 10 symbols with 6 Xs and 4 Os):\n",
    "\n",
    "1) OXXOXOXOXX\n",
    "\n",
    "2) XXOXOOXXXO\n",
    "\n",
    "3) XOXXOXOXOX\n",
    "\n",
    "Predict the next symbol for those 3 sequences\n",
    "\n",
    "* A) 1-O, 2-X, 3-O\n",
    "* B) 1-X, 2-X, 3-X\n",
    "* C) 1-O, 2-O, 3-O\n",
    "* D) 1-X, 2-O, 3-X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"hide_answer(this); return false;\">show answer</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hide_answer()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(B) is correct. In a psychology experiment, subjects receive random series of Xs and Os and asks them to predict what the next one will be. For instance, they may see:\n",
    "<center>\n",
    "OXXOXOXOXOXXOOXXOXOXXXOXX\n",
    "</center><br>\n",
    "most people realize that there are slightly more Xs than Os — if you count, you'll see it's 60 percent Xs, 40 percent Os — so they guess X most of the time, but throw in some Os to reflect that balance. However, if you want to maximize your chances of a correct prediction, you would always choose X. Then you would be right 60 percent of the time. If you randomize 60/40, as most participants do, your prediction ends up being correct 52 percent of the time, only slightly better than if you had not  bothered to assess relative frequencies of Xs and Os and instead just guessed one or the other (50/50).\n",
    "<br>\n",
    "<span>1. [Sixty percent of the time you choose X and are correct 60 percent of the time, while 40 percent of the time you choose O and are correct only 40 percent of the time. On average, this is $0.6^2 + 0.4^2 = 0.52$.]</span>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Question 2:**\n",
    "\n",
    "The chance a baby will be a boy (or girl) is 50%. There are two hospitals:\n",
    "\n",
    "- A - 45 births per day\n",
    "- B - 15 births per day\n",
    "\n",
    "Which hospital would have more days when 60% or more of the babies born are boys?\n",
    "\n",
    "* A) Hospital A\n",
    "* B) Hospital B\n",
    "* C) Equal chance\n",
    "* D) Uncertain"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"hide_answer(this); return false;\">show answer</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hide_answer()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "(B) is correct. The smaller hospital is correct because the larger the number of events (in this case, births), the likelier each daily outcome will be close to the average (in this case, 50 percent). To see how this works, imagine you are flipping coins. You are more likely to get heads every time if you flip five coins than if you flip fifty coins. Thus, the smaller hospital — precisely because it has fewer births — is more likely to have more extreme outcomes away from the average."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "GRWhHR58NU8X"
   },
   "source": [
    "## Average\n",
    "\n",
    "If you were a real-estate agent and trying to convince people to move into a particular neighborhood. You could, with perfect honesty and \"truthfulness\" tell different people that the average income in the neighborhood is: a), b) or c). \n",
    "\n",
    "![house](https://github.com/ming-zhao/Business-Analytics/raw/master/images/house.png)\n",
    "\n",
    "because we have mean, median and mode to characterize the central tendency.\n",
    "\n",
    "![avg](https://github.com/ming-zhao/Business-Analytics/raw/master/images/avg.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "U8-f3te5OW7I"
   },
   "source": [
    "## Data Visualization\n",
    "\n",
    "If your goal is to lie, cheat, manipulate, or mislead, Graphical Displays are your friend…\n",
    "\n",
    "![pie](https://github.com/ming-zhao/Business-Analytics/raw/master/images/pie.png)\n",
    "\n",
    "**Example 1:**\n",
    "\n",
    "![chart1](https://github.com/ming-zhao/Business-Analytics/raw/master/images/chart1.png)\n",
    "\n",
    "**Example 2:**\n",
    "\n",
    "![chart2](https://github.com/ming-zhao/Business-Analytics/raw/master/images/chart2.png)\n",
    "\n",
    "**Example 3:**\n",
    "\n",
    "![chart3](https://github.com/ming-zhao/Business-Analytics/raw/master/images/chart3.png)\n",
    "\n",
    "**Example 4:**\n",
    "\n",
    "![chart4](https://github.com/ming-zhao/Business-Analytics/raw/master/images/chart4.png)\n",
    "\n",
    "As \"Statistics is the art of never having to say you’re wrong\", I would like to recommend a book\n",
    "\n",
    "![book_lie](https://github.com/ming-zhao/Business-Analytics/raw/master/images/book_lie.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "fx1gIpY_KiNx"
   },
   "source": [
    "## [Case](https://github.com/ming-zhao/Business-Analytics/blob/master/notebooks/parking_violation.ipynb): NYC Parking Violation\n",
    "\n",
    "We consider packing violation data in NYC from August 2013 to June 2014. The [dataset](https://data.cityofnewyork.us/City-Government/Parking-Violations-Issued-Fiscal-Year-2014-August-/jt7v-77mi\n",
    ") is available in [NYC Open Data](https://opendata.cityofnewyork.us/), which is a collection of 750 New York City public datasets made available by city agencies and organizations.\n",
    "\n",
    "The original dataset has 9.1M rows and 43 columns with size more than 1G. The dataset used in this note is already filtered with only hydrant paking violations. It is available in the [link](https://uofh-my.sharepoint.com/:f:/g/personal/mzhao7_cougarnet_uh_edu/EnrbM9YO1H1LlaYQ4yyFNvYBFEt2EEREu2JrzbeSTBunEA?e=yYtDsC)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "udhbE-qZ8YDA"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# load python packages and data\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from IPython.display import IFrame\n",
    "\n",
    "dataurl = 'https://raw.githubusercontent.com/ming-zhao/Business-Analytics/master/data/data_management/'\n",
    "df_park = pd.read_csv(dataurl+'Parking_Violations.csv', parse_dates=['Time'])\n",
    "\n",
    "# run pivot table\n",
    "df_pivot = df_park[(df_park['Street Code1']!=0) &\\\n",
    "                   (df_park['Street Code2']!=0) &\\\n",
    "                   (df_park['Street Code2']!=0)].pivot_table(values='Summons Number',\n",
    "                                                  index='Address',\n",
    "                                                  margins=False,\n",
    "                                                  aggfunc='count').sort_values(by='Summons Number',\n",
    "                                                                               ascending=False).head(10)\n",
    "df_pivot['ticket'] = df_pivot['Summons Number']\n",
    "df_pivot['fine'] = df_pivot['ticket']*115\n",
    "df_pivot = df_pivot.drop(['Summons Number'], axis=1)\n",
    "\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "oA1fbzPX_cCY"
   },
   "source": [
    "Show the first 5 rows of the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 306
    },
    "colab_type": "code",
    "id": "H9QlTRvr8lEC",
    "outputId": "831f20c0-8268-4f4a-d7af-3c1192485bbe"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Summons Number</th>\n",
       "      <th>Registration State</th>\n",
       "      <th>Issue Date</th>\n",
       "      <th>Vehicle Body Type</th>\n",
       "      <th>Street Code1</th>\n",
       "      <th>Street Code2</th>\n",
       "      <th>Street Code3</th>\n",
       "      <th>Vehicle Make</th>\n",
       "      <th>Violation Time</th>\n",
       "      <th>Violation County</th>\n",
       "      <th>Vehicle Color</th>\n",
       "      <th>Vehicle Year</th>\n",
       "      <th>Time</th>\n",
       "      <th>Address</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1356906515</td>\n",
       "      <td>NY</td>\n",
       "      <td>9/18/1971</td>\n",
       "      <td>SDN</td>\n",
       "      <td>13610</td>\n",
       "      <td>37270</td>\n",
       "      <td>37290</td>\n",
       "      <td>MAZDA</td>\n",
       "      <td>0914P</td>\n",
       "      <td>NY</td>\n",
       "      <td>BLK</td>\n",
       "      <td>2010</td>\n",
       "      <td>9:14 PM</td>\n",
       "      <td>4165 BROADWAY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1365454538</td>\n",
       "      <td>NY</td>\n",
       "      <td>2/12/1976</td>\n",
       "      <td>VAN</td>\n",
       "      <td>37290</td>\n",
       "      <td>10740</td>\n",
       "      <td>10940</td>\n",
       "      <td>TOYOT</td>\n",
       "      <td>0458A</td>\n",
       "      <td>Q</td>\n",
       "      <td>BLK</td>\n",
       "      <td>2007</td>\n",
       "      <td>4:58 AM</td>\n",
       "      <td>49-11 BROADWAY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1355329360</td>\n",
       "      <td>NY</td>\n",
       "      <td>12/9/1990</td>\n",
       "      <td>SUBN</td>\n",
       "      <td>35290</td>\n",
       "      <td>31240</td>\n",
       "      <td>31290</td>\n",
       "      <td>FORD</td>\n",
       "      <td>0902A</td>\n",
       "      <td>Q</td>\n",
       "      <td>BK</td>\n",
       "      <td>2003</td>\n",
       "      <td>9:02 AM</td>\n",
       "      <td>4402 BEACH CHANNEL DR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1364794688</td>\n",
       "      <td>NY</td>\n",
       "      <td>1/12/1991</td>\n",
       "      <td>SUBN</td>\n",
       "      <td>27106</td>\n",
       "      <td>9340</td>\n",
       "      <td>9540</td>\n",
       "      <td>ME/BE</td>\n",
       "      <td>0223P</td>\n",
       "      <td>Q</td>\n",
       "      <td>SILVE</td>\n",
       "      <td>2005</td>\n",
       "      <td>2:23 PM</td>\n",
       "      <td>40-30 235 ST</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1357592103</td>\n",
       "      <td>NY</td>\n",
       "      <td>1/4/2000</td>\n",
       "      <td>SDN</td>\n",
       "      <td>0</td>\n",
       "      <td>40404</td>\n",
       "      <td>40404</td>\n",
       "      <td>NISSA</td>\n",
       "      <td>1045P</td>\n",
       "      <td>R</td>\n",
       "      <td>SILVE</td>\n",
       "      <td>2008</td>\n",
       "      <td>10:45 PM</td>\n",
       "      <td>140 LUDWIGE LANE</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Summons Number Registration State Issue Date Vehicle Body Type  \\\n",
       "0      1356906515                 NY  9/18/1971               SDN   \n",
       "1      1365454538                 NY  2/12/1976               VAN   \n",
       "2      1355329360                 NY  12/9/1990              SUBN   \n",
       "3      1364794688                 NY  1/12/1991              SUBN   \n",
       "4      1357592103                 NY   1/4/2000               SDN   \n",
       "\n",
       "   Street Code1  Street Code2  Street Code3 Vehicle Make Violation Time  \\\n",
       "0         13610         37270         37290        MAZDA          0914P   \n",
       "1         37290         10740         10940        TOYOT          0458A   \n",
       "2         35290         31240         31290         FORD          0902A   \n",
       "3         27106          9340          9540        ME/BE          0223P   \n",
       "4             0         40404         40404        NISSA          1045P   \n",
       "\n",
       "  Violation County Vehicle Color  Vehicle Year      Time  \\\n",
       "0               NY           BLK          2010   9:14 PM   \n",
       "1                Q           BLK          2007   4:58 AM   \n",
       "2                Q            BK          2003   9:02 AM   \n",
       "3                Q         SILVE          2005   2:23 PM   \n",
       "4                R         SILVE          2008  10:45 PM   \n",
       "\n",
       "                 Address  \n",
       "0          4165 BROADWAY  \n",
       "1         49-11 BROADWAY  \n",
       "2  4402 BEACH CHANNEL DR  \n",
       "3           40-30 235 ST  \n",
       "4       140 LUDWIGE LANE  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_park.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "gF0xfIMxARu3"
   },
   "source": [
    "The top 10 hydrants that collect most of the tickets. Note that the fine for hydrant parking violation is $115. So the column 'fine' is the revenue generated by each hydrant and the total fine of the top 10 hydrants is &dollar;144,440.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 407
    },
    "colab_type": "code",
    "id": "w7tF_VAP8nAz",
    "outputId": "560494a0-b904-410e-f507-3262e60f488b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total annual revenue of top 10 hydrants 144440\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ticket</th>\n",
       "      <th>fine</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Address</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>152 Forsyth St</th>\n",
       "      <td>179</td>\n",
       "      <td>20585</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104 Forsyth St</th>\n",
       "      <td>137</td>\n",
       "      <td>15755</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100 Overlook Ter</th>\n",
       "      <td>135</td>\n",
       "      <td>15525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>720 Lenox Ave</th>\n",
       "      <td>127</td>\n",
       "      <td>14605</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>122 Montague St</th>\n",
       "      <td>126</td>\n",
       "      <td>14490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21 W 58th St</th>\n",
       "      <td>125</td>\n",
       "      <td>14375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2960 Fredrick Douglas Blv</th>\n",
       "      <td>119</td>\n",
       "      <td>13685</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44 Court St</th>\n",
       "      <td>114</td>\n",
       "      <td>13110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1498 3rd Ave</th>\n",
       "      <td>99</td>\n",
       "      <td>11385</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41-28 Main St</th>\n",
       "      <td>95</td>\n",
       "      <td>10925</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           ticket   fine\n",
       "Address                                 \n",
       "152 Forsyth St                179  20585\n",
       "104 Forsyth St                137  15755\n",
       "100 Overlook Ter              135  15525\n",
       "720 Lenox Ave                 127  14605\n",
       "122 Montague St               126  14490\n",
       "21 W 58th St                  125  14375\n",
       "2960 Fredrick Douglas Blv     119  13685\n",
       "44 Court St                   114  13110\n",
       "1498 3rd Ave                   99  11385\n",
       "41-28 Main St                  95  10925"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print('Total annual revenue of top 10 hydrants', df_pivot.fine.sum())\n",
    "df_pivot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 310
    },
    "colab_type": "code",
    "id": "Xyuimiem8u8C",
    "outputId": "94d2328f-bd90-4388-a66f-e934b92535cd"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "axes = df_pivot.plot.pie(y='ticket', autopct='%1.1f%%', figsize=(5, 5))\n",
    "axes.legend(loc='best', bbox_to_anchor=(2,.8))\n",
    "axes.set_ylabel('')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "KqRL7poIBbk5"
   },
   "source": [
    "The most \"valuable\" hydrant is shown in [google street view](https://www.google.com/maps/@40.7206121,-73.9917312,3a,75y,288.92h,55.77t/data=!3m6!1e1!3m4!1s_SBRnIVor2FDGiszffialA!2e0!7i13312!8i6656\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 421
    },
    "colab_type": "code",
    "id": "ILrVOV5Z83F7",
    "outputId": "cc937596-2460-4e69-e4b4-f6a2f682a2ed"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"700\"\n",
       "            height=\"400\"\n",
       "            src=\"https://www.google.com/maps/embed?pb=!4v1557893815788!6m8!1m7!1s_SBRnIVor2FDGiszffialA!2m2!1d40.72061441911959!2d-73.99172978854598!3f288.92!4f0!5f0.7820865974627469\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x1ca3fb357b8>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "IFrame('https://www.google.com/maps/embed?pb=!4v1557893815788!6m8!1m7!1s_SBRnIVor2FDGiszffialA!2m2!1d40.72061441911959!2d-73.99172978854598!3f288.92!4f0!5f0.7820865974627469', width=700, height=400)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Cmj83gIa8_6M"
   },
   "source": [
    "However, according to NYC department of transportation (DOT), this may not be considered as a parking violation. ![hydrant](https://github.com/ming-zhao/Business-Analytics/raw/master/images/hydrant.png)\n",
    "\n",
    "The issue is first spotted by Ben Wellington who is the author of blog [I Quant NY](https://iquantny.tumblr.com/). It certainly has impacts on NYC DOT. Today, the google street map shows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 421
    },
    "colab_type": "code",
    "id": "3G1UD5BSCquJ",
    "outputId": "4758c5a6-297c-40b0-8635-9d3c7bb6953b"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"700\"\n",
       "            height=\"400\"\n",
       "            src=\"https://www.google.com/maps/embed?pb=!4v1557932957501!6m8!1m7!1s04LptdatMEwvnW3J_tjGvw!2m2!1d40.72061130331954!2d-73.99171284164994!3f264.0115330665066!4f-27.9676492146982!5f0.7820865974627469\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x1ca3fbaca20>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "IFrame('https://www.google.com/maps/embed?pb=!4v1557932957501!6m8!1m7!1s04LptdatMEwvnW3J_tjGvw!2m2!1d40.72061130331954!2d-73.99171284164994!3f264.0115330665066!4f-27.9676492146982!5f0.7820865974627469', width=700, height=400)"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "parking_violation.ipynb",
   "provenance": [],
   "version": "0.3.2"
  },
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
