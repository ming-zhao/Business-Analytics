{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<script>\n",
       "  var password,\n",
       "      teacher_mode,\n",
       "      isHtml;\n",
       "      \n",
       "  var class_output,\n",
       "      class_input,\n",
       "      class_answer;\n",
       "      \n",
       "  function code_toggle(e) {\n",
       "    var orig_e = e;\n",
       "    while (!e.closest(class_output).previousElementSibling.classList.contains(class_input)) {\n",
       "      e = e.closest(class_output).previousElementSibling;\n",
       "    }\n",
       "    var target = e.closest(class_output).previousElementSibling;\n",
       "    if (target.getAttribute(\"style\") == \"\" || target.getAttribute(\"style\") == null) {\n",
       "      target.style.display = \"none\";\n",
       "      orig_e.innerHTML = 'show code';\n",
       "    }\n",
       "    else {\n",
       "      target.style.removeProperty(\"display\");\n",
       "      orig_e.innerHTML = 'hide code';\n",
       "    }\n",
       "  }\n",
       "  \n",
       "  function hide_answer(e) {\n",
       "    var target = e.closest(class_answer).nextElementSibling;\n",
       "    //e.closest(class_output).previousElementSibling.style.display = \"none\";\n",
       "    if (target.getAttribute(\"style\") == \"\" || target.getAttribute(\"style\") == null) {\n",
       "      target.style.display = \"none\";\n",
       "      e.innerHTML = 'show answer';\n",
       "    }\n",
       "    else if (teacher_mode) {\n",
       "        e.innerHTML = 'hide answer';\n",
       "        target.style.removeProperty(\"display\");\n",
       "    }\n",
       "  }\n",
       "  \n",
       "  function done() { \n",
       "    document.getElementById(\"popup\").style.display = \"none\";\n",
       "    var input = document.getElementById(\"password\").value;\n",
       "    if (input==password) { teacher_mode=1; alert(\"Unlocked!\");}\n",
       "    else { teacher_mode=0; alert(\"Wrong password!\");}       \n",
       "  };\n",
       "\n",
       "  function unlock() {\n",
       "    document.getElementById(\"popup\").style.display = \"block\";\n",
       "  }\n",
       "  \n",
       "  $(document).ready(function() {\n",
       "    $.ajax({\n",
       "      type: \"GET\",  \n",
       "      url: \"https://raw.githubusercontent.com/ming-zhao/ming-zhao.github.io/master/data/course.csv\",\n",
       "      dataType: \"text\",       \n",
       "      success: function(data)  \n",
       "      {\n",
       "        var items = data.split(',');\n",
       "        var url = window.location.pathname;\n",
       "        var filename = url.substring(url.lastIndexOf('/')+1);\n",
       "        password='123';\n",
       "        for (var i = 0, len = items.length; i < len; ++i) {\n",
       "            if (filename.includes(items[i].trim()) && i%2==0 && i<items.length) {\n",
       "                password=items[i+1].trim();\n",
       "                break;\n",
       "            }\n",
       "        }\n",
       "        var code_blocks = document.getElementsByClassName('nbinput docutils container');\n",
       "        if (code_blocks[0]==null) { \n",
       "            isHtml=0;\n",
       "            code_blocks = document.getElementsByClassName('input');\n",
       "            class_output=\".output_wrapper\";\n",
       "            class_input=\"input\";\n",
       "            class_answer='.cell';\n",
       "        }\n",
       "        else { \n",
       "            isHtml=1;\n",
       "            class_output=\".nboutput\";\n",
       "            class_input=\"nbinput\";\n",
       "            class_answer=\".nboutput\";\n",
       "        }\n",
       "        \n",
       "        for (var i = 0, len = code_blocks.length; i < len; ++i) {\n",
       "          if (\n",
       "              code_blocks[i].innerHTML.indexOf(\"toggle\") !== -1 \n",
       "              || code_blocks[i].innerHTML.indexOf(\"button onclick\") !== -1\n",
       "             ) {\n",
       "            code_blocks[i].style.display = \"none\";\n",
       "          }\n",
       "        }\n",
       "        for (var i = 0, len = code_blocks.length; i < len; ++i) {\n",
       "          if (code_blocks[i].innerHTML.indexOf(\"hide_answer\") !== -1) {\n",
       "            code_blocks[i].style.display = \"none\";\n",
       "            if (isHtml) {\n",
       "              code_blocks[i].nextElementSibling.nextElementSibling.style.display = \"none\";\n",
       "            }\n",
       "            else{\n",
       "              code_blocks[i].closest(class_answer).nextElementSibling.style.display = \"none\";\n",
       "            }            \n",
       "          }\n",
       "        }\n",
       "        \n",
       "        \n",
       "      }\n",
       "    });\n",
       "  });\n",
       "</script>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "<div id=\"popup\" style=\"padding-bottom:5px; display:none;\">\n",
       "    <div>Enter Password:</div>\n",
       "    <input id=\"password\" type=\"password\"/>\n",
       "    <button onclick=\"done()\" style=\"border-radius: 12px;\">Submit</button>    \n",
       "</div>\n",
       "<button onclick=\"unlock()\" style=\"border-radius: 12px;\">Unclock</button>\n",
       "<a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%run ../initscript.py\n",
    "HTML(\"\"\"\n",
    "<div id=\"popup\" style=\"padding-bottom:5px; display:none;\">\n",
    "    <div>Enter Password:</div>\n",
    "    <input id=\"password\" type=\"password\"/>\n",
    "    <button onclick=\"done()\" style=\"border-radius: 12px;\">Submit</button>    \n",
    "</div>\n",
    "<button onclick=\"unlock()\" style=\"border-radius: 12px;\">Unclock</button>\n",
    "<a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"code_toggle(this); return false;\">show code</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# %run loadfuncs.py\n",
    "import numpy as np\n",
    "\n",
    "from ipywidgets import *\n",
    "%matplotlib inline\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "toggle()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introduction to Deep Learning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A First Look"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There is a set of 60,000 training images, plus 10,000 test images, assembled by the National Institute of Standards and\n",
    "Technology (NIST). Each image is a gray scale 28 $\\times$ 28 pixels handwritten digits. we're trying to classify images into their 10 categories (0 through 9)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training images:(60000, 28, 28), test images:(10000, 28, 28)\n"
     ]
    }
   ],
   "source": [
    "from keras.datasets import mnist\n",
    "(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\n",
    "print('training images:{}, test images:{}'.format(train_images.shape, test_images.shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6015b3a721fc4fe1ab2112d2858af516",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(RadioButtons(description='Data:', options=('train', 'test'), value='train'), IntText(valâ€¦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def showimg(data, idx):\n",
    "    span = 5\n",
    "    if data=='train':\n",
    "        if idx+span<train_images.shape[0]:\n",
    "            images = train_images\n",
    "            labels = train_labels\n",
    "        else:\n",
    "            print('Index is out of range.')\n",
    "    if data=='test':\n",
    "        if idx+span<test_images.shape[0]:\n",
    "            images = test_images\n",
    "            labels = test_labels\n",
    "        else:\n",
    "            print('Index is out of range.')\n",
    "    plt.figure(figsize=(20,4))\n",
    "    for i in range(span):\n",
    "        plt.subplot(1, 5, i + 1)\n",
    "        digit = images[idx+i]            \n",
    "        plt.imshow(digit, cmap=plt.cm.binary)\n",
    "        plt.title('Index:{}, Label:{}'.format(idx+i, labels[idx+i]), fontsize = 15)\n",
    "    plt.show()\n",
    "\n",
    "interact(showimg,\n",
    "    data = widgets.RadioButtons(options=['train', 'test'],\n",
    "                                value='train', description='Data:', disabled=False),\n",
    "    idx = widgets.IntText(value=7, description='Index:', disabled=False));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Network Architecture\n",
    "\n",
    "The core building block of neural networks is the *layer*, a data-processing module working as a filter for data. Specifically, layers extract representations out of the data fed into them in a more useful form which is often called features.\n",
    "\n",
    "Most of deep learning consists of chaining together simple layers that will implement a form of progressive data distillation. A deep-learning model is like a sieve for data processing, made of a succession of increasingly refined data filters the layers.\n",
    "\n",
    "```python\n",
    "network = models.Sequential()\n",
    "network.add(layers.Dense(512, activation='relu', input_shape=(28 * 28,)))\n",
    "network.add(layers.Dense(10, activation='softmax'))\n",
    "```\n",
    "\n",
    "Here, our network consists of a sequence of two densely connected (fully connected) layers. The second (and last) layer is a\n",
    "10-way softmax layer, which means it will return an array of 10 probability scores (summing to 1). Each score will be the probability that the current digit image belongs to one of our 10 digit classes."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Compilation\n",
    "\n",
    "Before training the network, we need to perform a compilation step by setting up:\n",
    "\n",
    "- An optimizer: the mechanism to improve its performance on the training data\n",
    "\n",
    "- A loss function: the measurement of its performance on the training data\n",
    "\n",
    "- Metrics to monitor during training and testing\n",
    "\n",
    "```python\n",
    "network.compile(optimizer='rmsprop',\n",
    "                loss='categorical_crossentropy',\n",
    "                metrics=['accuracy'])\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Preparation\n",
    "\n",
    "```python\n",
    "train_images_reshape = train_images.reshape((60000, 28 * 28))\n",
    "train_images_reshape = train_images_reshape.astype('float32') / 255\n",
    "\n",
    "test_images_reshape = test_images.reshape((10000, 28 * 28))\n",
    "test_images_reshape = test_images_reshape.astype('float32') / 255\n",
    "\n",
    "train_labels_cat = to_categorical(train_labels)\n",
    "test_labels_cat = to_categorical(test_labels)\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Fitting\n",
    "\n",
    "We train the neural network so that it can classify images in test image set.\n",
    "\n",
    "```python\n",
    "network.fit(train_images_reshape, train_labels_cat, epochs=5, batch_size=128)\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n",
      "60000/60000 [==============================] - 5s 79us/step - loss: 0.2551 - acc: 0.9261\n",
      "Epoch 2/5\n",
      "60000/60000 [==============================] - 4s 68us/step - loss: 0.1042 - acc: 0.9689\n",
      "Epoch 3/5\n",
      "60000/60000 [==============================] - 4s 68us/step - loss: 0.0694 - acc: 0.9799\n",
      "Epoch 4/5\n",
      "60000/60000 [==============================] - 4s 68us/step - loss: 0.0499 - acc: 0.9849\n",
      "Epoch 5/5\n",
      "60000/60000 [==============================] - 4s 68us/step - loss: 0.0383 - acc: 0.9884\n",
      "10000/10000 [==============================] - 1s 70us/step\n",
      "test accuracy: 0.9788\n"
     ]
    }
   ],
   "source": [
    "from keras import models\n",
    "from keras import layers\n",
    "from keras.utils import to_categorical\n",
    "\n",
    "network = models.Sequential()\n",
    "network.add(layers.Dense(512, activation='relu', input_shape=(28 * 28,)))\n",
    "network.add(layers.Dense(10, activation='softmax'))\n",
    "\n",
    "network.compile(optimizer='rmsprop',\n",
    "                loss='categorical_crossentropy',\n",
    "                metrics=['accuracy'])\n",
    "\n",
    "train_images_reshape = train_images.reshape((60000, 28 * 28))\n",
    "train_images_reshape = train_images_reshape.astype('float32') / 255\n",
    "\n",
    "test_images_reshape = test_images.reshape((10000, 28 * 28))\n",
    "test_images_reshape = test_images_reshape.astype('float32') / 255\n",
    "\n",
    "train_labels_cat = to_categorical(train_labels)\n",
    "test_labels_cat = to_categorical(test_labels)\n",
    "\n",
    "network.fit(train_images_reshape, train_labels_cat, epochs=5, batch_size=128)\n",
    "\n",
    "test_loss, test_acc = network.evaluate(test_images_reshape, test_labels_cat)\n",
    "print('test accuracy:', test_acc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We reach an accuracy of 98.9% on the training data. However, the test-set accuracy turns out to be 97.8% â€” that's quite a bit lower than the training set accuracy as our errors are doubled. This gap between training accuracy and test accuracy is an example of **overfitting**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Prediction Error\n",
    "\n",
    "We demonstrate a few images that are misclassified by the trained neural network."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# of misclassified images: 212\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x288 with 5 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "predicted = network.predict_classes(test_images_reshape)    \n",
    "result = abs(predicted - test_labels)\n",
    "misclassified = np.where(result>0)[0]\n",
    "print('# of misclassified images:',misclassified.shape[0])\n",
    "\n",
    "plt.figure(figsize=(20,4))\n",
    "for i in range(5):\n",
    "    plt.subplot(1, 5, i + 1)\n",
    "    idx = misclassified[i]\n",
    "    digit = test_images[idx]            \n",
    "    plt.imshow(digit, cmap=plt.cm.binary)\n",
    "    plt.title('Predicted:{}, Label:{}'.format(predicted[idx], test_labels[idx]), fontsize = 15)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A Short History of AI\n",
    "\n",
    "\n",
    "The first AI hype\n",
    "\n",
    "For a fairly long time, many experts believed that human-level artificial intelligence could be achieved by having programmers handcraft a sufficiently large set of explicit rules for manipulating knowledge."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Artificial intelligence was proposed by a handful of pioneers from the nascent field of computer science in the 1950s. A concise definition of the field would be as follows: *the effort to automate intellectual tasks normally performed by humans*.\n",
    "\n",
    "![def](https://www.stoodnt.com/blog/wp-content/uploads/2018/03/Deep_Learning_Machine_Learning_AI_History_Medium.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Kaggle is dominated by two approaches: gradient boosting machines\n",
    "\n",
    "![tensor](https://hadrienj.github.io/assets/images/2.1/scalar-vector-matrix-tensor.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Current Status"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Achievements\n",
    "\n",
    "Deep learning has achieved the following breakthroughs, all in historically difficult areas of machine learning:\n",
    "- Near-human-level image classification\n",
    "- Near-human-level speech recognition\n",
    "- Near-human-level handwriting transcription\n",
    "- Improved machine translation\n",
    "- Improved text-to-speech conversion\n",
    "- Digital assistants such as Google Now and Amazon Alexa\n",
    "- Near-human-level autonomous driving\n",
    "- Improved ad targeting, as used by Google, Baidu, and Bing\n",
    "- Improved search results on the web\n",
    "- Ability to answer natural-language questions\n",
    "- Superhuman Go playing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Hardware\n",
    "\n",
    "Although our laptop can run small deep-learning models, typical deep-learning models used in computer vision or speech recognition require orders of magnitude more computational power.\n",
    "\n",
    "Throughout the 2000s, companies like NVIDIA and AMD have been investing billions of dollars in developing fast, massively parallel chips, graphical processing units (GPUs), to power the graphics of increasingly photorealistic video games â€” cheap, single-purpose supercomputers designed to render complex 3D scenes on the screen in real time.\n",
    "\n",
    "NVIDIA launched CUDA, a programming interface for its line of GPUs, in 2007, and around 2011, some researchers began to write CUDA implementations of neural nets. \n",
    "\n",
    "At the end of 2015, the NVIDIA TITAN X, a gaming GPU that cost \\$1,000 can deliver a peak of 6.6 TFLOPS in single precision: 6.6 trillion `float32` operations per second. That is about 350 times more than what you can get out of a modern laptop. Meanwhile, large companies train deep-learning models on clusters of hundreds of GPUs of a type developed specifically for the needs of deep learning, such as the NVIDIA Tesla K80. The sheer computational power of such clusters is something that would never have been possible without modern GPUs.\n",
    "\n",
    "The deep-learning industry is starting to go beyond GPUs and is investing in increasingly specialized, efficient chips for deep learning. In 2016, at its annual I/O convention, Google revealed its tensor processing unit (TPU) project: a new chip design developed from the ground up to run deep neural networks, which is reportedly 10 times faster and far more energy efficient than top-of-the-line GPUs."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Investment\n",
    "\n",
    "As deep learning became the new state of the art for computer vision and eventually for all perceptual tasks, industry leaders took note. What followed was a gradual wave of industry investment far beyond anything previously seen in the history of AI.\n",
    "\n",
    "- In 2011 (right before deep learning took the spotlight), the total venture capital investment in AI was around <span>&dollar;</span>19 million\n",
    "\n",
    "- By 2014, the total venture capital investment in AI had risen to <span>&dollar;</span>394 million\n",
    "\n",
    "    - Google acquired the deep-learning startup DeepMind for a reported <span>&dollar;</span>500 million â€” the largest acquisition of an AI company in history.\n",
    "    \n",
    "    - Baidu started a deep-learning research center in Silicon Valley, investing <span>&dollar;</span>300 million in the project.\n",
    "    \n",
    "    - Intel acquired a deep-learning hardware startup Nervana Systems for over <span>&dollar;</span>400 million.\n",
    "    \n",
    "There are currently no signs that this uptrend will slow any time soon.\n",
    "\n",
    "**Case**:\n",
    "\n",
    "As entrepreneurs of AI start-ups, Alice and Bob had received similar amount of investment and compete in the same market\n",
    "\n",
    "- Alice spent lots of money to hire top mathematicians and engineers in AI field\n",
    "\n",
    "- Bob hired good engineers in AI field and spent most of his money to obtain high quality data with larger size\n",
    "\n",
    "Who will you invest? Why?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <a href=\"#\" onclick=\"hide_answer(this); return false;\">show answer</a>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hide_answer()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "print('The accuracy of a complicated model (with 512 nodes) with less (half) training data:', net_compare(512, .5))\n",
    "print('The accuracy of a simple model (with 206 nodes) with more training of data:', net_compare(206, 1))\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "def net_compare(nNodes, train_size_pct):\n",
    "    network = models.Sequential()\n",
    "    network.add(layers.Dense(nNodes, activation='relu', input_shape=(28 * 28,)))\n",
    "    network.add(layers.Dense(10, activation='softmax'))\n",
    "\n",
    "    network.compile(optimizer='rmsprop',\n",
    "                    loss='categorical_crossentropy',\n",
    "                    metrics=['accuracy'])\n",
    "\n",
    "    train_size = int(60000*train_size_pct)\n",
    "    \n",
    "    train_images_reshape = train_images[:train_size].reshape((train_size, 28 * 28))\n",
    "    train_images_reshape = train_images_reshape.astype('float32') / 255\n",
    "\n",
    "    test_images_reshape = test_images.reshape((10000, 28 * 28))\n",
    "    test_images_reshape = test_images_reshape.astype('float32') / 255\n",
    "\n",
    "    train_labels_cat = to_categorical(train_labels[:train_size])\n",
    "    test_labels_cat = to_categorical(test_labels)\n",
    "\n",
    "    network.fit(train_images_reshape, train_labels_cat, epochs=5, batch_size=128);\n",
    "\n",
    "    test_loss, test_acc = network.evaluate(test_images_reshape, test_labels_cat)\n",
    "    return test_acc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n",
      "30000/30000 [==============================] - 3s 92us/step - loss: 0.3413 - acc: 0.9024\n",
      "Epoch 2/5\n",
      "30000/30000 [==============================] - 2s 72us/step - loss: 0.1501 - acc: 0.9577\n",
      "Epoch 3/5\n",
      "30000/30000 [==============================] - 2s 72us/step - loss: 0.0972 - acc: 0.9720\n",
      "Epoch 4/5\n",
      "30000/30000 [==============================] - 2s 69us/step - loss: 0.0689 - acc: 0.9791\n",
      "Epoch 5/5\n",
      "30000/30000 [==============================] - 2s 69us/step - loss: 0.0499 - acc: 0.9851\n",
      "10000/10000 [==============================] - 1s 84us/step\n",
      "The accuracy of a complicated model (with 512 nodes) with less (half) training data: 0.9687\n",
      "Epoch 1/5\n",
      "60000/60000 [==============================] - 3s 53us/step - loss: 0.3053 - acc: 0.9144\n",
      "Epoch 2/5\n",
      "60000/60000 [==============================] - 3s 43us/step - loss: 0.1404 - acc: 0.9594\n",
      "Epoch 3/5\n",
      "60000/60000 [==============================] - 3s 43us/step - loss: 0.0966 - acc: 0.9723\n",
      "Epoch 4/5\n",
      "60000/60000 [==============================] - 3s 43us/step - loss: 0.0734 - acc: 0.9786\n",
      "Epoch 5/5\n",
      "60000/60000 [==============================] - 3s 43us/step - loss: 0.0574 - acc: 0.9834\n",
      "10000/10000 [==============================] - 1s 73us/step\n",
      "The accuracy of a simple model (with 206 nodes) with more training of data: 0.975\n"
     ]
    }
   ],
   "source": [
    "print('The accuracy of a complicated model (with 512 nodes) with less (half) training data:', net_compare(512, .5))\n",
    "print('The accuracy of a simple model (with 206 nodes) with more training of data:', net_compare(206, 1))"
   ]
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
